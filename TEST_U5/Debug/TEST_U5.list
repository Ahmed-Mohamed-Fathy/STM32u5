
TEST_U5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd30  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  0800bf68  0800bf68  0001bf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dce0  0800dce0  0001dce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dce8  0800dce8  0001dce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dcec  0800dcec  0001dcec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000015  20000000  0800dcf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a8  20000018  0800dd05  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200007c0  0800dd05  000207c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020015  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ffc9  00000000  00000000  0002004b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003509  00000000  00000000  00040014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001920  00000000  00000000  00043520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017f8  00000000  00000000  00044e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038325  00000000  00000000  00046638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e6f1  00000000  00000000  0007e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c617  00000000  00000000  0009d04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00209665  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007090  00000000  00000000  002096b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000018 	.word	0x20000018
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bf50 	.word	0x0800bf50

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000001c 	.word	0x2000001c
 8000274:	0800bf50 	.word	0x0800bf50

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	; 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b982 	b.w	8000ed0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000bea:	4604      	mov	r4, r0
 8000bec:	460f      	mov	r7, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d148      	bne.n	8000c84 <__udivmoddi4+0xa0>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d961      	bls.n	8000cbc <__udivmoddi4+0xd8>
 8000bf8:	fab2 f382 	clz	r3, r2
 8000bfc:	b143      	cbz	r3, 8000c10 <__udivmoddi4+0x2c>
 8000bfe:	f1c3 0120 	rsb	r1, r3, #32
 8000c02:	409f      	lsls	r7, r3
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	430f      	orrs	r7, r1
 8000c10:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	0c22      	lsrs	r2, r4, #16
 8000c1a:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c1e:	fb01 7716 	mls	r7, r1, r6, r7
 8000c22:	fb06 f00e 	mul.w	r0, r6, lr
 8000c26:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x5c>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x5a>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 8137 	bhi.w	8000eac <__udivmoddi4+0x2c8>
 8000c3e:	463e      	mov	r6, r7
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c48:	fb01 2210 	mls	r2, r1, r0, r2
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x86>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x84>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 811c 	bhi.w	8000ea0 <__udivmoddi4+0x2bc>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	2600      	movs	r6, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0x9a>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7e:	4631      	mov	r1, r6
 8000c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0xb8>
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	f000 80fd 	beq.w	8000e88 <__udivmoddi4+0x2a4>
 8000c8e:	2600      	movs	r6, #0
 8000c90:	e9c5 0100 	strd	r0, r1, [r5]
 8000c94:	4630      	mov	r0, r6
 8000c96:	4631      	mov	r1, r6
 8000c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9c:	fab3 f683 	clz	r6, r3
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d14b      	bne.n	8000d3c <__udivmoddi4+0x158>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f0c0 80f2 	bcc.w	8000e8e <__udivmoddi4+0x2aa>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f240 80ef 	bls.w	8000e8e <__udivmoddi4+0x2aa>
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e3      	beq.n	8000c7e <__udivmoddi4+0x9a>
 8000cb6:	e9c5 4700 	strd	r4, r7, [r5]
 8000cba:	e7e0      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xdc>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f382 	clz	r3, r2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f040 809d 	bne.w	8000e04 <__udivmoddi4+0x220>
 8000cca:	1a89      	subs	r1, r1, r2
 8000ccc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000cd0:	b297      	uxth	r7, r2
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f2fe 	udiv	r2, r1, lr
 8000cda:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb07 f002 	mul.w	r0, r7, r2
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d90f      	bls.n	8000d0a <__udivmoddi4+0x126>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cf2:	bf2c      	ite	cs
 8000cf4:	f04f 0901 	movcs.w	r9, #1
 8000cf8:	f04f 0900 	movcc.w	r9, #0
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	d903      	bls.n	8000d08 <__udivmoddi4+0x124>
 8000d00:	f1b9 0f00 	cmp.w	r9, #0
 8000d04:	f000 80cf 	beq.w	8000ea6 <__udivmoddi4+0x2c2>
 8000d08:	4642      	mov	r2, r8
 8000d0a:	1a09      	subs	r1, r1, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d1e:	42a7      	cmp	r7, r4
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x150>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14e>
 8000d2c:	42a7      	cmp	r7, r4
 8000d2e:	f200 80b4 	bhi.w	8000e9a <__udivmoddi4+0x2b6>
 8000d32:	4608      	mov	r0, r1
 8000d34:	1be4      	subs	r4, r4, r7
 8000d36:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d3a:	e79b      	b.n	8000c74 <__udivmoddi4+0x90>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa01 f406 	lsl.w	r4, r1, r6
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	40f9      	lsrs	r1, r7
 8000d4c:	40b2      	lsls	r2, r6
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fa00 f306 	lsl.w	r3, r0, r6
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb08 f00e 	mul.w	r0, r8, lr
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d90f      	bls.n	8000d9a <__udivmoddi4+0x1b6>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b4>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 808d 	beq.w	8000eb2 <__udivmoddi4+0x2ce>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	1a09      	subs	r1, r1, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da2:	fb09 1110 	mls	r1, r9, r0, r1
 8000da6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000daa:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dae:	458e      	cmp	lr, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x1de>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dba:	d201      	bcs.n	8000dc0 <__udivmoddi4+0x1dc>
 8000dbc:	458e      	cmp	lr, r1
 8000dbe:	d87f      	bhi.n	8000ec0 <__udivmoddi4+0x2dc>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	fba0 9802 	umull	r9, r8, r0, r2
 8000dce:	4541      	cmp	r1, r8
 8000dd0:	464c      	mov	r4, r9
 8000dd2:	46c6      	mov	lr, r8
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x1f8>
 8000dd6:	d106      	bne.n	8000de6 <__udivmoddi4+0x202>
 8000dd8:	454b      	cmp	r3, r9
 8000dda:	d204      	bcs.n	8000de6 <__udivmoddi4+0x202>
 8000ddc:	3801      	subs	r0, #1
 8000dde:	ebb9 0402 	subs.w	r4, r9, r2
 8000de2:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d070      	beq.n	8000ecc <__udivmoddi4+0x2e8>
 8000dea:	1b1a      	subs	r2, r3, r4
 8000dec:	eb61 010e 	sbc.w	r1, r1, lr
 8000df0:	fa22 f306 	lsr.w	r3, r2, r6
 8000df4:	fa01 f707 	lsl.w	r7, r1, r7
 8000df8:	40f1      	lsrs	r1, r6
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	431f      	orrs	r7, r3
 8000dfe:	e9c5 7100 	strd	r7, r1, [r5]
 8000e02:	e73c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000e04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e08:	f1c3 0020 	rsb	r0, r3, #32
 8000e0c:	fa01 f203 	lsl.w	r2, r1, r3
 8000e10:	fa21 f600 	lsr.w	r6, r1, r0
 8000e14:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e18:	fa24 f100 	lsr.w	r1, r4, r0
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	409c      	lsls	r4, r3
 8000e22:	4311      	orrs	r1, r2
 8000e24:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e28:	0c0a      	lsrs	r2, r1, #16
 8000e2a:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e2e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e32:	fb00 f607 	mul.w	r6, r0, r7
 8000e36:	4296      	cmp	r6, r2
 8000e38:	d90e      	bls.n	8000e58 <__udivmoddi4+0x274>
 8000e3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e42:	bf2c      	ite	cs
 8000e44:	f04f 0901 	movcs.w	r9, #1
 8000e48:	f04f 0900 	movcc.w	r9, #0
 8000e4c:	4296      	cmp	r6, r2
 8000e4e:	d902      	bls.n	8000e56 <__udivmoddi4+0x272>
 8000e50:	f1b9 0f00 	cmp.w	r9, #0
 8000e54:	d031      	beq.n	8000eba <__udivmoddi4+0x2d6>
 8000e56:	4640      	mov	r0, r8
 8000e58:	1b92      	subs	r2, r2, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e60:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e68:	fb06 f207 	mul.w	r2, r6, r7
 8000e6c:	428a      	cmp	r2, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x29c>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000e7a:	428a      	cmp	r2, r1
 8000e7c:	d823      	bhi.n	8000ec6 <__udivmoddi4+0x2e2>
 8000e7e:	4646      	mov	r6, r8
 8000e80:	1a89      	subs	r1, r1, r2
 8000e82:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e86:	e725      	b.n	8000cd4 <__udivmoddi4+0xf0>
 8000e88:	462e      	mov	r6, r5
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e6f7      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000e8e:	1a84      	subs	r4, r0, r2
 8000e90:	eb61 0303 	sbc.w	r3, r1, r3
 8000e94:	2001      	movs	r0, #1
 8000e96:	461f      	mov	r7, r3
 8000e98:	e70b      	b.n	8000cb2 <__udivmoddi4+0xce>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e749      	b.n	8000d34 <__udivmoddi4+0x150>
 8000ea0:	4464      	add	r4, ip
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e1      	b.n	8000c6a <__udivmoddi4+0x86>
 8000ea6:	3a02      	subs	r2, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	e72e      	b.n	8000d0a <__udivmoddi4+0x126>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4462      	add	r2, ip
 8000eb0:	e6c6      	b.n	8000c40 <__udivmoddi4+0x5c>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4461      	add	r1, ip
 8000eb8:	e76f      	b.n	8000d9a <__udivmoddi4+0x1b6>
 8000eba:	3802      	subs	r0, #2
 8000ebc:	4462      	add	r2, ip
 8000ebe:	e7cb      	b.n	8000e58 <__udivmoddi4+0x274>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e77d      	b.n	8000dc2 <__udivmoddi4+0x1de>
 8000ec6:	3e02      	subs	r6, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	e7d9      	b.n	8000e80 <__udivmoddi4+0x29c>
 8000ecc:	462e      	mov	r6, r5
 8000ece:	e6d6      	b.n	8000c7e <__udivmoddi4+0x9a>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LCD_GPIO_Init>:
//								HAL_Delay(3);
//								LCD_RD_IDLE();
//								HAL_Delay(3);
//							} while(0)

static void LCD_GPIO_Init(uint32_t mode) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	; 0x38
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]


	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d003      	beq.n	8000eea <LCD_GPIO_Init+0x16>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 80c1 	bne.w	800106c <LCD_GPIO_Init+0x198>

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8000eea:	4b62      	ldr	r3, [pc, #392]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ef0:	4a60      	ldr	r2, [pc, #384]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000efa:	4b5e      	ldr	r3, [pc, #376]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
	__GPIOB_CLK_ENABLE();
 8000f08:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f0e:	4a59      	ldr	r2, [pc, #356]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f18:	4b56      	ldr	r3, [pc, #344]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
	__GPIOC_CLK_ENABLE();
 8000f26:	4b53      	ldr	r3, [pc, #332]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f36:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
	__GPIOE_CLK_ENABLE();
 8000f44:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f4a:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f4c:	f043 0310 	orr.w	r3, r3, #16
 8000f50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f54:	4b47      	ldr	r3, [pc, #284]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
	__GPIOF_CLK_ENABLE();
 8000f62:	4b44      	ldr	r3, [pc, #272]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f68:	4a42      	ldr	r2, [pc, #264]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f72:	4b40      	ldr	r3, [pc, #256]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
	__GPIOG_CLK_ENABLE();
 8000f80:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f86:	4a3b      	ldr	r2, [pc, #236]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f90:	4b38      	ldr	r3, [pc, #224]	; (8001074 <LCD_GPIO_Init+0x1a0>)
 8000f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

	/*Configure GPIO data pins : PA2 , PA3  */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 ;
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000faa:	2302      	movs	r3, #2
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4830      	ldr	r0, [pc, #192]	; (8001078 <LCD_GPIO_Init+0x1a4>)
 8000fb6:	f003 fd43 	bl	8004a40 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	482a      	ldr	r0, [pc, #168]	; (800107c <LCD_GPIO_Init+0x1a8>)
 8000fd2:	f003 fd35 	bl	8004a40 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PC0 , PC1 , PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3  ;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	4619      	mov	r1, r3
 8000fec:	4824      	ldr	r0, [pc, #144]	; (8001080 <LCD_GPIO_Init+0x1ac>)
 8000fee:	f003 fd27 	bl	8004a40 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15 ;
 8000ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2302      	movs	r3, #2
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <LCD_GPIO_Init+0x1b0>)
 800100c:	f003 fd18 	bl	8004a40 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PE9 , PE11 ,PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13 ;
 8001010:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2302      	movs	r3, #2
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4817      	ldr	r0, [pc, #92]	; (8001088 <LCD_GPIO_Init+0x1b4>)
 800102a:	f003 fd09 	bl	8004a40 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PF12 , PF13 , PF14 , PF15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
 800102e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2302      	movs	r3, #2
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <LCD_GPIO_Init+0x1b8>)
 8001048:	f003 fcfa 	bl	8004a40 <HAL_GPIO_Init>

	/*Configure GPIO data pins : PG7 , PG8*/
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8  ;
 800104c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = mode;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800105a:	2302      	movs	r3, #2
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <LCD_GPIO_Init+0x1bc>)
 8001066:	f003 fceb 	bl	8004a40 <HAL_GPIO_Init>
 800106a:	e000      	b.n	800106e <LCD_GPIO_Init+0x19a>
	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 800106c:	bf00      	nop


}
 800106e:	3738      	adds	r7, #56	; 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	46020c00 	.word	0x46020c00
 8001078:	42020000 	.word	0x42020000
 800107c:	42020400 	.word	0x42020400
 8001080:	42020800 	.word	0x42020800
 8001084:	42020c00 	.word	0x42020c00
 8001088:	42021000 	.word	0x42021000
 800108c:	42021400 	.word	0x42021400
 8001090:	42021800 	.word	0x42021800

08001094 <LCD_Write8>:



static inline void LCD_Write8(uint8_t d) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]

	LCD_CS_ACTIVE();
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <LCD_Write8+0xa0>)
 80010a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a4:	619a      	str	r2, [r3, #24]

	GPIOD->BSRR = (1<<15) << 16;
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <LCD_Write8+0xa4>)
 80010a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010ac:	619a      	str	r2, [r3, #24]
	GPIOF->BSRR = ((1<<12)|(1<<15)|(1<<14)|(1<<13)) << 16;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <LCD_Write8+0xa8>)
 80010b0:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80010b4:	619a      	str	r2, [r3, #24]
	GPIOE->BSRR = ((1<<13)|(1<<11)|(1<<9)) << 16;
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <LCD_Write8+0xac>)
 80010b8:	f04f 5228 	mov.w	r2, #704643072	; 0x2a000000
 80010bc:	619a      	str	r2, [r3, #24]

	GPIOF->BSRR =    (((d) & (1<<0)) << 12)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	031b      	lsls	r3, r3, #12
 80010c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
				   | (((d) & (1<<7)) << 6)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	019b      	lsls	r3, r3, #6
 80010ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ce:	431a      	orrs	r2, r3
				   | (((d) & (1<<4)) << 10)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	029b      	lsls	r3, r3, #10
 80010d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d8:	431a      	orrs	r2, r3
				   | (((d) & (1<<2)) << 13);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	035b      	lsls	r3, r3, #13
 80010de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e2:	431a      	orrs	r2, r3
	GPIOF->BSRR =    (((d) & (1<<0)) << 12)
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <LCD_Write8+0xa8>)
 80010e6:	619a      	str	r2, [r3, #24]

	GPIOE->BSRR = (((d) & (1<<6)) << 3)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	f403 7200 	and.w	r2, r3, #512	; 0x200
				   | (((d) & (1<<5)) << 6)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	019b      	lsls	r3, r3, #6
 80010f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f8:	431a      	orrs	r2, r3
				   | (((d) & (1<<3)) << 10);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	029b      	lsls	r3, r3, #10
 80010fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001102:	431a      	orrs	r2, r3
	GPIOE->BSRR = (((d) & (1<<6)) << 3)
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <LCD_Write8+0xac>)
 8001106:	619a      	str	r2, [r3, #24]

	GPIOD->BSRR = (((d) & (1<<1)) << 14);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	039b      	lsls	r3, r3, #14
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LCD_Write8+0xa4>)
 800110e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001112:	6193      	str	r3, [r2, #24]


	LCD_WR_ACTIVE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <LCD_Write8+0xb0>)
 8001116:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800111a:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <LCD_Write8+0xb0>)
 800111e:	2204      	movs	r2, #4
 8001120:	619a      	str	r2, [r3, #24]

	LCD_CS_IDLE();
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <LCD_Write8+0xa0>)
 8001124:	2201      	movs	r2, #1
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	42020400 	.word	0x42020400
 8001138:	42020c00 	.word	0x42020c00
 800113c:	42021400 	.word	0x42021400
 8001140:	42021000 	.word	0x42021000
 8001144:	42020000 	.word	0x42020000

08001148 <TFT_24S_Write_Command>:

void TFT_24S_Write_Command(uint16_t command)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
	LCD_CD_COMMAND();
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <TFT_24S_Write_Command+0x24>)
 8001154:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001158:	619a      	str	r2, [r3, #24]
	LCD_Write8(command);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff98 	bl	8001094 <LCD_Write8>

}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	42020800 	.word	0x42020800

08001170 <TFT_24S_Write_Data>:
void TFT_24S_Write_Data(uint16_t data)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
	LCD_CD_DATA();
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <TFT_24S_Write_Data+0x24>)
 800117c:	2208      	movs	r2, #8
 800117e:	619a      	str	r2, [r3, #24]
	LCD_Write8(data);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff85 	bl	8001094 <LCD_Write8>

}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	42020800 	.word	0x42020800

08001198 <LCD_Write16Register8>:
	LCD_CD_DATA();
	LCD_Write8(d);

}

static inline void LCD_Write16Register8(uint8_t a, uint16_t d) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80bb      	strh	r3, [r7, #4]
	LCD_CD_COMMAND();
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <LCD_Write16Register8+0x48>)
 80011aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011ae:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff6e 	bl	8001094 <LCD_Write8>

	LCD_CD_DATA();
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <LCD_Write16Register8+0x48>)
 80011ba:	2208      	movs	r2, #8
 80011bc:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 8);
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff64 	bl	8001094 <LCD_Write8>
	LCD_Write8(d);
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <LCD_Write8>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	42020800 	.word	0x42020800

080011e4 <LCD_Write32Register8>:
	LCD_Write8(d >> 8);
	LCD_Write8(d);

}

static inline void LCD_Write32Register8(uint8_t a, uint32_t d) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
	LCD_CD_COMMAND();
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <LCD_Write32Register8+0x58>)
 80011f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011f6:	619a      	str	r2, [r3, #24]
	LCD_Write8(a);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff4a 	bl	8001094 <LCD_Write8>

	LCD_CD_DATA();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <LCD_Write32Register8+0x58>)
 8001202:	2208      	movs	r2, #8
 8001204:	619a      	str	r2, [r3, #24]
	LCD_Write8(d >> 24);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	0e1b      	lsrs	r3, r3, #24
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff41 	bl	8001094 <LCD_Write8>
	LCD_Write8(d >> 16);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	0c1b      	lsrs	r3, r3, #16
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff3b 	bl	8001094 <LCD_Write8>
	LCD_Write8(d >> 8);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff35 	bl	8001094 <LCD_Write8>
	LCD_Write8(d);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff30 	bl	8001094 <LCD_Write8>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	42020800 	.word	0x42020800

08001240 <LCD_init>:
}



void LCD_init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	//	volatile uint32_t temp=0;
	m_width = TFTWIDTH;
 8001244:	4b76      	ldr	r3, [pc, #472]	; (8001420 <LCD_init+0x1e0>)
 8001246:	22f0      	movs	r2, #240	; 0xf0
 8001248:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <LCD_init+0x1e4>)
 800124c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001250:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8001252:	4b75      	ldr	r3, [pc, #468]	; (8001428 <LCD_init+0x1e8>)
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8001258:	4b74      	ldr	r3, [pc, #464]	; (800142c <LCD_init+0x1ec>)
 800125a:	2200      	movs	r2, #0
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	4b73      	ldr	r3, [pc, #460]	; (800142c <LCD_init+0x1ec>)
 8001260:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001264:	4b72      	ldr	r3, [pc, #456]	; (8001430 <LCD_init+0x1f0>)
 8001266:	801a      	strh	r2, [r3, #0]
	m_font = 0;
 8001268:	4b72      	ldr	r3, [pc, #456]	; (8001434 <LCD_init+0x1f4>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	m_textcolor = BLUE;
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <LCD_init+0x1f8>)
 8001270:	221f      	movs	r2, #31
 8001272:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = WHITE;
 8001274:	4b71      	ldr	r3, [pc, #452]	; (800143c <LCD_init+0x1fc>)
 8001276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127a:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <LCD_init+0x200>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
	LCD_GPIO_Init(GPIO_MODE_OUTPUT_PP);
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff fe26 	bl	8000ed4 <LCD_GPIO_Init>
	LCD_CS_ACTIVE();
 8001288:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <LCD_init+0x204>)
 800128a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800128e:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 8001290:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <LCD_init+0x208>)
 8001292:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001296:	619a      	str	r2, [r3, #24]
	LCD_RST_IDLE();
 8001298:	4b6b      	ldr	r3, [pc, #428]	; (8001448 <LCD_init+0x208>)
 800129a:	2202      	movs	r2, #2
 800129c:	619a      	str	r2, [r3, #24]
	LCD_WR_ACTIVE();
 800129e:	4b6b      	ldr	r3, [pc, #428]	; (800144c <LCD_init+0x20c>)
 80012a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012a4:	619a      	str	r2, [r3, #24]
	LCD_RD_ACTIVE();
 80012a6:	4b69      	ldr	r3, [pc, #420]	; (800144c <LCD_init+0x20c>)
 80012a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012ac:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 80012ae:	200a      	movs	r0, #10
 80012b0:	f002 febc 	bl	800402c <HAL_Delay>

	LCD_CS_IDLE();
 80012b4:	4b63      	ldr	r3, [pc, #396]	; (8001444 <LCD_init+0x204>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	619a      	str	r2, [r3, #24]
	LCD_CD_DATA();
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <LCD_init+0x208>)
 80012bc:	2208      	movs	r2, #8
 80012be:	619a      	str	r2, [r3, #24]
	LCD_RST_ACTIVE();
 80012c0:	4b61      	ldr	r3, [pc, #388]	; (8001448 <LCD_init+0x208>)
 80012c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c6:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 80012c8:	4b60      	ldr	r3, [pc, #384]	; (800144c <LCD_init+0x20c>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <LCD_init+0x20c>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 80012d4:	2014      	movs	r0, #20
 80012d6:	f002 fea9 	bl	800402c <HAL_Delay>

	LCD_CS_ACTIVE();
 80012da:	4b5a      	ldr	r3, [pc, #360]	; (8001444 <LCD_init+0x204>)
 80012dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e0:	619a      	str	r2, [r3, #24]
	LCD_CD_COMMAND();
 80012e2:	4b59      	ldr	r3, [pc, #356]	; (8001448 <LCD_init+0x208>)
 80012e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e8:	619a      	str	r2, [r3, #24]
	LCD_RST_IDLE();
 80012ea:	4b57      	ldr	r3, [pc, #348]	; (8001448 <LCD_init+0x208>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	619a      	str	r2, [r3, #24]
	LCD_WR_ACTIVE();
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <LCD_init+0x20c>)
 80012f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012f6:	619a      	str	r2, [r3, #24]
	LCD_RD_ACTIVE();
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <LCD_init+0x20c>)
 80012fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012fe:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 8001300:	2014      	movs	r0, #20
 8001302:	f002 fe93 	bl	800402c <HAL_Delay>


	LCD_CS_IDLE();
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <LCD_init+0x204>)
 8001308:	2201      	movs	r2, #1
 800130a:	619a      	str	r2, [r3, #24]
	LCD_WR_IDLE();
 800130c:	4b4f      	ldr	r3, [pc, #316]	; (800144c <LCD_init+0x20c>)
 800130e:	2204      	movs	r2, #4
 8001310:	619a      	str	r2, [r3, #24]
	LCD_RD_IDLE();
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <LCD_init+0x20c>)
 8001314:	2208      	movs	r2, #8
 8001316:	619a      	str	r2, [r3, #24]
	LCD_CS_ACTIVE();
 8001318:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <LCD_init+0x204>)
 800131a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131e:	619a      	str	r2, [r3, #24]
	//	  TFT_24S_Write_Data(0x08);
	//
	//	  TFT_24S_Write_Command(0x11); // Sleep OUT
	//	  TFT_24S_Write_Command(0x29); // Display ON

	TFT_24S_Write_Command (ILI9341_RESET); // software reset comand
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff ff11 	bl	8001148 <TFT_24S_Write_Command>
	HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	; 0x64
 8001328:	f002 fe80 	bl	800402c <HAL_Delay>
	TFT_24S_Write_Command (ILI9341_DISPLAY_OFF); // display off
 800132c:	2028      	movs	r0, #40	; 0x28
 800132e:	f7ff ff0b 	bl	8001148 <TFT_24S_Write_Command>
	//------------power control------------------------------
	TFT_24S_Write_Command (ILI9341_POWER1); // power control
 8001332:	20c0      	movs	r0, #192	; 0xc0
 8001334:	f7ff ff08 	bl	8001148 <TFT_24S_Write_Command>
	   (0x26); // GVDD = 4.75v
	TFT_24S_Write_Command (ILI9341_POWER2); // power control
 8001338:	20c1      	movs	r0, #193	; 0xc1
 800133a:	f7ff ff05 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 800133e:	2011      	movs	r0, #17
 8001340:	f7ff ff16 	bl	8001170 <TFT_24S_Write_Data>
	//--------------VCOM-------------------------------------
	TFT_24S_Write_Command (ILI9341_VCOM1); // vcom control
 8001344:	20c5      	movs	r0, #197	; 0xc5
 8001346:	f7ff feff 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 800134a:	2035      	movs	r0, #53	; 0x35
 800134c:	f7ff ff10 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8001350:	203e      	movs	r0, #62	; 0x3e
 8001352:	f7ff ff0d 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Command (ILI9341_VCOM2); // vcom control
 8001356:	20c7      	movs	r0, #199	; 0xc7
 8001358:	f7ff fef6 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data   (0xbe);
 800135c:	20be      	movs	r0, #190	; 0xbe
 800135e:	f7ff ff07 	bl	8001170 <TFT_24S_Write_Data>

	//------------memory access control------------------------
	TFT_24S_Write_Command (ILI9341_MAC); // memory access control
 8001362:	2036      	movs	r0, #54	; 0x36
 8001364:	f7ff fef0 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data(0x48);
 8001368:	2048      	movs	r0, #72	; 0x48
 800136a:	f7ff ff01 	bl	8001170 <TFT_24S_Write_Data>

	TFT_24S_Write_Command (ILI9341_PIXEL_FORMAT); // pixel format set
 800136e:	203a      	movs	r0, #58	; 0x3a
 8001370:	f7ff feea 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data   (0x55); // 16bit /pixel
 8001374:	2055      	movs	r0, #85	; 0x55
 8001376:	f7ff fefb 	bl	8001170 <TFT_24S_Write_Data>

	TFT_24S_Write_Command(ILI9341_FRC);
 800137a:	20b1      	movs	r0, #177	; 0xb1
 800137c:	f7ff fee4 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fef5 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data(0x1F);
 8001386:	201f      	movs	r0, #31
 8001388:	f7ff fef2 	bl	8001170 <TFT_24S_Write_Data>
	//-------------ddram ----------------------------
	TFT_24S_Write_Command (ILI9341_COLUMN_ADDR); // column set
 800138c:	202a      	movs	r0, #42	; 0x2a
 800138e:	f7ff fedb 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data   (0x00); // x0_HIGH---0
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff feec 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x00); // x0_LOW----0
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fee9 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x00); // x1_HIGH---240
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fee6 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0xEF); // x1_LOW----240
 80013a4:	20ef      	movs	r0, #239	; 0xef
 80013a6:	f7ff fee3 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Command (ILI9341_PAGE_ADDR); // page address set
 80013aa:	202b      	movs	r0, #43	; 0x2b
 80013ac:	f7ff fecc 	bl	8001148 <TFT_24S_Write_Command>
	TFT_24S_Write_Data   (0x00); // y0_HIGH---0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fedd 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x00); // y0_LOW----0
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff feda 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x01); // y1_HIGH---320
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fed7 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x3F); // y1_LOW----320
 80013c2:	203f      	movs	r0, #63	; 0x3f
 80013c4:	f7ff fed4 	bl	8001170 <TFT_24S_Write_Data>

	TFT_24S_Write_Command (ILI9341_TEARING_OFF); // tearing effect off
 80013c8:	2034      	movs	r0, #52	; 0x34
 80013ca:	f7ff febd 	bl	8001148 <TFT_24S_Write_Command>
	//LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
	//LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
	TFT_24S_Write_Command (ILI9341_Entry_Mode_Set); // entry mode set
 80013ce:	20b7      	movs	r0, #183	; 0xb7
 80013d0:	f7ff feba 	bl	8001148 <TFT_24S_Write_Command>
	// Deep Standby Mode: OFF
	// Set the output level of gate driver G1-G320: Normal display
	// Low voltage detection: Disable
	TFT_24S_Write_Data   (0x07);
 80013d4:	2007      	movs	r0, #7
 80013d6:	f7ff fecb 	bl	8001170 <TFT_24S_Write_Data>
	//-----------------display------------------------
	TFT_24S_Write_Command (ILI9341_DFC); // display function control
 80013da:	20b6      	movs	r0, #182	; 0xb6
 80013dc:	f7ff feb4 	bl	8001148 <TFT_24S_Write_Command>
	//Set the scan mode in non-display area
	//Determine source/VCOM output in a non-display area in the partial display mode
	TFT_24S_Write_Data   (0x0a);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f7ff fec5 	bl	8001170 <TFT_24S_Write_Data>
	//Select whether the liquid crystal type is normally white type or normally black type
	//Sets the direction of scan by the gate driver in the range determined by SCN and NL
	//Select the shift direction of outputs from the source driver
	//Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
	//Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
	TFT_24S_Write_Data   (0x82);
 80013e6:	2082      	movs	r0, #130	; 0x82
 80013e8:	f7ff fec2 	bl	8001170 <TFT_24S_Write_Data>
	// Sets the number of lines to drive the LCD at an interval of 8 lines
	TFT_24S_Write_Data   (0x27);
 80013ec:	2027      	movs	r0, #39	; 0x27
 80013ee:	f7ff febf 	bl	8001170 <TFT_24S_Write_Data>
	TFT_24S_Write_Data   (0x00); // clock divisor
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff febc 	bl	8001170 <TFT_24S_Write_Data>

	TFT_24S_Write_Command (ILI9341_SLEEP_OUT); // sleep out
 80013f8:	2011      	movs	r0, #17
 80013fa:	f7ff fea5 	bl	8001148 <TFT_24S_Write_Command>
	HAL_Delay(150);
 80013fe:	2096      	movs	r0, #150	; 0x96
 8001400:	f002 fe14 	bl	800402c <HAL_Delay>
	TFT_24S_Write_Command (ILI9341_DISPLAY_ON); // display on
 8001404:	2029      	movs	r0, #41	; 0x29
 8001406:	f7ff fe9f 	bl	8001148 <TFT_24S_Write_Command>
	HAL_Delay(150);
 800140a:	2096      	movs	r0, #150	; 0x96
 800140c:	f002 fe0e 	bl	800402c <HAL_Delay>
	TFT_24S_Write_Command (ILI9341_GRAM); // memory write
 8001410:	202c      	movs	r0, #44	; 0x2c
 8001412:	f7ff fe99 	bl	8001148 <TFT_24S_Write_Command>
	HAL_Delay(5);
 8001416:	2005      	movs	r0, #5
 8001418:	f002 fe08 	bl	800402c <HAL_Delay>

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000034 	.word	0x20000034
 8001424:	20000036 	.word	0x20000036
 8001428:	20000042 	.word	0x20000042
 800142c:	20000038 	.word	0x20000038
 8001430:	2000003a 	.word	0x2000003a
 8001434:	20000040 	.word	0x20000040
 8001438:	2000003c 	.word	0x2000003c
 800143c:	2000003e 	.word	0x2000003e
 8001440:	20000045 	.word	0x20000045
 8001444:	42020400 	.word	0x42020400
 8001448:	42020800 	.word	0x42020800
 800144c:	42020000 	.word	0x42020000

08001450 <LCD_Flood>:

void LCD_Flood(uint16_t color, uint32_t len) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	80fb      	strh	r3, [r7, #6]
	uint8_t hi = color >> 8, lo = color;
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	73bb      	strb	r3, [r7, #14]

	LCD_Write16Register8(ILI9341_MEMORYWRITE, color);
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4619      	mov	r1, r3
 800146c:	202c      	movs	r0, #44	; 0x2c
 800146e:	f7ff fe93 	bl	8001198 <LCD_Write16Register8>
	len--;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3b01      	subs	r3, #1
 8001476:	603b      	str	r3, [r7, #0]
	if (hi == lo) {
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	429a      	cmp	r2, r3
 800147e:	d115      	bne.n	80014ac <LCD_Flood+0x5c>
		while (len--) {
 8001480:	e006      	b.n	8001490 <LCD_Flood+0x40>
			LCD_WR_ACTIVE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <LCD_Flood+0x70>)
 8001484:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001488:	619a      	str	r2, [r3, #24]

			LCD_WR_IDLE();
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <LCD_Flood+0x70>)
 800148c:	2204      	movs	r2, #4
 800148e:	619a      	str	r2, [r3, #24]
		while (len--) {
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	1e5a      	subs	r2, r3, #1
 8001494:	603a      	str	r2, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f3      	bne.n	8001482 <LCD_Flood+0x32>
			LCD_Write8(hi);
			LCD_Write8(lo);
		}
	}

}
 800149a:	e00c      	b.n	80014b6 <LCD_Flood+0x66>
			LCD_Write8(hi);
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdf8 	bl	8001094 <LCD_Write8>
			LCD_Write8(lo);
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fdf4 	bl	8001094 <LCD_Write8>
		while (len--) {
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	603a      	str	r2, [r7, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f2      	bne.n	800149c <LCD_Flood+0x4c>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	42020000 	.word	0x42020000

080014c4 <LCD_SetAddrWindow>:

void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4604      	mov	r4, r0
 80014cc:	4608      	mov	r0, r1
 80014ce:	4611      	mov	r1, r2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4623      	mov	r3, r4
 80014d4:	80fb      	strh	r3, [r7, #6]
 80014d6:	4603      	mov	r3, r0
 80014d8:	80bb      	strh	r3, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	807b      	strh	r3, [r7, #2]
 80014de:	4613      	mov	r3, r2
 80014e0:	803b      	strh	r3, [r7, #0]
	LCD_Write32Register8(ILI9341_COLADDRSET, (x1 << 16) | x2);
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	202a      	movs	r0, #42	; 0x2a
 80014ee:	f7ff fe79 	bl	80011e4 <LCD_Write32Register8>
	LCD_Write32Register8(ILI9341_PAGEADDRSET, (y1 << 16) | y2);
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	883b      	ldrh	r3, [r7, #0]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	202b      	movs	r0, #43	; 0x2b
 80014fe:	f7ff fe71 	bl	80011e4 <LCD_Write32Register8>
	TFT_24S_Write_Command(0x2C); // write to RAM
 8001502:	202c      	movs	r0, #44	; 0x2c
 8001504:	f7ff fe20 	bl	8001148 <TFT_24S_Write_Command>
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}

08001510 <LCD_FillScreen>:


void LCD_FillScreen(uint16_t color) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	LCD_SetAddrWindow(0, 0, 240 - 1, 320 - 1);
 800151a:	f240 133f 	movw	r3, #319	; 0x13f
 800151e:	22ef      	movs	r2, #239	; 0xef
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff ffce 	bl	80014c4 <LCD_SetAddrWindow>
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff8e 	bl	8001450 <LCD_Flood>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <LCD_DrawPixel>:
	LCD_CS_IDLE();
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
}


void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	460b      	mov	r3, r1
 8001548:	80bb      	strh	r3, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	807b      	strh	r3, [r7, #2]
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db32      	blt.n	80015bc <LCD_DrawPixel+0x80>
 8001556:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db2e      	blt.n	80015bc <LCD_DrawPixel+0x80>
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <LCD_DrawPixel+0x88>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001568:	429a      	cmp	r2, r3
 800156a:	da27      	bge.n	80015bc <LCD_DrawPixel+0x80>
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <LCD_DrawPixel+0x8c>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	da20      	bge.n	80015bc <LCD_DrawPixel+0x80>

	LCD_CS_ACTIVE();
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <LCD_DrawPixel+0x90>)
 800157c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001580:	619a      	str	r2, [r3, #24]
	LCD_SetAddrWindow(x, y, m_width - 1, m_height - 1);
 8001582:	88f8      	ldrh	r0, [r7, #6]
 8001584:	88b9      	ldrh	r1, [r7, #4]
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <LCD_DrawPixel+0x88>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b29b      	uxth	r3, r3
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <LCD_DrawPixel+0x8c>)
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	f7ff ff91 	bl	80014c4 <LCD_SetAddrWindow>
	LCD_CS_ACTIVE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <LCD_DrawPixel+0x90>)
 80015a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a8:	619a      	str	r2, [r3, #24]
	LCD_Write16Register8(ILI9341_MEMORYWRITE, color);
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	4619      	mov	r1, r3
 80015ae:	202c      	movs	r0, #44	; 0x2c
 80015b0:	f7ff fdf2 	bl	8001198 <LCD_Write16Register8>
	LCD_CS_IDLE();
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <LCD_DrawPixel+0x90>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	619a      	str	r2, [r3, #24]
 80015ba:	e000      	b.n	80015be <LCD_DrawPixel+0x82>
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 80015bc:	bf00      	nop
}
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000034 	.word	0x20000034
 80015c8:	20000036 	.word	0x20000036
 80015cc:	42020400 	.word	0x42020400

080015d0 <LCD_FillRect>:
	LCD_DrawFastHLine(x, y + h - 1, w, color);
	LCD_DrawFastVLine(x, y, h, color);
	LCD_DrawFastVLine(x + w - 1, y, h, color);
}

void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h, uint16_t color) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4604      	mov	r4, r0
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	80fb      	strh	r3, [r7, #6]
 80015e2:	4603      	mov	r3, r0
 80015e4:	80bb      	strh	r3, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	807b      	strh	r3, [r7, #2]
 80015ea:	4613      	mov	r3, r2
 80015ec:	803b      	strh	r3, [r7, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 80015ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f340 808b 	ble.w	800170e <LCD_FillRect+0x13e>
 80015f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f340 8086 	ble.w	800170e <LCD_FillRect+0x13e>
 8001602:	4b45      	ldr	r3, [pc, #276]	; (8001718 <LCD_FillRect+0x148>)
 8001604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001608:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800160c:	429a      	cmp	r2, r3
 800160e:	da7e      	bge.n	800170e <LCD_FillRect+0x13e>
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <LCD_FillRect+0x14c>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	da77      	bge.n	800170e <LCD_FillRect+0x13e>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	81fb      	strh	r3, [r7, #14]
 800162c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db6c      	blt.n	800170e <LCD_FillRect+0x13e>
 8001634:	88ba      	ldrh	r2, [r7, #4]
 8001636:	883b      	ldrh	r3, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	81bb      	strh	r3, [r7, #12]
 8001642:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db61      	blt.n	800170e <LCD_FillRect+0x13e>
		return;
	if (x < 0) { // Clip left
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	2b00      	cmp	r3, #0
 8001650:	da06      	bge.n	8001660 <LCD_FillRect+0x90>
		w += x;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	807b      	strh	r3, [r7, #2]
		x = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	80fb      	strh	r3, [r7, #6]
	}
	if (y1 < 0) { // Clip top
 8001660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	da06      	bge.n	8001676 <LCD_FillRect+0xa6>
		h += y1;
 8001668:	883a      	ldrh	r2, [r7, #0]
 800166a:	88bb      	ldrh	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	803b      	strh	r3, [r7, #0]
		y1 = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	80bb      	strh	r3, [r7, #4]
	}
	if (x2 >= m_width) { // Clip right
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <LCD_FillRect+0x148>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001680:	429a      	cmp	r2, r3
 8001682:	db0d      	blt.n	80016a0 <LCD_FillRect+0xd0>
		x2 = m_width - 1;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <LCD_FillRect+0x148>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	81fb      	strh	r3, [r7, #14]
		w = x2 - x + 1;
 8001692:	89fa      	ldrh	r2, [r7, #14]
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	b29b      	uxth	r3, r3
 800169a:	3301      	adds	r3, #1
 800169c:	b29b      	uxth	r3, r3
 800169e:	807b      	strh	r3, [r7, #2]
	}
	if (y2 >= m_height) { // Clip bottom
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <LCD_FillRect+0x14c>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	db0d      	blt.n	80016ca <LCD_FillRect+0xfa>
		y2 = m_height - 1;
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <LCD_FillRect+0x14c>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	81bb      	strh	r3, [r7, #12]
		h = y2 - y1 + 1;
 80016bc:	89ba      	ldrh	r2, [r7, #12]
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	803b      	strh	r3, [r7, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 80016ca:	88f8      	ldrh	r0, [r7, #6]
 80016cc:	88b9      	ldrh	r1, [r7, #4]
 80016ce:	89fa      	ldrh	r2, [r7, #14]
 80016d0:	89bb      	ldrh	r3, [r7, #12]
 80016d2:	f7ff fef7 	bl	80014c4 <LCD_SetAddrWindow>
	LCD_Flood(color, (uint32_t) w * (uint32_t) h);
 80016d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016de:	fb03 f202 	mul.w	r2, r3, r2
 80016e2:	8c3b      	ldrh	r3, [r7, #32]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff feb2 	bl	8001450 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <LCD_FillRect+0x148>)
 80016ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <LCD_FillRect+0x14c>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	2100      	movs	r1, #0
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fedc 	bl	80014c4 <LCD_SetAddrWindow>
 800170c:	e000      	b.n	8001710 <LCD_FillRect+0x140>
		return;
 800170e:	bf00      	nop
}
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	bf00      	nop
 8001718:	20000034 	.word	0x20000034
 800171c:	20000036 	.word	0x20000036

08001720 <LCD_DrawChar>:
void LCD_SetCursor(uint16_t x, uint16_t y) {
	m_cursor_x = x;
	m_cursor_y = y;
}

void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08d      	sub	sp, #52	; 0x34
 8001724:	af02      	add	r7, sp, #8
 8001726:	4604      	mov	r4, r0
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4623      	mov	r3, r4
 8001730:	80fb      	strh	r3, [r7, #6]
 8001732:	4603      	mov	r3, r0
 8001734:	80bb      	strh	r3, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	4613      	mov	r3, r2
 800173c:	803b      	strh	r3, [r7, #0]
	uint16_t height, width, bytes;
	uint8_t offset;
	uint32_t charindex = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
	uint8_t *pchar;
	uint32_t line = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24

	height = fonts[fontindex]->Height;
 8001746:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800174a:	4a85      	ldr	r2, [pc, #532]	; (8001960 <LCD_DrawChar+0x240>)
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	88db      	ldrh	r3, [r3, #6]
 8001752:	827b      	strh	r3, [r7, #18]
	width = fonts[fontindex]->Width;
 8001754:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001758:	4a81      	ldr	r2, [pc, #516]	; (8001960 <LCD_DrawChar+0x240>)
 800175a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175e:	889b      	ldrh	r3, [r3, #4]
 8001760:	823b      	strh	r3, [r7, #16]

	if ((x >= m_width) || // Clip right
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <LCD_DrawChar+0x244>)
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800176c:	429a      	cmp	r2, r3
 800176e:	f280 80f2 	bge.w	8001956 <LCD_DrawChar+0x236>
			(y >= m_height) || // Clip bottom
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <LCD_DrawChar+0x248>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
	if ((x >= m_width) || // Clip right
 8001778:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	f280 80ea 	bge.w	8001956 <LCD_DrawChar+0x236>
			((x + width - 1) < 0) || // Clip left
 8001782:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001786:	8a3b      	ldrh	r3, [r7, #16]
 8001788:	4413      	add	r3, r2
			(y >= m_height) || // Clip bottom
 800178a:	2b00      	cmp	r3, #0
 800178c:	f340 80e3 	ble.w	8001956 <LCD_DrawChar+0x236>
			((y + height - 1) < 0))   // Clip top
 8001790:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001794:	8a7b      	ldrh	r3, [r7, #18]
 8001796:	4413      	add	r3, r2
			((x + width - 1) < 0) || // Clip left
 8001798:	2b00      	cmp	r3, #0
 800179a:	f340 80dc 	ble.w	8001956 <LCD_DrawChar+0x236>
		return;

	bytes = (width + 7) / 8;
 800179e:	8a3b      	ldrh	r3, [r7, #16]
 80017a0:	3307      	adds	r3, #7
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da00      	bge.n	80017a8 <LCD_DrawChar+0x88>
 80017a6:	3307      	adds	r3, #7
 80017a8:	10db      	asrs	r3, r3, #3
 80017aa:	81fb      	strh	r3, [r7, #14]
	if (c < ' ') c = ' ';
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	2b1f      	cmp	r3, #31
 80017b0:	d802      	bhi.n	80017b8 <LCD_DrawChar+0x98>
 80017b2:	2320      	movs	r3, #32
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	e004      	b.n	80017c2 <LCD_DrawChar+0xa2>
#ifndef USE_CP1251
	else if (c > '~') c = ' ';
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b7e      	cmp	r3, #126	; 0x7e
 80017bc:	d901      	bls.n	80017c2 <LCD_DrawChar+0xa2>
 80017be:	2320      	movs	r3, #32
 80017c0:	70fb      	strb	r3, [r7, #3]
#endif
	charindex = (c - ' ') * height * bytes;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	3b20      	subs	r3, #32
 80017c6:	8a7a      	ldrh	r2, [r7, #18]
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	89fa      	ldrh	r2, [r7, #14]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
	offset = 8 * bytes - width;
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	8a3b      	ldrh	r3, [r7, #16]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	737b      	strb	r3, [r7, #13]

	for (uint32_t i = 0; i < height; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	e0af      	b.n	800194a <LCD_DrawChar+0x22a>
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 80017ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80017ee:	4a5c      	ldr	r2, [pc, #368]	; (8001960 <LCD_DrawChar+0x240>)
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	441a      	add	r2, r3
 80017fa:	8a3b      	ldrh	r3, [r7, #16]
 80017fc:	3307      	adds	r3, #7
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <LCD_DrawChar+0xe4>
 8001802:	3307      	adds	r3, #7
 8001804:	10db      	asrs	r3, r3, #3
 8001806:	4619      	mov	r1, r3
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
		switch (bytes) {
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d002      	beq.n	800181e <LCD_DrawChar+0xfe>
 8001818:	2b02      	cmp	r3, #2
 800181a:	d004      	beq.n	8001826 <LCD_DrawChar+0x106>
 800181c:	e00c      	b.n	8001838 <LCD_DrawChar+0x118>
		case 1:
			line = pchar[0];
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001824:	e016      	b.n	8001854 <LCD_DrawChar+0x134>
		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	3201      	adds	r2, #1
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001836:	e00d      	b.n	8001854 <LCD_DrawChar+0x134>
		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4313      	orrs	r3, r2
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	3202      	adds	r2, #2
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8001852:	bf00      	nop
		}
		if (m_scale) {
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <LCD_DrawChar+0x24c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03c      	beq.n	80018d6 <LCD_DrawChar+0x1b6>
			for (uint32_t j = 0; j < width * 2; j+=2) {
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	e02e      	b.n	80018c0 <LCD_DrawChar+0x1a0>
				if (line & (1 << (width - j / 2 + offset - 1))) {
 8001862:	8a3a      	ldrh	r2, [r7, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	7b7b      	ldrb	r3, [r7, #13]
 800186c:	4413      	add	r3, r2
 800186e:	3b01      	subs	r3, #1
 8001870:	2201      	movs	r2, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	461a      	mov	r2, r3
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00e      	beq.n	800189e <LCD_DrawChar+0x17e>
					LCD_FillRect(x + j, y, 2, 2, color);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	b29a      	uxth	r2, r3
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	b218      	sxth	r0, r3
 800188c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001890:	883b      	ldrh	r3, [r7, #0]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2302      	movs	r3, #2
 8001896:	2202      	movs	r2, #2
 8001898:	f7ff fe9a 	bl	80015d0 <LCD_FillRect>
 800189c:	e00d      	b.n	80018ba <LCD_DrawChar+0x19a>
				} else {
					LCD_FillRect(x + j, y, 2, 2, bg);
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4413      	add	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b218      	sxth	r0, r3
 80018aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80018ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2302      	movs	r3, #2
 80018b4:	2202      	movs	r2, #2
 80018b6:	f7ff fe8b 	bl	80015d0 <LCD_FillRect>
			for (uint32_t j = 0; j < width * 2; j+=2) {
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3302      	adds	r3, #2
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	461a      	mov	r2, r3
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d3ca      	bcc.n	8001862 <LCD_DrawChar+0x142>
				}
			}
			y+=2;
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	3302      	adds	r3, #2
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	80bb      	strh	r3, [r7, #4]
 80018d4:	e036      	b.n	8001944 <LCD_DrawChar+0x224>
		} else {
			for (uint32_t j = 0; j < width; j++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e029      	b.n	8001930 <LCD_DrawChar+0x210>
				if (line & (1 << (width - j + offset - 1))) {
 80018dc:	8a3a      	ldrh	r2, [r7, #16]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	4413      	add	r3, r2
 80018e6:	3b01      	subs	r3, #1
 80018e8:	2201      	movs	r2, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	461a      	mov	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00c      	beq.n	8001912 <LCD_DrawChar+0x1f2>
					LCD_DrawPixel((x + j), y, color);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	b21b      	sxth	r3, r3
 8001904:	883a      	ldrh	r2, [r7, #0]
 8001906:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fe16 	bl	800153c <LCD_DrawPixel>
 8001910:	e00b      	b.n	800192a <LCD_DrawChar+0x20a>
				} else {
					LCD_DrawPixel((x + j), y, bg);
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	b29a      	uxth	r2, r3
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4413      	add	r3, r2
 800191a:	b29b      	uxth	r3, r3
 800191c:	b21b      	sxth	r3, r3
 800191e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001920:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe09 	bl	800153c <LCD_DrawPixel>
			for (uint32_t j = 0; j < width; j++) {
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3301      	adds	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	8a3b      	ldrh	r3, [r7, #16]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3d1      	bcc.n	80018dc <LCD_DrawChar+0x1bc>
				}
			}
			y++;
 8001938:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800193c:	b29b      	uxth	r3, r3
 800193e:	3301      	adds	r3, #1
 8001940:	b29b      	uxth	r3, r3
 8001942:	80bb      	strh	r3, [r7, #4]
	for (uint32_t i = 0; i < height; i++) {
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	3301      	adds	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	8a7b      	ldrh	r3, [r7, #18]
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	429a      	cmp	r2, r3
 8001950:	f4ff af4b 	bcc.w	80017ea <LCD_DrawChar+0xca>
 8001954:	e000      	b.n	8001958 <LCD_DrawChar+0x238>
		return;
 8001956:	bf00      	nop
		}
	}
}
 8001958:	372c      	adds	r7, #44	; 0x2c
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	20000034 	.word	0x20000034
 8001968:	20000036 	.word	0x20000036
 800196c:	20000044 	.word	0x20000044

08001970 <LCD_Printf>:
// fmt for data to be printed
// width for data position in x axis
// height for data position in y axis

void LCD_Printf(const char *fmt,uint16_t width,uint16_t height,...)
{
 8001970:	b40c      	push	{r2, r3}
 8001972:	b5b0      	push	{r4, r5, r7, lr}
 8001974:	b088      	sub	sp, #32
 8001976:	af02      	add	r7, sp, #8
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
	volatile uint16_t h ,w ;
	h = height;
 800197e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001980:	827b      	strh	r3, [r7, #18]
	w = width;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	823b      	strh	r3, [r7, #16]
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	60fb      	str	r3, [r7, #12]
	vsnprintf(buf, sizeof(buf), fmt, lst);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001994:	4858      	ldr	r0, [pc, #352]	; (8001af8 <LCD_Printf+0x188>)
 8001996:	f002 f87b 	bl	8003a90 <vsnprintf_>
	va_end(lst);

//	volatile uint16_t height , width ;
	height = fonts[m_font]->Height;
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <LCD_Printf+0x18c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b57      	ldr	r3, [pc, #348]	; (8001b00 <LCD_Printf+0x190>)
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	88db      	ldrh	r3, [r3, #6]
 80019a8:	853b      	strh	r3, [r7, #40]	; 0x28
	width = fonts[m_font]->Width;
 80019aa:	4b54      	ldr	r3, [pc, #336]	; (8001afc <LCD_Printf+0x18c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <LCD_Printf+0x190>)
 80019b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b6:	889b      	ldrh	r3, [r3, #4]
 80019b8:	807b      	strh	r3, [r7, #2]
	if (m_scale) {
 80019ba:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <LCD_Printf+0x194>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <LCD_Printf+0x5e>
		height *= 2;
 80019c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	853b      	strh	r3, [r7, #40]	; 0x28
		width *= 2;
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	807b      	strh	r3, [r7, #2]
	}
	p = buf;
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <LCD_Printf+0x188>)
 80019d0:	617b      	str	r3, [r7, #20]
	while (*p) {
 80019d2:	e083      	b.n	8001adc <LCD_Printf+0x16c>
		if (*p == '\n') {
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b0a      	cmp	r3, #10
 80019da:	d10d      	bne.n	80019f8 <LCD_Printf+0x88>
			m_cursor_y += height;
 80019dc:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <LCD_Printf+0x198>)
 80019de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019e6:	4413      	add	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <LCD_Printf+0x198>)
 80019ee:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <LCD_Printf+0x19c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	e06e      	b.n	8001ad6 <LCD_Printf+0x166>
		} else if (*p == '\r') {
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b0d      	cmp	r3, #13
 80019fe:	d103      	bne.n	8001a08 <LCD_Printf+0x98>
			m_cursor_x = 0;
 8001a00:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <LCD_Printf+0x19c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	e066      	b.n	8001ad6 <LCD_Printf+0x166>
		} else if (*p == '\t') {
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d10c      	bne.n	8001a2a <LCD_Printf+0xba>
			m_cursor_x += width * 4;
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <LCD_Printf+0x19c>)
 8001a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <LCD_Printf+0x19c>)
 8001a26:	801a      	strh	r2, [r3, #0]
 8001a28:	e055      	b.n	8001ad6 <LCD_Printf+0x166>
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <LCD_Printf+0x198>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <LCD_Printf+0x1a0>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a3c:	1acb      	subs	r3, r1, r3
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	db02      	blt.n	8001a48 <LCD_Printf+0xd8>
				m_cursor_y = 0;
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <LCD_Printf+0x198>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	801a      	strh	r2, [r3, #0]
#ifdef WIPE_SCREEN
				LCD_FillScreen(m_textbgcolor);
#endif
			}
			LCD_DrawChar(m_cursor_x+w, m_cursor_y+h, *p, m_textcolor, m_textbgcolor, m_font);
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <LCD_Printf+0x19c>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	8a3b      	ldrh	r3, [r7, #16]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b218      	sxth	r0, r3
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <LCD_Printf+0x198>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	8a7b      	ldrh	r3, [r7, #18]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b219      	sxth	r1, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	781c      	ldrb	r4, [r3, #0]
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <LCD_Printf+0x1a4>)
 8001a72:	881d      	ldrh	r5, [r3, #0]
 8001a74:	4b28      	ldr	r3, [pc, #160]	; (8001b18 <LCD_Printf+0x1a8>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4a20      	ldr	r2, [pc, #128]	; (8001afc <LCD_Printf+0x18c>)
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	9201      	str	r2, [sp, #4]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	462b      	mov	r3, r5
 8001a82:	4622      	mov	r2, r4
 8001a84:	f7ff fe4c 	bl	8001720 <LCD_DrawChar>
			m_cursor_x += width;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <LCD_Printf+0x19c>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	4413      	add	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <LCD_Printf+0x19c>)
 8001a9a:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <LCD_Printf+0x1ac>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d018      	beq.n	8001ad6 <LCD_Printf+0x166>
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <LCD_Printf+0x19c>)
 8001aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <LCD_Printf+0x1b0>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	1acb      	subs	r3, r1, r3
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dd0c      	ble.n	8001ad6 <LCD_Printf+0x166>
				m_cursor_y += height;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <LCD_Printf+0x198>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <LCD_Printf+0x198>)
 8001ace:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <LCD_Printf+0x19c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
	while (*p) {
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f af77 	bne.w	80019d4 <LCD_Printf+0x64>
	}
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001af2:	b002      	add	sp, #8
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000048 	.word	0x20000048
 8001afc:	20000040 	.word	0x20000040
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000044 	.word	0x20000044
 8001b08:	2000003a 	.word	0x2000003a
 8001b0c:	20000038 	.word	0x20000038
 8001b10:	20000036 	.word	0x20000036
 8001b14:	2000003c 	.word	0x2000003c
 8001b18:	2000003e 	.word	0x2000003e
 8001b1c:	20000045 	.word	0x20000045
 8001b20:	20000034 	.word	0x20000034

08001b24 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001b2e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b32:	4909      	ldr	r1, [pc, #36]	; (8001b58 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001b3e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b48:	68fb      	ldr	r3, [r7, #12]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	46020c00 	.word	0x46020c00

08001b5c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <LL_APB1_GRP2_EnableClock+0x34>)
 8001b66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001b6a:	4909      	ldr	r1, [pc, #36]	; (8001b90 <LL_APB1_GRP2_EnableClock+0x34>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <LL_APB1_GRP2_EnableClock+0x34>)
 8001b76:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	46020c00 	.word	0x46020c00

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b98:	f002 f9c4 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9c:	f000 f836 	bl	8001c0c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001ba0:	f000 f891 	bl	8001cc6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba4:	f000 f9e4 	bl	8001f70 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ba8:	f000 f89c 	bl	8001ce4 <MX_ADC1_Init>
  MX_UCPD1_Init();
 8001bac:	f000 f932 	bl	8001e14 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8001bb0:	f000 f966 	bl	8001e80 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001bb4:	f000 f9b0 	bl	8001f18 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001bb8:	f000 f8d8 	bl	8001d6c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <main+0x70>)
 8001bc2:	f003 f915 	bl	8004df0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001bc6:	2064      	movs	r0, #100	; 0x64
 8001bc8:	f002 fa30 	bl	800402c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2102      	movs	r1, #2
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <main+0x70>)
 8001bd2:	f003 f90d 	bl	8004df0 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 8001bd6:	2064      	movs	r0, #100	; 0x64
 8001bd8:	f002 fa28 	bl	800402c <HAL_Delay>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2102      	movs	r1, #2
 8001be0:	4808      	ldr	r0, [pc, #32]	; (8001c04 <main+0x70>)
 8001be2:	f003 f905 	bl	8004df0 <HAL_GPIO_WritePin>
   HAL_Delay(100);
 8001be6:	2064      	movs	r0, #100	; 0x64
 8001be8:	f002 fa20 	bl	800402c <HAL_Delay>

     LCD_init();
 8001bec:	f7ff fb28 	bl	8001240 <LCD_init>
    LCD_FillScreen(CYAN);
 8001bf0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001bf4:	f7ff fc8c 	bl	8001510 <LCD_FillScreen>
//    LCD_DrawLine(10, 10, 120, 120, RED);
//    LCD_DrawRect(50, 50, 1000, 1500, BLACK);
//    LCD_FillRect(50, 50, 100, 100, BLACK);
//    LCD_DrawCircle(120, 120, 50, YELLOW);
    //LCD_SetTextColor(GREEN, BLACK);
    LCD_Printf("STM32U575",60,120);
 8001bf8:	2278      	movs	r2, #120	; 0x78
 8001bfa:	213c      	movs	r1, #60	; 0x3c
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <main+0x74>)
 8001bfe:	f7ff feb7 	bl	8001970 <LCD_Printf>
//    uint16_t next_try_timer = 0;
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8001c02:	e7fe      	b.n	8001c02 <main+0x6e>
 8001c04:	42020800 	.word	0x42020800
 8001c08:	0800bf68 	.word	0x0800bf68

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09e      	sub	sp, #120	; 0x78
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0318 	add.w	r3, r7, #24
 8001c16:	2260      	movs	r2, #96	; 0x60
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00a f990 	bl	800bf40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c30:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001c34:	f004 f976 	bl	8005f24 <HAL_PWREx_ControlVoltageScaling>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001c3e:	f000 fae1 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c42:	2322      	movs	r3, #34	; 0x22
 8001c44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c52:	2310      	movs	r3, #16
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c56:	2302      	movs	r3, #2
 8001c58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001c66:	2309      	movs	r3, #9
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001c76:	230c      	movs	r3, #12
 8001c78:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 fa40 	bl	8006108 <HAL_RCC_OscConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001c8e:	f000 fab9 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	231f      	movs	r3, #31
 8001c94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2303      	movs	r3, #3
 8001c98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 f900 	bl	8006eb4 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001cba:	f000 faa3 	bl	8002204 <Error_Handler>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3778      	adds	r7, #120	; 0x78
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001cca:	f004 fa0d 	bl	80060e8 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f004 f9aa 	bl	8006028 <HAL_PWREx_ConfigSupply>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001cda:	f000 fa93 	bl	8002204 <Error_Handler>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <MX_ADC1_Init+0x84>)
 8001cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <MX_ADC1_Init+0x80>)
 8001d52:	f002 fa6b 	bl	800422c <HAL_ADC_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001d5c:	f000 fa52 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000148 	.word	0x20000148
 8001d68:	42028000 	.word	0x42028000

08001d6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <MX_TIM1_Init+0xa4>)
 8001d8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001d92:	2247      	movs	r2, #71	; 0x47
 8001d94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001d9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001db6:	4815      	ldr	r0, [pc, #84]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001db8:	f008 f89c 	bl	8009ef4 <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001dc2:	f000 fa1f 	bl	8002204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480e      	ldr	r0, [pc, #56]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001dd4:	f008 f8e6 	bl	8009fa4 <HAL_TIM_ConfigClockSource>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001dde:	f000 fa11 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_TIM1_Init+0xa0>)
 8001df4:	f008 fb6e 	bl	800a4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dfe:	f000 fa01 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200001d4 	.word	0x200001d4
 8001e10:	40012c00 	.word	0x40012c00

08001e14 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001e2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e2e:	f7ff fe95 	bl	8001b5c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7ff fe76 	bl	8001b24 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fe73 	bl	8001b24 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001e44:	2303      	movs	r3, #3
 8001e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4809      	ldr	r0, [pc, #36]	; (8001e78 <MX_UCPD1_Init+0x64>)
 8001e52:	f009 f9f6 	bl	800b242 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_UCPD1_Init+0x68>)
 8001e6a:	f009 f9ea 	bl	800b242 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	42020400 	.word	0x42020400
 8001e7c:	42020000 	.word	0x42020000

08001e80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001e86:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <MX_USART1_UART_Init+0x94>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ec8:	4811      	ldr	r0, [pc, #68]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001eca:	f008 fbc5 	bl	800a658 <HAL_UART_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ed4:	f000 f996 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001edc:	f008 ff9c 	bl	800ae18 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ee6:	f000 f98d 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eea:	2100      	movs	r1, #0
 8001eec:	4808      	ldr	r0, [pc, #32]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001eee:	f008 ffd1 	bl	800ae94 <HAL_UARTEx_SetRxFifoThreshold>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ef8:	f000 f984 	bl	8002204 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_USART1_UART_Init+0x90>)
 8001efe:	f008 ff52 	bl	800ada6 <HAL_UARTEx_DisableFifoMode>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f08:	f000 f97c 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000220 	.word	0x20000220
 8001f14:	40013800 	.word	0x40013800

08001f18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f24:	2206      	movs	r2, #6
 8001f26:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001f54:	f002 ff64 	bl	8004e20 <HAL_PCD_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001f5e:	f000 f951 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002b0 	.word	0x200002b0
 8001f6c:	42040000 	.word	0x42040000

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b97      	ldr	r3, [pc, #604]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f8c:	4a95      	ldr	r2, [pc, #596]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f96:	4b93      	ldr	r3, [pc, #588]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001faa:	4a8e      	ldr	r2, [pc, #568]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fb4:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc8:	4a86      	ldr	r2, [pc, #536]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fd2:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe0:	4b80      	ldr	r3, [pc, #512]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe6:	4a7f      	ldr	r2, [pc, #508]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ff0:	4b7c      	ldr	r3, [pc, #496]	; (80021e4 <MX_GPIO_Init+0x274>)
 8001ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ffe:	4b79      	ldr	r3, [pc, #484]	; (80021e4 <MX_GPIO_Init+0x274>)
 8002000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <MX_GPIO_Init+0x274>)
 8002006:	f043 0320 	orr.w	r3, r3, #32
 800200a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <MX_GPIO_Init+0x274>)
 8002010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800201c:	4b71      	ldr	r3, [pc, #452]	; (80021e4 <MX_GPIO_Init+0x274>)
 800201e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002022:	4a70      	ldr	r2, [pc, #448]	; (80021e4 <MX_GPIO_Init+0x274>)
 8002024:	f043 0310 	orr.w	r3, r3, #16
 8002028:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800202c:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <MX_GPIO_Init+0x274>)
 800202e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <MX_GPIO_Init+0x274>)
 800203c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002040:	4a68      	ldr	r2, [pc, #416]	; (80021e4 <MX_GPIO_Init+0x274>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800204a:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <MX_GPIO_Init+0x274>)
 800204c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002058:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <MX_GPIO_Init+0x274>)
 800205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205e:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <MX_GPIO_Init+0x274>)
 8002060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002064:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002068:	4b5e      	ldr	r3, [pc, #376]	; (80021e4 <MX_GPIO_Init+0x274>)
 800206a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	218b      	movs	r1, #139	; 0x8b
 800207a:	485b      	ldr	r0, [pc, #364]	; (80021e8 <MX_GPIO_Init+0x278>)
 800207c:	f002 feb8 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	2104      	movs	r1, #4
 8002084:	4859      	ldr	r0, [pc, #356]	; (80021ec <MX_GPIO_Init+0x27c>)
 8002086:	f002 feb3 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2101      	movs	r1, #1
 800208e:	4858      	ldr	r0, [pc, #352]	; (80021f0 <MX_GPIO_Init+0x280>)
 8002090:	f002 feae 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800209a:	4856      	ldr	r0, [pc, #344]	; (80021f4 <MX_GPIO_Init+0x284>)
 800209c:	f002 fea8 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 80020a6:	4854      	ldr	r0, [pc, #336]	; (80021f8 <MX_GPIO_Init+0x288>)
 80020a8:	f002 fea2 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b2:	4852      	ldr	r0, [pc, #328]	; (80021fc <MX_GPIO_Init+0x28c>)
 80020b4:	f002 fe9c 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2104      	movs	r1, #4
 80020bc:	4850      	ldr	r0, [pc, #320]	; (8002200 <MX_GPIO_Init+0x290>)
 80020be:	f002 fe97 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80020c2:	230b      	movs	r3, #11
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4843      	ldr	r0, [pc, #268]	; (80021e8 <MX_GPIO_Init+0x278>)
 80020da:	f002 fcb1 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020de:	2304      	movs	r3, #4
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	483d      	ldr	r0, [pc, #244]	; (80021ec <MX_GPIO_Init+0x27c>)
 80020f6:	f002 fca3 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020fa:	2308      	movs	r3, #8
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	4837      	ldr	r0, [pc, #220]	; (80021ec <MX_GPIO_Init+0x27c>)
 800210e:	f002 fc97 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002112:	2301      	movs	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	2301      	movs	r3, #1
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002126:	4619      	mov	r1, r3
 8002128:	4831      	ldr	r0, [pc, #196]	; (80021f0 <MX_GPIO_Init+0x280>)
 800212a:	f002 fc89 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800212e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	482b      	ldr	r0, [pc, #172]	; (80021f4 <MX_GPIO_Init+0x284>)
 8002148:	f002 fc7a 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800214c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	4619      	mov	r1, r3
 8002164:	4824      	ldr	r0, [pc, #144]	; (80021f8 <MX_GPIO_Init+0x288>)
 8002166:	f002 fc6b 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800216a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	481c      	ldr	r0, [pc, #112]	; (80021f0 <MX_GPIO_Init+0x280>)
 8002180:	f002 fc5e 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219a:	4619      	mov	r1, r3
 800219c:	4817      	ldr	r0, [pc, #92]	; (80021fc <MX_GPIO_Init+0x28c>)
 800219e:	f002 fc4f 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80021a2:	2304      	movs	r3, #4
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ae:	2302      	movs	r3, #2
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b6:	4619      	mov	r1, r3
 80021b8:	4811      	ldr	r0, [pc, #68]	; (8002200 <MX_GPIO_Init+0x290>)
 80021ba:	f002 fc41 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ca:	2302      	movs	r3, #2
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_GPIO_Init+0x278>)
 80021d6:	f002 fc33 	bl	8004a40 <HAL_GPIO_Init>

}
 80021da:	bf00      	nop
 80021dc:	3738      	adds	r7, #56	; 0x38
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	46020c00 	.word	0x46020c00
 80021e8:	42020800 	.word	0x42020800
 80021ec:	42020000 	.word	0x42020000
 80021f0:	42020400 	.word	0x42020400
 80021f4:	42021400 	.word	0x42021400
 80021f8:	42021000 	.word	0x42021000
 80021fc:	42020c00 	.word	0x42020c00
 8002200:	42021800 	.word	0x42021800

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220c:	e7fe      	b.n	800220c <Error_Handler+0x8>

0800220e <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d204      	bcs.n	8002230 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	701a      	strb	r2, [r3, #0]
  }
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e002      	b.n	800226e <_strnlen_s+0x16>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <_strnlen_s+0x28>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	603a      	str	r2, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f3      	bne.n	8002268 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1ad3      	subs	r3, r2, r3
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b2f      	cmp	r3, #47	; 0x2f
 80022a0:	d904      	bls.n	80022ac <_is_digit+0x1a>
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2b39      	cmp	r3, #57	; 0x39
 80022a6:	d801      	bhi.n	80022ac <_is_digit+0x1a>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <_is_digit+0x1c>
 80022ac:	2300      	movs	r3, #0
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80022cc:	e00e      	b.n	80022ec <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1c59      	adds	r1, r3, #1
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6011      	str	r1, [r2, #0]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	4403      	add	r3, r0
 80022e8:	3b30      	subs	r3, #48	; 0x30
 80022ea:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ffcd 	bl	8002292 <_is_digit>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e7      	bne.n	80022ce <_atoi+0xe>
  }
  return i;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d125      	bne.n	8002370 <_out_rev+0x68>
 8002324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d120      	bne.n	8002370 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e00a      	b.n	800234a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	1c53      	adds	r3, r2, #1
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	68fc      	ldr	r4, [r7, #12]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	2020      	movs	r0, #32
 8002342:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	429a      	cmp	r2, r3
 8002350:	d3f0      	bcc.n	8002334 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002352:	e00d      	b.n	8002370 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	3b01      	subs	r3, #1
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	4413      	add	r3, r2
 8002360:	7818      	ldrb	r0, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	1c53      	adds	r3, r2, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	68fc      	ldr	r4, [r7, #12]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	47a0      	blx	r4
  while (len) {
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ee      	bne.n	8002354 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002380:	e007      	b.n	8002392 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	1c53      	adds	r3, r2, #1
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	68fc      	ldr	r4, [r7, #12]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	2020      	movs	r0, #32
 8002390:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239a:	429a      	cmp	r2, r3
 800239c:	d8f1      	bhi.n	8002382 <_out_rev+0x7a>
    }
  }

  return idx;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}

080023a8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af04      	add	r7, sp, #16
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d136      	bne.n	800242e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d018      	beq.n	80023f8 <_ntoa_format+0x50>
 80023c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <_ntoa_format+0x50>
 80023d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <_ntoa_format+0x3a>
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <_ntoa_format+0x50>
      width--;
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	3b01      	subs	r3, #1
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023e8:	e006      	b.n	80023f8 <_ntoa_format+0x50>
      buf[len++] = '0';
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	61fa      	str	r2, [r7, #28]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4413      	add	r3, r2
 80023f4:	2230      	movs	r2, #48	; 0x30
 80023f6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d20a      	bcs.n	8002416 <_ntoa_format+0x6e>
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b1f      	cmp	r3, #31
 8002404:	d9f1      	bls.n	80023ea <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002406:	e006      	b.n	8002416 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	61fa      	str	r2, [r7, #28]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4413      	add	r3, r2
 8002412:	2230      	movs	r2, #48	; 0x30
 8002414:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <_ntoa_format+0x86>
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	429a      	cmp	r2, r3
 8002426:	d202      	bcs.n	800242e <_ntoa_format+0x86>
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b1f      	cmp	r3, #31
 800242c:	d9ec      	bls.n	8002408 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d058      	beq.n	80024ea <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <_ntoa_format+0xc8>
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <_ntoa_format+0xc8>
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244c:	429a      	cmp	r2, r3
 800244e:	d003      	beq.n	8002458 <_ntoa_format+0xb0>
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	429a      	cmp	r2, r3
 8002456:	d10b      	bne.n	8002470 <_ntoa_format+0xc8>
      len--;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	3b01      	subs	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <_ntoa_format+0xc8>
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2b10      	cmp	r3, #16
 8002468:	d102      	bne.n	8002470 <_ntoa_format+0xc8>
        len--;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b01      	subs	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	2b10      	cmp	r3, #16
 8002474:	d10f      	bne.n	8002496 <_ntoa_format+0xee>
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <_ntoa_format+0xee>
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b1f      	cmp	r3, #31
 8002484:	d807      	bhi.n	8002496 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	61fa      	str	r2, [r7, #28]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	2278      	movs	r2, #120	; 0x78
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e01f      	b.n	80024d6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	2b10      	cmp	r3, #16
 800249a:	d10f      	bne.n	80024bc <_ntoa_format+0x114>
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <_ntoa_format+0x114>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b1f      	cmp	r3, #31
 80024aa:	d807      	bhi.n	80024bc <_ntoa_format+0x114>
      buf[len++] = 'X';
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	61fa      	str	r2, [r7, #28]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4413      	add	r3, r2
 80024b6:	2258      	movs	r2, #88	; 0x58
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e00c      	b.n	80024d6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d109      	bne.n	80024d6 <_ntoa_format+0x12e>
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	d806      	bhi.n	80024d6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	61fa      	str	r2, [r7, #28]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4413      	add	r3, r2
 80024d2:	2262      	movs	r2, #98	; 0x62
 80024d4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2b1f      	cmp	r3, #31
 80024da:	d806      	bhi.n	80024ea <_ntoa_format+0x142>
      buf[len++] = '0';
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	61fa      	str	r2, [r7, #28]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	2230      	movs	r2, #48	; 0x30
 80024e8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b1f      	cmp	r3, #31
 80024ee:	d824      	bhi.n	800253a <_ntoa_format+0x192>
    if (negative) {
 80024f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <_ntoa_format+0x160>
      buf[len++] = '-';
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	61fa      	str	r2, [r7, #28]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	222d      	movs	r2, #45	; 0x2d
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e018      	b.n	800253a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	61fa      	str	r2, [r7, #28]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	222b      	movs	r2, #43	; 0x2b
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e00b      	b.n	800253a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	61fa      	str	r2, [r7, #28]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	2220      	movs	r2, #32
 8002538:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fed9 	bl	8002308 <_out_rev>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b096      	sub	sp, #88	; 0x58
 8002564:	af08      	add	r7, sp, #32
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <_ntoa_long+0x30>
 800258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d032      	beq.n	80025f6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002594:	fbb3 f2f2 	udiv	r2, r3, r2
 8002598:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800259a:	fb01 f202 	mul.w	r2, r1, r2
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80025a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	d804      	bhi.n	80025b6 <_ntoa_long+0x56>
 80025ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025b0:	3330      	adds	r3, #48	; 0x30
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	e00d      	b.n	80025d2 <_ntoa_long+0x72>
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <_ntoa_long+0x64>
 80025c0:	2241      	movs	r2, #65	; 0x41
 80025c2:	e000      	b.n	80025c6 <_ntoa_long+0x66>
 80025c4:	2261      	movs	r2, #97	; 0x61
 80025c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025ca:	4413      	add	r3, r2
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3b0a      	subs	r3, #10
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d4:	1c59      	adds	r1, r3, #1
 80025d6:	6379      	str	r1, [r7, #52]	; 0x34
 80025d8:	3338      	adds	r3, #56	; 0x38
 80025da:	443b      	add	r3, r7
 80025dc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80025e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80025ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <_ntoa_long+0x96>
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	2b1f      	cmp	r3, #31
 80025f4:	d9cc      	bls.n	8002590 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	9306      	str	r3, [sp, #24]
 80025fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fc:	9305      	str	r3, [sp, #20]
 80025fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002600:	9304      	str	r3, [sp, #16]
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	9303      	str	r3, [sp, #12]
 8002606:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff fec3 	bl	80023a8 <_ntoa_format>
 8002622:	4603      	mov	r3, r0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3738      	adds	r7, #56	; 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b096      	sub	sp, #88	; 0x58
 8002630:	af08      	add	r7, sp, #32
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800263e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002642:	4313      	orrs	r3, r2
 8002644:	d103      	bne.n	800264e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002648:	f023 0310 	bic.w	r3, r3, #16
 800264c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800264e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <_ntoa_long_long+0x34>
 8002658:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800265c:	4313      	orrs	r3, r2
 800265e:	d037      	beq.n	80026d0 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8002660:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002668:	f7fe faa4 	bl	8000bb4 <__aeabi_uldivmod>
 800266c:	4613      	mov	r3, r2
 800266e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002672:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002676:	2b09      	cmp	r3, #9
 8002678:	d804      	bhi.n	8002684 <_ntoa_long_long+0x58>
 800267a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800267e:	3330      	adds	r3, #48	; 0x30
 8002680:	b2da      	uxtb	r2, r3
 8002682:	e00d      	b.n	80026a0 <_ntoa_long_long+0x74>
 8002684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <_ntoa_long_long+0x66>
 800268e:	2241      	movs	r2, #65	; 0x41
 8002690:	e000      	b.n	8002694 <_ntoa_long_long+0x68>
 8002692:	2261      	movs	r2, #97	; 0x61
 8002694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002698:	4413      	add	r3, r2
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3b0a      	subs	r3, #10
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	6379      	str	r1, [r7, #52]	; 0x34
 80026a6:	3338      	adds	r3, #56	; 0x38
 80026a8:	443b      	add	r3, r7
 80026aa:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80026ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026b6:	f7fe fa7d 	bl	8000bb4 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80026c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026c6:	4313      	orrs	r3, r2
 80026c8:	d002      	beq.n	80026d0 <_ntoa_long_long+0xa4>
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	2b1f      	cmp	r3, #31
 80026ce:	d9c7      	bls.n	8002660 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80026d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026d4:	9206      	str	r2, [sp, #24]
 80026d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026d8:	9205      	str	r2, [sp, #20]
 80026da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026dc:	9204      	str	r2, [sp, #16]
 80026de:	9303      	str	r3, [sp, #12]
 80026e0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80026e4:	9302      	str	r3, [sp, #8]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff fe56 	bl	80023a8 <_ntoa_format>
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3738      	adds	r7, #56	; 0x38
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b09d      	sub	sp, #116	; 0x74
 800270c:	af04      	add	r7, sp, #16
 800270e:	6178      	str	r0, [r7, #20]
 8002710:	6139      	str	r1, [r7, #16]
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800272a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800272e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002732:	f7fe f9c5 	bl	8000ac0 <__aeabi_dcmpeq>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10f      	bne.n	800275c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800273c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800273e:	9303      	str	r3, [sp, #12]
 8002740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002742:	9302      	str	r3, [sp, #8]
 8002744:	2303      	movs	r3, #3
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	4ba7      	ldr	r3, [pc, #668]	; (80029e8 <_ftoa+0x2e0>)
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6939      	ldr	r1, [r7, #16]
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff fdd8 	bl	8002308 <_out_rev>
 8002758:	4603      	mov	r3, r0
 800275a:	e222      	b.n	8002ba2 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002768:	f7fe f9b4 	bl	8000ad4 <__aeabi_dcmplt>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00f      	beq.n	8002792 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002774:	9303      	str	r3, [sp, #12]
 8002776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2304      	movs	r3, #4
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	4b9b      	ldr	r3, [pc, #620]	; (80029ec <_ftoa+0x2e4>)
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6939      	ldr	r1, [r7, #16]
 8002788:	6978      	ldr	r0, [r7, #20]
 800278a:	f7ff fdbd 	bl	8002308 <_out_rev>
 800278e:	4603      	mov	r3, r0
 8002790:	e207      	b.n	8002ba2 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002792:	f04f 32ff 	mov.w	r2, #4294967295
 8002796:	4b96      	ldr	r3, [pc, #600]	; (80029f0 <_ftoa+0x2e8>)
 8002798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800279c:	f7fe f9b8 	bl	8000b10 <__aeabi_dcmpgt>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01d      	beq.n	80027e2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80027a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <_ftoa+0xac>
 80027b0:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <_ftoa+0x2ec>)
 80027b2:	e000      	b.n	80027b6 <_ftoa+0xae>
 80027b4:	4b90      	ldr	r3, [pc, #576]	; (80029f8 <_ftoa+0x2f0>)
 80027b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027b8:	f002 0204 	and.w	r2, r2, #4
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d001      	beq.n	80027c4 <_ftoa+0xbc>
 80027c0:	2204      	movs	r2, #4
 80027c2:	e000      	b.n	80027c6 <_ftoa+0xbe>
 80027c4:	2203      	movs	r2, #3
 80027c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80027c8:	9103      	str	r1, [sp, #12]
 80027ca:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80027cc:	9102      	str	r1, [sp, #8]
 80027ce:	9201      	str	r2, [sp, #4]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	6939      	ldr	r1, [r7, #16]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7ff fd95 	bl	8002308 <_out_rev>
 80027de:	4603      	mov	r3, r0
 80027e0:	e1df      	b.n	8002ba2 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80027e2:	a37d      	add	r3, pc, #500	; (adr r3, 80029d8 <_ftoa+0x2d0>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027ec:	f7fe f990 	bl	8000b10 <__aeabi_dcmpgt>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <_ftoa+0x102>
 80027f6:	a37a      	add	r3, pc, #488	; (adr r3, 80029e0 <_ftoa+0x2d8>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002800:	f7fe f968 	bl	8000ad4 <__aeabi_dcmplt>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00f      	beq.n	800282a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800280a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	ed97 0b00 	vldr	d0, [r7]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	6939      	ldr	r1, [r7, #16]
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f000 f9c9 	bl	8002bb8 <_etoa>
 8002826:	4603      	mov	r3, r0
 8002828:	e1bb      	b.n	8002ba2 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800283c:	f7fe f94a 	bl	8000ad4 <__aeabi_dcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <_ftoa+0x15c>
    negative = true;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800284c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	f7fd fd12 	bl	8000280 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800286e:	2306      	movs	r3, #6
 8002870:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002872:	e00a      	b.n	800288a <_ftoa+0x182>
    buf[len++] = '0';
 8002874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	65fa      	str	r2, [r7, #92]	; 0x5c
 800287a:	3360      	adds	r3, #96	; 0x60
 800287c:	443b      	add	r3, r7
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002886:	3b01      	subs	r3, #1
 8002888:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	2b1f      	cmp	r3, #31
 800288e:	d802      	bhi.n	8002896 <_ftoa+0x18e>
 8002890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002892:	2b09      	cmp	r3, #9
 8002894:	d8ee      	bhi.n	8002874 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002896:	e9d7 0100 	ldrd	r0, r1, [r7]
 800289a:	f7fe f943 	bl	8000b24 <__aeabi_d2iz>
 800289e:	4603      	mov	r3, r0
 80028a0:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 80028a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028a4:	f7fd fe3a 	bl	800051c <__aeabi_i2d>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028b0:	f7fd fce6 	bl	8000280 <__aeabi_dsub>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <_ftoa+0x2f4>)
 80028be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fe92 	bl	80005f0 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 80028d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028d8:	f7fe f94c 	bl	8000b74 <__aeabi_d2uiz>
 80028dc:	4603      	mov	r3, r0
 80028de:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 80028e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80028e2:	f7fd fe0b 	bl	80004fc <__aeabi_ui2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80028ee:	f7fd fcc7 	bl	8000280 <__aeabi_dsub>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <_ftoa+0x2f8>)
 8002900:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002904:	f7fe f904 	bl	8000b10 <__aeabi_dcmpgt>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <_ftoa+0x234>
    ++frac;
 800290e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002910:	3301      	adds	r3, #1
 8002912:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002914:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002916:	f7fd fdf1 	bl	80004fc <__aeabi_ui2d>
 800291a:	4a38      	ldr	r2, [pc, #224]	; (80029fc <_ftoa+0x2f4>)
 800291c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fe f8e9 	bl	8000afc <__aeabi_dcmpge>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01a      	beq.n	8002966 <_ftoa+0x25e>
      frac = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	3301      	adds	r3, #1
 8002938:	657b      	str	r3, [r7, #84]	; 0x54
 800293a:	e014      	b.n	8002966 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <_ftoa+0x2f8>)
 8002942:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002946:	f7fe f8c5 	bl	8000ad4 <__aeabi_dcmplt>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <_ftoa+0x258>
 8002956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002962:	3301      	adds	r3, #1
 8002964:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002968:	2b00      	cmp	r3, #0
 800296a:	d14b      	bne.n	8002a04 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800296c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800296e:	f7fd fdd5 	bl	800051c <__aeabi_i2d>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800297a:	f7fd fc81 	bl	8000280 <__aeabi_dsub>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002986:	2301      	movs	r3, #1
 8002988:	461c      	mov	r4, r3
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <_ftoa+0x2f8>)
 8002990:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002994:	f7fe f89e 	bl	8000ad4 <__aeabi_dcmplt>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <_ftoa+0x29a>
 800299e:	2300      	movs	r3, #0
 80029a0:	461c      	mov	r4, r3
 80029a2:	b2e3      	uxtb	r3, r4
 80029a4:	f083 0301 	eor.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <_ftoa+0x2ba>
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <_ftoa+0x2f8>)
 80029b4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80029b8:	f7fe f8aa 	bl	8000b10 <__aeabi_dcmpgt>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d064      	beq.n	8002a8c <_ftoa+0x384>
 80029c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8081 	beq.w	8002ad0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	3301      	adds	r3, #1
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
 80029d4:	e07c      	b.n	8002ad0 <_ftoa+0x3c8>
 80029d6:	bf00      	nop
 80029d8:	00000000 	.word	0x00000000
 80029dc:	41cdcd65 	.word	0x41cdcd65
 80029e0:	00000000 	.word	0x00000000
 80029e4:	c1cdcd65 	.word	0xc1cdcd65
 80029e8:	0800bf74 	.word	0x0800bf74
 80029ec:	0800bf78 	.word	0x0800bf78
 80029f0:	7fefffff 	.word	0x7fefffff
 80029f4:	0800bf80 	.word	0x0800bf80
 80029f8:	0800bf88 	.word	0x0800bf88
 80029fc:	0800db90 	.word	0x0800db90
 8002a00:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8002a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a08:	e01f      	b.n	8002a4a <_ftoa+0x342>
      --count;
 8002a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002a10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a12:	4b66      	ldr	r3, [pc, #408]	; (8002bac <_ftoa+0x4a4>)
 8002a14:	fba3 2301 	umull	r2, r3, r3, r1
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	1aca      	subs	r2, r1, r3
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a28:	1c59      	adds	r1, r3, #1
 8002a2a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002a2c:	3230      	adds	r2, #48	; 0x30
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	443b      	add	r3, r7
 8002a34:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3a:	4a5c      	ldr	r2, [pc, #368]	; (8002bac <_ftoa+0x4a4>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	653b      	str	r3, [r7, #80]	; 0x50
 8002a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4c:	2b1f      	cmp	r3, #31
 8002a4e:	d9dc      	bls.n	8002a0a <_ftoa+0x302>
 8002a50:	e009      	b.n	8002a66 <_ftoa+0x35e>
        break;
 8002a52:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a54:	e007      	b.n	8002a66 <_ftoa+0x35e>
      buf[len++] = '0';
 8002a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a5c:	3360      	adds	r3, #96	; 0x60
 8002a5e:	443b      	add	r3, r7
 8002a60:	2230      	movs	r2, #48	; 0x30
 8002a62:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a68:	2b1f      	cmp	r3, #31
 8002a6a:	d804      	bhi.n	8002a76 <_ftoa+0x36e>
 8002a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ef      	bne.n	8002a56 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	2b1f      	cmp	r3, #31
 8002a7a:	d829      	bhi.n	8002ad0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a82:	3360      	adds	r3, #96	; 0x60
 8002a84:	443b      	add	r3, r7
 8002a86:	222e      	movs	r2, #46	; 0x2e
 8002a88:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002a8c:	e020      	b.n	8002ad0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002a8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a90:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <_ftoa+0x4a8>)
 8002a92:	fb83 1302 	smull	r1, r3, r3, r2
 8002a96:	1099      	asrs	r1, r3, #2
 8002a98:	17d3      	asrs	r3, r2, #31
 8002a9a:	1ac9      	subs	r1, r1, r3
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	1ad1      	subs	r1, r2, r3
 8002aa6:	b2ca      	uxtb	r2, r1
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aaa:	1c59      	adds	r1, r3, #1
 8002aac:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002aae:	3230      	adds	r2, #48	; 0x30
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	3360      	adds	r3, #96	; 0x60
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abc:	4a3c      	ldr	r2, [pc, #240]	; (8002bb0 <_ftoa+0x4a8>)
 8002abe:	fb82 1203 	smull	r1, r2, r2, r3
 8002ac2:	1092      	asrs	r2, r2, #2
 8002ac4:	17db      	asrs	r3, r3, #31
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	657b      	str	r3, [r7, #84]	; 0x54
 8002aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad2:	2b1f      	cmp	r3, #31
 8002ad4:	d9db      	bls.n	8002a8e <_ftoa+0x386>
 8002ad6:	e000      	b.n	8002ada <_ftoa+0x3d2>
      break;
 8002ad8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d123      	bne.n	8002b2c <_ftoa+0x424>
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01e      	beq.n	8002b2c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d014      	beq.n	8002b1e <_ftoa+0x416>
 8002af4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <_ftoa+0x3fe>
 8002afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <_ftoa+0x416>
      width--;
 8002b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b0c:	e007      	b.n	8002b1e <_ftoa+0x416>
      buf[len++] = '0';
 8002b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	443b      	add	r3, r7
 8002b18:	2230      	movs	r2, #48	; 0x30
 8002b1a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d202      	bcs.n	8002b2c <_ftoa+0x424>
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	2b1f      	cmp	r3, #31
 8002b2a:	d9f0      	bls.n	8002b0e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	2b1f      	cmp	r3, #31
 8002b30:	d827      	bhi.n	8002b82 <_ftoa+0x47a>
    if (negative) {
 8002b32:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <_ftoa+0x444>
      buf[len++] = '-';
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b40:	3360      	adds	r3, #96	; 0x60
 8002b42:	443b      	add	r3, r7
 8002b44:	222d      	movs	r2, #45	; 0x2d
 8002b46:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b4a:	e01a      	b.n	8002b82 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	443b      	add	r3, r7
 8002b60:	222b      	movs	r2, #43	; 0x2b
 8002b62:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002b66:	e00c      	b.n	8002b82 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <_ftoa+0x47a>
      buf[len++] = ' ';
 8002b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b78:	3360      	adds	r3, #96	; 0x60
 8002b7a:	443b      	add	r3, r7
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b84:	9303      	str	r3, [sp, #12]
 8002b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b88:	9302      	str	r3, [sp, #8]
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	f107 0318 	add.w	r3, r7, #24
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7ff fbb4 	bl	8002308 <_out_rev>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3764      	adds	r7, #100	; 0x64
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd90      	pop	{r4, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	cccccccd 	.word	0xcccccccd
 8002bb0:	66666667 	.word	0x66666667
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	b09f      	sub	sp, #124	; 0x7c
 8002bbe:	af06      	add	r7, sp, #24
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24
 8002bc2:	6239      	str	r1, [r7, #32]
 8002bc4:	61fa      	str	r2, [r7, #28]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002bcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bd4:	f7fd ff74 	bl	8000ac0 <__aeabi_dcmpeq>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d014      	beq.n	8002c08 <_etoa+0x50>
 8002bde:	f04f 32ff 	mov.w	r2, #4294967295
 8002be2:	4bc1      	ldr	r3, [pc, #772]	; (8002ee8 <_etoa+0x330>)
 8002be4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002be8:	f7fd ff92 	bl	8000b10 <__aeabi_dcmpgt>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <_etoa+0x50>
 8002bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bfe:	f7fd ff69 	bl	8000ad4 <__aeabi_dcmplt>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c0c:	9302      	str	r3, [sp, #8]
 8002c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	6a39      	ldr	r1, [r7, #32]
 8002c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c26:	f7ff fd6f 	bl	8002708 <_ftoa>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	e23f      	b.n	80030ae <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	461e      	mov	r6, r3
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c3e:	f7fd ff49 	bl	8000ad4 <__aeabi_dcmplt>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <_etoa+0x94>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	461e      	mov	r6, r3
 8002c4c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8002c50:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <_etoa+0xb4>
    value = -value;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	ed97 7b00 	vldr	d7, [r7]
 8002c68:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002c6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c78:	2306      	movs	r3, #6
 8002c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002c7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	0d0a      	lsrs	r2, r1, #20
 8002c94:	2300      	movs	r3, #0
 8002c96:	4613      	mov	r3, r2
 8002c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ca6:	4690      	mov	r8, r2
 8002ca8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002cac:	4644      	mov	r4, r8
 8002cae:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002cb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002cb6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002cba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cbc:	f7fd fc2e 	bl	800051c <__aeabi_i2d>
 8002cc0:	a37d      	add	r3, pc, #500	; (adr r3, 8002eb8 <_etoa+0x300>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fc93 	bl	80005f0 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	a37b      	add	r3, pc, #492	; (adr r3, 8002ec0 <_etoa+0x308>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fad4 	bl	8000284 <__adddf3>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4614      	mov	r4, r2
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	4b7f      	ldr	r3, [pc, #508]	; (8002eec <_etoa+0x334>)
 8002cee:	f7fd fac7 	bl	8000280 <__aeabi_dsub>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	a373      	add	r3, pc, #460	; (adr r3, 8002ec8 <_etoa+0x310>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fc76 	bl	80005f0 <__aeabi_dmul>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4620      	mov	r0, r4
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	f7fd faba 	bl	8000284 <__adddf3>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7fd ff04 	bl	8000b24 <__aeabi_d2iz>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002d20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d22:	f7fd fbfb 	bl	800051c <__aeabi_i2d>
 8002d26:	a36a      	add	r3, pc, #424	; (adr r3, 8002ed0 <_etoa+0x318>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fc60 	bl	80005f0 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <_etoa+0x338>)
 8002d3e:	f7fd faa1 	bl	8000284 <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7fd feeb 	bl	8000b24 <__aeabi_d2iz>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002d52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d54:	f7fd fbe2 	bl	800051c <__aeabi_i2d>
 8002d58:	a35f      	add	r3, pc, #380	; (adr r3, 8002ed8 <_etoa+0x320>)
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f7fd fc47 	bl	80005f0 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d6c:	f7fd fbd6 	bl	800051c <__aeabi_i2d>
 8002d70:	a35b      	add	r3, pc, #364	; (adr r3, 8002ee0 <_etoa+0x328>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fc3b 	bl	80005f0 <__aeabi_dmul>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fd fa7d 	bl	8000280 <__aeabi_dsub>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8002d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002d96:	f7fd fc2b 	bl	80005f0 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002da8:	17da      	asrs	r2, r3, #31
 8002daa:	469a      	mov	sl, r3
 8002dac:	4693      	mov	fp, r2
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002dba:	2200      	movs	r2, #0
 8002dbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002dc0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002dc4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	f7fd fa5a 	bl	8000284 <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4699      	mov	r9, r3
 8002dd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ddc:	f04f 0000 	mov.w	r0, #0
 8002de0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002de4:	f7fd fa4c 	bl	8000280 <__aeabi_dsub>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4692      	mov	sl, r2
 8002dee:	469b      	mov	fp, r3
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <_etoa+0x33c>)
 8002df6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002dfa:	f7fd fd23 	bl	8000844 <__aeabi_ddiv>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <_etoa+0x340>)
 8002e0c:	f7fd fa3a 	bl	8000284 <__adddf3>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e18:	f7fd fd14 	bl	8000844 <__aeabi_ddiv>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <_etoa+0x344>)
 8002e2a:	f7fd fa2b 	bl	8000284 <__adddf3>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002e36:	f7fd fd05 	bl	8000844 <__aeabi_ddiv>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4650      	mov	r0, sl
 8002e40:	4659      	mov	r1, fp
 8002e42:	f7fd fa1f 	bl	8000284 <__adddf3>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4640      	mov	r0, r8
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	f7fd fcf9 	bl	8000844 <__aeabi_ddiv>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <_etoa+0x348>)
 8002e60:	f7fd fa10 	bl	8000284 <__adddf3>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4620      	mov	r0, r4
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	f7fd fbc0 	bl	80005f0 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e80:	f7fd fe28 	bl	8000ad4 <__aeabi_dcmplt>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <_etoa+0x2ee>
    expval--;
 8002e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002e90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <_etoa+0x340>)
 8002e9a:	f7fd fcd3 	bl	8000844 <__aeabi_ddiv>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	2b63      	cmp	r3, #99	; 0x63
 8002eaa:	dc2b      	bgt.n	8002f04 <_etoa+0x34c>
 8002eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eae:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002eb2:	db27      	blt.n	8002f04 <_etoa+0x34c>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	e026      	b.n	8002f06 <_etoa+0x34e>
 8002eb8:	509f79fb 	.word	0x509f79fb
 8002ebc:	3fd34413 	.word	0x3fd34413
 8002ec0:	8b60c8b3 	.word	0x8b60c8b3
 8002ec4:	3fc68a28 	.word	0x3fc68a28
 8002ec8:	636f4361 	.word	0x636f4361
 8002ecc:	3fd287a7 	.word	0x3fd287a7
 8002ed0:	0979a371 	.word	0x0979a371
 8002ed4:	400a934f 	.word	0x400a934f
 8002ed8:	bbb55516 	.word	0xbbb55516
 8002edc:	40026bb1 	.word	0x40026bb1
 8002ee0:	fefa39ef 	.word	0xfefa39ef
 8002ee4:	3fe62e42 	.word	0x3fe62e42
 8002ee8:	7fefffff 	.word	0x7fefffff
 8002eec:	3ff80000 	.word	0x3ff80000
 8002ef0:	3fe00000 	.word	0x3fe00000
 8002ef4:	402c0000 	.word	0x402c0000
 8002ef8:	40240000 	.word	0x40240000
 8002efc:	40180000 	.word	0x40180000
 8002f00:	3ff00000 	.word	0x3ff00000
 8002f04:	2305      	movs	r3, #5
 8002f06:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002f08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d03d      	beq.n	8002f90 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002f14:	a368      	add	r3, pc, #416	; (adr r3, 80030b8 <_etoa+0x500>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f1e:	f7fd fded 	bl	8000afc <__aeabi_dcmpge>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d024      	beq.n	8002f72 <_etoa+0x3ba>
 8002f28:	a365      	add	r3, pc, #404	; (adr r3, 80030c0 <_etoa+0x508>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f32:	f7fd fdcf 	bl	8000ad4 <__aeabi_dcmplt>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01a      	beq.n	8002f72 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	da07      	bge.n	8002f56 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002f46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f54:	e002      	b.n	8002f5c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f70:	e00e      	b.n	8002f90 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <_etoa+0x3d8>
 8002f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <_etoa+0x3d8>
        --prec;
 8002f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f94:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002f96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d904      	bls.n	8002faa <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa8:	e001      	b.n	8002fae <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <_etoa+0x40c>
 8002fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <_etoa+0x426>
    value /= conv.F;
 8002fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fd2:	f7fd fc37 	bl	8000844 <__aeabi_ddiv>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002fe2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <_etoa+0x440>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	e003      	b.n	8003000 <_etoa+0x448>
 8002ff8:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ffc:	ed87 7b02 	vstr	d7, [r7, #8]
 8003000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	ed97 0b02 	vldr	d0, [r7, #8]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003020:	f7ff fb72 	bl	8002708 <_ftoa>
 8003024:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8003026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003028:	2b00      	cmp	r3, #0
 800302a:	d03f      	beq.n	80030ac <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800302c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <_etoa+0x484>
 8003038:	2045      	movs	r0, #69	; 0x45
 800303a:	e000      	b.n	800303e <_etoa+0x486>
 800303c:	2065      	movs	r0, #101	; 0x65
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	1c53      	adds	r3, r2, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6a39      	ldr	r1, [r7, #32]
 800304a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800304c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800304e:	2b00      	cmp	r3, #0
 8003050:	bfb8      	it	lt
 8003052:	425b      	neglt	r3, r3
 8003054:	4618      	mov	r0, r3
 8003056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003058:	0fdb      	lsrs	r3, r3, #31
 800305a:	b2db      	uxtb	r3, r3
 800305c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800305e:	3a01      	subs	r2, #1
 8003060:	2105      	movs	r1, #5
 8003062:	9105      	str	r1, [sp, #20]
 8003064:	9204      	str	r2, [sp, #16]
 8003066:	2200      	movs	r2, #0
 8003068:	9203      	str	r2, [sp, #12]
 800306a:	220a      	movs	r2, #10
 800306c:	9202      	str	r2, [sp, #8]
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	9000      	str	r0, [sp, #0]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	6a39      	ldr	r1, [r7, #32]
 8003078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800307a:	f7ff fa71 	bl	8002560 <_ntoa_long>
 800307e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00f      	beq.n	80030ac <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800308c:	e007      	b.n	800309e <_etoa+0x4e6>
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	1c53      	adds	r3, r2, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	2020      	movs	r0, #32
 800309c:	47a0      	blx	r4
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f0      	bhi.n	800308e <_etoa+0x4d6>
    }
  }
  return idx;
 80030ac:	69fb      	ldr	r3, [r7, #28]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3764      	adds	r7, #100	; 0x64
 80030b2:	46bd      	mov	sp, r7
 80030b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b8:	eb1c432d 	.word	0xeb1c432d
 80030bc:	3f1a36e2 	.word	0x3f1a36e2
 80030c0:	00000000 	.word	0x00000000
 80030c4:	412e8480 	.word	0x412e8480

080030c8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80030c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030cc:	b0a3      	sub	sp, #140	; 0x8c
 80030ce:	af0a      	add	r7, sp, #40	; 0x28
 80030d0:	6178      	str	r0, [r7, #20]
 80030d2:	6139      	str	r1, [r7, #16]
 80030d4:	60fa      	str	r2, [r7, #12]
 80030d6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 84be 	bne.w	8003a60 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 80030e4:	4ba3      	ldr	r3, [pc, #652]	; (8003374 <_vsnprintf+0x2ac>)
 80030e6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80030e8:	f000 bcba 	b.w	8003a60 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b25      	cmp	r3, #37	; 0x25
 80030f2:	d00d      	beq.n	8003110 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	7818      	ldrb	r0, [r3, #0]
 80030f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030fa:	1c53      	adds	r3, r2, #1
 80030fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030fe:	697c      	ldr	r4, [r7, #20]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6939      	ldr	r1, [r7, #16]
 8003104:	47a0      	blx	r4
      format++;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3301      	adds	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
      continue;
 800310c:	f000 bca8 	b.w	8003a60 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3301      	adds	r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	3b20      	subs	r3, #32
 8003120:	2b10      	cmp	r3, #16
 8003122:	d857      	bhi.n	80031d4 <_vsnprintf+0x10c>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <_vsnprintf+0x64>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	080031ad 	.word	0x080031ad
 8003130:	080031d5 	.word	0x080031d5
 8003134:	080031d5 	.word	0x080031d5
 8003138:	080031c1 	.word	0x080031c1
 800313c:	080031d5 	.word	0x080031d5
 8003140:	080031d5 	.word	0x080031d5
 8003144:	080031d5 	.word	0x080031d5
 8003148:	080031d5 	.word	0x080031d5
 800314c:	080031d5 	.word	0x080031d5
 8003150:	080031d5 	.word	0x080031d5
 8003154:	080031d5 	.word	0x080031d5
 8003158:	08003199 	.word	0x08003199
 800315c:	080031d5 	.word	0x080031d5
 8003160:	08003185 	.word	0x08003185
 8003164:	080031d5 	.word	0x080031d5
 8003168:	080031d5 	.word	0x080031d5
 800316c:	08003171 	.word	0x08003171
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3301      	adds	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	2301      	movs	r3, #1
 8003180:	653b      	str	r3, [r7, #80]	; 0x50
 8003182:	e02a      	b.n	80031da <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	3301      	adds	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	2301      	movs	r3, #1
 8003194:	653b      	str	r3, [r7, #80]	; 0x50
 8003196:	e020      	b.n	80031da <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	3301      	adds	r3, #1
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	2301      	movs	r3, #1
 80031a8:	653b      	str	r3, [r7, #80]	; 0x50
 80031aa:	e016      	b.n	80031da <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80031ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ae:	f043 0308 	orr.w	r3, r3, #8
 80031b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3301      	adds	r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	2301      	movs	r3, #1
 80031bc:	653b      	str	r3, [r7, #80]	; 0x50
 80031be:	e00c      	b.n	80031da <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80031c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c2:	f043 0310 	orr.w	r3, r3, #16
 80031c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	2301      	movs	r3, #1
 80031d0:	653b      	str	r3, [r7, #80]	; 0x50
 80031d2:	e002      	b.n	80031da <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80031d4:	2300      	movs	r3, #0
 80031d6:	653b      	str	r3, [r7, #80]	; 0x50
 80031d8:	bf00      	nop
      }
    } while (n);
 80031da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d19c      	bne.n	800311a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f852 	bl	8002292 <_is_digit>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f861 	bl	80022c0 <_atoi>
 80031fe:	65b8      	str	r0, [r7, #88]	; 0x58
 8003200:	e01a      	b.n	8003238 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b2a      	cmp	r3, #42	; 0x2a
 8003208:	d116      	bne.n	8003238 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800320a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	da07      	bge.n	800322e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	425b      	negs	r3, r3
 800322a:	65bb      	str	r3, [r7, #88]	; 0x58
 800322c:	e001      	b.n	8003232 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	3301      	adds	r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b2e      	cmp	r3, #46	; 0x2e
 8003242:	d127      	bne.n	8003294 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3301      	adds	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f81b 	bl	8002292 <_is_digit>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d006      	beq.n	8003270 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003262:	f107 0308 	add.w	r3, r7, #8
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f82a 	bl	80022c0 <_atoi>
 800326c:	6578      	str	r0, [r7, #84]	; 0x54
 800326e:	e011      	b.n	8003294 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b2a      	cmp	r3, #42	; 0x2a
 8003276:	d10d      	bne.n	8003294 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800327c:	1d1a      	adds	r2, r3, #4
 800327e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003288:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800328c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3301      	adds	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	3b68      	subs	r3, #104	; 0x68
 800329a:	2b12      	cmp	r3, #18
 800329c:	d866      	bhi.n	800336c <_vsnprintf+0x2a4>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <_vsnprintf+0x1dc>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	08003317 	.word	0x08003317
 80032a8:	0800336d 	.word	0x0800336d
 80032ac:	0800334d 	.word	0x0800334d
 80032b0:	0800336d 	.word	0x0800336d
 80032b4:	080032f1 	.word	0x080032f1
 80032b8:	0800336d 	.word	0x0800336d
 80032bc:	0800336d 	.word	0x0800336d
 80032c0:	0800336d 	.word	0x0800336d
 80032c4:	0800336d 	.word	0x0800336d
 80032c8:	0800336d 	.word	0x0800336d
 80032cc:	0800336d 	.word	0x0800336d
 80032d0:	0800336d 	.word	0x0800336d
 80032d4:	0800333d 	.word	0x0800333d
 80032d8:	0800336d 	.word	0x0800336d
 80032dc:	0800336d 	.word	0x0800336d
 80032e0:	0800336d 	.word	0x0800336d
 80032e4:	0800336d 	.word	0x0800336d
 80032e8:	0800336d 	.word	0x0800336d
 80032ec:	0800335d 	.word	0x0800335d
      case 'l' :
        flags |= FLAGS_LONG;
 80032f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	3301      	adds	r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b6c      	cmp	r3, #108	; 0x6c
 8003304:	d134      	bne.n	8003370 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003314:	e02c      	b.n	8003370 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	3301      	adds	r3, #1
 8003322:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b68      	cmp	r3, #104	; 0x68
 800332a:	d125      	bne.n	8003378 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800332c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800332e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003332:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3301      	adds	r3, #1
 8003338:	60bb      	str	r3, [r7, #8]
        }
        break;
 800333a:	e01d      	b.n	8003378 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800333c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3301      	adds	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
        break;
 800334a:	e016      	b.n	800337a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003352:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3301      	adds	r3, #1
 8003358:	60bb      	str	r3, [r7, #8]
        break;
 800335a:	e00e      	b.n	800337a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800335c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
        break;
 800336a:	e006      	b.n	800337a <_vsnprintf+0x2b2>
      default :
        break;
 800336c:	bf00      	nop
 800336e:	e004      	b.n	800337a <_vsnprintf+0x2b2>
        break;
 8003370:	bf00      	nop
 8003372:	e002      	b.n	800337a <_vsnprintf+0x2b2>
 8003374:	0800223d 	.word	0x0800223d
        break;
 8003378:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	3b25      	subs	r3, #37	; 0x25
 8003380:	2b53      	cmp	r3, #83	; 0x53
 8003382:	f200 8360 	bhi.w	8003a46 <_vsnprintf+0x97e>
 8003386:	a201      	add	r2, pc, #4	; (adr r2, 800338c <_vsnprintf+0x2c4>)
 8003388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338c:	08003a2f 	.word	0x08003a2f
 8003390:	08003a47 	.word	0x08003a47
 8003394:	08003a47 	.word	0x08003a47
 8003398:	08003a47 	.word	0x08003a47
 800339c:	08003a47 	.word	0x08003a47
 80033a0:	08003a47 	.word	0x08003a47
 80033a4:	08003a47 	.word	0x08003a47
 80033a8:	08003a47 	.word	0x08003a47
 80033ac:	08003a47 	.word	0x08003a47
 80033b0:	08003a47 	.word	0x08003a47
 80033b4:	08003a47 	.word	0x08003a47
 80033b8:	08003a47 	.word	0x08003a47
 80033bc:	08003a47 	.word	0x08003a47
 80033c0:	08003a47 	.word	0x08003a47
 80033c4:	08003a47 	.word	0x08003a47
 80033c8:	08003a47 	.word	0x08003a47
 80033cc:	08003a47 	.word	0x08003a47
 80033d0:	08003a47 	.word	0x08003a47
 80033d4:	08003a47 	.word	0x08003a47
 80033d8:	08003a47 	.word	0x08003a47
 80033dc:	08003a47 	.word	0x08003a47
 80033e0:	08003a47 	.word	0x08003a47
 80033e4:	08003a47 	.word	0x08003a47
 80033e8:	08003a47 	.word	0x08003a47
 80033ec:	08003a47 	.word	0x08003a47
 80033f0:	08003a47 	.word	0x08003a47
 80033f4:	08003a47 	.word	0x08003a47
 80033f8:	08003a47 	.word	0x08003a47
 80033fc:	08003a47 	.word	0x08003a47
 8003400:	08003a47 	.word	0x08003a47
 8003404:	08003a47 	.word	0x08003a47
 8003408:	08003a47 	.word	0x08003a47
 800340c:	080037e3 	.word	0x080037e3
 8003410:	08003793 	.word	0x08003793
 8003414:	080037e3 	.word	0x080037e3
 8003418:	08003a47 	.word	0x08003a47
 800341c:	08003a47 	.word	0x08003a47
 8003420:	08003a47 	.word	0x08003a47
 8003424:	08003a47 	.word	0x08003a47
 8003428:	08003a47 	.word	0x08003a47
 800342c:	08003a47 	.word	0x08003a47
 8003430:	08003a47 	.word	0x08003a47
 8003434:	08003a47 	.word	0x08003a47
 8003438:	08003a47 	.word	0x08003a47
 800343c:	08003a47 	.word	0x08003a47
 8003440:	08003a47 	.word	0x08003a47
 8003444:	08003a47 	.word	0x08003a47
 8003448:	08003a47 	.word	0x08003a47
 800344c:	08003a47 	.word	0x08003a47
 8003450:	08003a47 	.word	0x08003a47
 8003454:	08003a47 	.word	0x08003a47
 8003458:	080034dd 	.word	0x080034dd
 800345c:	08003a47 	.word	0x08003a47
 8003460:	08003a47 	.word	0x08003a47
 8003464:	08003a47 	.word	0x08003a47
 8003468:	08003a47 	.word	0x08003a47
 800346c:	08003a47 	.word	0x08003a47
 8003470:	08003a47 	.word	0x08003a47
 8003474:	08003a47 	.word	0x08003a47
 8003478:	08003a47 	.word	0x08003a47
 800347c:	08003a47 	.word	0x08003a47
 8003480:	080034dd 	.word	0x080034dd
 8003484:	08003853 	.word	0x08003853
 8003488:	080034dd 	.word	0x080034dd
 800348c:	080037e3 	.word	0x080037e3
 8003490:	08003793 	.word	0x08003793
 8003494:	080037e3 	.word	0x080037e3
 8003498:	08003a47 	.word	0x08003a47
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	08003a47 	.word	0x08003a47
 80034a4:	08003a47 	.word	0x08003a47
 80034a8:	08003a47 	.word	0x08003a47
 80034ac:	08003a47 	.word	0x08003a47
 80034b0:	08003a47 	.word	0x08003a47
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	08003993 	.word	0x08003993
 80034bc:	08003a47 	.word	0x08003a47
 80034c0:	08003a47 	.word	0x08003a47
 80034c4:	080038cb 	.word	0x080038cb
 80034c8:	08003a47 	.word	0x08003a47
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	08003a47 	.word	0x08003a47
 80034d4:	08003a47 	.word	0x08003a47
 80034d8:	080034dd 	.word	0x080034dd
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b78      	cmp	r3, #120	; 0x78
 80034e2:	d003      	beq.n	80034ec <_vsnprintf+0x424>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b58      	cmp	r3, #88	; 0x58
 80034ea:	d102      	bne.n	80034f2 <_vsnprintf+0x42a>
          base = 16U;
 80034ec:	2310      	movs	r3, #16
 80034ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f0:	e013      	b.n	800351a <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b6f      	cmp	r3, #111	; 0x6f
 80034f8:	d102      	bne.n	8003500 <_vsnprintf+0x438>
          base =  8U;
 80034fa:	2308      	movs	r3, #8
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fe:	e00c      	b.n	800351a <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b62      	cmp	r3, #98	; 0x62
 8003506:	d102      	bne.n	800350e <_vsnprintf+0x446>
          base =  2U;
 8003508:	2302      	movs	r3, #2
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
 800350c:	e005      	b.n	800351a <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800350e:	230a      	movs	r3, #10
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003514:	f023 0310 	bic.w	r3, r3, #16
 8003518:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b58      	cmp	r3, #88	; 0x58
 8003520:	d103      	bne.n	800352a <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8003522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b69      	cmp	r3, #105	; 0x69
 8003530:	d007      	beq.n	8003542 <_vsnprintf+0x47a>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d003      	beq.n	8003542 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	f023 030c 	bic.w	r3, r3, #12
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800354c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354e:	f023 0301 	bic.w	r3, r3, #1
 8003552:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b69      	cmp	r3, #105	; 0x69
 800355a:	d004      	beq.n	8003566 <_vsnprintf+0x49e>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b64      	cmp	r3, #100	; 0x64
 8003562:	f040 8098 	bne.w	8003696 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003574:	3307      	adds	r3, #7
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	f103 0208 	add.w	r2, r3, #8
 800357e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800358a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	da06      	bge.n	80035a0 <_vsnprintf+0x4d8>
 8003592:	2100      	movs	r1, #0
 8003594:	f1d2 0800 	rsbs	r8, r2, #0
 8003598:	eb61 0903 	sbc.w	r9, r1, r3
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	69f9      	ldr	r1, [r7, #28]
 80035a2:	0fc9      	lsrs	r1, r1, #31
 80035a4:	b2c9      	uxtb	r1, r1
 80035a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035a8:	2400      	movs	r4, #0
 80035aa:	4682      	mov	sl, r0
 80035ac:	46a3      	mov	fp, r4
 80035ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80035b0:	9008      	str	r0, [sp, #32]
 80035b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80035b4:	9007      	str	r0, [sp, #28]
 80035b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80035b8:	9006      	str	r0, [sp, #24]
 80035ba:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80035be:	9102      	str	r1, [sp, #8]
 80035c0:	e9cd 2300 	strd	r2, r3, [sp]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff f82e 	bl	800262c <_ntoa_long_long>
 80035d0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80035d2:	e0da      	b.n	800378a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80035d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d020      	beq.n	8003620 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80035de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bfb8      	it	lt
 80035f2:	425b      	neglt	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	0fdb      	lsrs	r3, r3, #31
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035fe:	9205      	str	r2, [sp, #20]
 8003600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003602:	9204      	str	r2, [sp, #16]
 8003604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003606:	9203      	str	r2, [sp, #12]
 8003608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	9100      	str	r1, [sp, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003614:	6939      	ldr	r1, [r7, #16]
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f7fe ffa2 	bl	8002560 <_ntoa_long>
 800361c:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800361e:	e0b4      	b.n	800378a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <_vsnprintf+0x572>
 800362a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e012      	b.n	8003660 <_vsnprintf+0x598>
 800363a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <_vsnprintf+0x58c>
 8003644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	b21b      	sxth	r3, r3
 8003652:	e005      	b.n	8003660 <_vsnprintf+0x598>
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003658:	1d1a      	adds	r2, r3, #4
 800365a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	bfb8      	it	lt
 8003668:	425b      	neglt	r3, r3
 800366a:	4619      	mov	r1, r3
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	0fdb      	lsrs	r3, r3, #31
 8003670:	b2db      	uxtb	r3, r3
 8003672:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003674:	9205      	str	r2, [sp, #20]
 8003676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003678:	9204      	str	r2, [sp, #16]
 800367a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800367c:	9203      	str	r2, [sp, #12]
 800367e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003680:	9202      	str	r2, [sp, #8]
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	9100      	str	r1, [sp, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f7fe ff67 	bl	8002560 <_ntoa_long>
 8003692:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003694:	e079      	b.n	800378a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	d022      	beq.n	80036e6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80036a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036a4:	3307      	adds	r3, #7
 80036a6:	f023 0307 	bic.w	r3, r3, #7
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80036b8:	2000      	movs	r0, #0
 80036ba:	460d      	mov	r5, r1
 80036bc:	4606      	mov	r6, r0
 80036be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80036c0:	9108      	str	r1, [sp, #32]
 80036c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036c4:	9107      	str	r1, [sp, #28]
 80036c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036c8:	9106      	str	r1, [sp, #24]
 80036ca:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80036ce:	2100      	movs	r1, #0
 80036d0:	9102      	str	r1, [sp, #8]
 80036d2:	e9cd 2300 	strd	r2, r3, [sp]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036da:	6939      	ldr	r1, [r7, #16]
 80036dc:	6978      	ldr	r0, [r7, #20]
 80036de:	f7fe ffa5 	bl	800262c <_ntoa_long_long>
 80036e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80036e4:	e051      	b.n	800378a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80036e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80036f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036fe:	9205      	str	r2, [sp, #20]
 8003700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003702:	9204      	str	r2, [sp, #16]
 8003704:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003706:	9203      	str	r2, [sp, #12]
 8003708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800370a:	9202      	str	r2, [sp, #8]
 800370c:	2200      	movs	r2, #0
 800370e:	9201      	str	r2, [sp, #4]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003716:	6939      	ldr	r1, [r7, #16]
 8003718:	6978      	ldr	r0, [r7, #20]
 800371a:	f7fe ff21 	bl	8002560 <_ntoa_long>
 800371e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003720:	e033      	b.n	800378a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <_vsnprintf+0x674>
 800372c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003730:	1d1a      	adds	r2, r3, #4
 8003732:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e012      	b.n	8003762 <_vsnprintf+0x69a>
 800373c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <_vsnprintf+0x68e>
 8003746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800374a:	1d1a      	adds	r2, r3, #4
 800374c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	e005      	b.n	8003762 <_vsnprintf+0x69a>
 8003756:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003766:	9305      	str	r3, [sp, #20]
 8003768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376a:	9304      	str	r3, [sp, #16]
 800376c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	2300      	movs	r3, #0
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003780:	6939      	ldr	r1, [r7, #16]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7fe feec 	bl	8002560 <_ntoa_long>
 8003788:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	3301      	adds	r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
        break;
 8003790:	e166      	b.n	8003a60 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b46      	cmp	r3, #70	; 0x46
 8003798:	d103      	bne.n	80037a2 <_vsnprintf+0x6da>
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	f043 0320 	orr.w	r3, r3, #32
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80037a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037a6:	3307      	adds	r3, #7
 80037a8:	f023 0307 	bic.w	r3, r3, #7
 80037ac:	f103 0208 	add.w	r2, r3, #8
 80037b0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80037b4:	ed93 7b00 	vldr	d7, [r3]
 80037b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	eeb0 0a47 	vmov.f32	s0, s14
 80037c8:	eef0 0a67 	vmov.f32	s1, s15
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d0:	6939      	ldr	r1, [r7, #16]
 80037d2:	6978      	ldr	r0, [r7, #20]
 80037d4:	f7fe ff98 	bl	8002708 <_ftoa>
 80037d8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
        break;
 80037e0:	e13e      	b.n	8003a60 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b67      	cmp	r3, #103	; 0x67
 80037e8:	d003      	beq.n	80037f2 <_vsnprintf+0x72a>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b47      	cmp	r3, #71	; 0x47
 80037f0:	d103      	bne.n	80037fa <_vsnprintf+0x732>
 80037f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b45      	cmp	r3, #69	; 0x45
 8003800:	d003      	beq.n	800380a <_vsnprintf+0x742>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b47      	cmp	r3, #71	; 0x47
 8003808:	d103      	bne.n	8003812 <_vsnprintf+0x74a>
 800380a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003816:	3307      	adds	r3, #7
 8003818:	f023 0307 	bic.w	r3, r3, #7
 800381c:	f103 0208 	add.w	r2, r3, #8
 8003820:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003824:	ed93 7b00 	vldr	d7, [r3]
 8003828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382a:	9302      	str	r3, [sp, #8]
 800382c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	eeb0 0a47 	vmov.f32	s0, s14
 8003838:	eef0 0a67 	vmov.f32	s1, s15
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003840:	6939      	ldr	r1, [r7, #16]
 8003842:	6978      	ldr	r0, [r7, #20]
 8003844:	f7ff f9b8 	bl	8002bb8 <_etoa>
 8003848:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3301      	adds	r3, #1
 800384e:	60bb      	str	r3, [r7, #8]
        break;
 8003850:	e106      	b.n	8003a60 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10e      	bne.n	800387e <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003860:	e007      	b.n	8003872 <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8003862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003864:	1c53      	adds	r3, r2, #1
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	697c      	ldr	r4, [r7, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6939      	ldr	r1, [r7, #16]
 800386e:	2020      	movs	r0, #32
 8003870:	47a0      	blx	r4
          while (l++ < width) {
 8003872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	647a      	str	r2, [r7, #68]	; 0x44
 8003878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800387a:	429a      	cmp	r2, r3
 800387c:	d8f1      	bhi.n	8003862 <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800387e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b2d8      	uxtb	r0, r3
 800388c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800388e:	1c53      	adds	r3, r2, #1
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003892:	697c      	ldr	r4, [r7, #20]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6939      	ldr	r1, [r7, #16]
 8003898:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800389a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <_vsnprintf+0x7fa>
          while (l++ < width) {
 80038a4:	e007      	b.n	80038b6 <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 80038a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a8:	1c53      	adds	r3, r2, #1
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	697c      	ldr	r4, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6939      	ldr	r1, [r7, #16]
 80038b2:	2020      	movs	r0, #32
 80038b4:	47a0      	blx	r4
          while (l++ < width) {
 80038b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	647a      	str	r2, [r7, #68]	; 0x44
 80038bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038be:	429a      	cmp	r2, r3
 80038c0:	d8f1      	bhi.n	80038a6 <_vsnprintf+0x7de>
          }
        }
        format++;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
        break;
 80038c8:	e0ca      	b.n	8003a60 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80038ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80038d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <_vsnprintf+0x81a>
 80038de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e0:	e001      	b.n	80038e6 <_vsnprintf+0x81e>
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	4619      	mov	r1, r3
 80038e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038ea:	f7fe fcb5 	bl	8002258 <_strnlen_s>
 80038ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80038f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d005      	beq.n	8003906 <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 80038fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fe:	4293      	cmp	r3, r2
 8003900:	bf28      	it	cs
 8003902:	4613      	movcs	r3, r2
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11a      	bne.n	8003946 <_vsnprintf+0x87e>
          while (l++ < width) {
 8003910:	e007      	b.n	8003922 <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8003912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003914:	1c53      	adds	r3, r2, #1
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	697c      	ldr	r4, [r7, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6939      	ldr	r1, [r7, #16]
 800391e:	2020      	movs	r0, #32
 8003920:	47a0      	blx	r4
          while (l++ < width) {
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800392a:	429a      	cmp	r2, r3
 800392c:	d8f1      	bhi.n	8003912 <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800392e:	e00a      	b.n	8003946 <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8003930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	643a      	str	r2, [r7, #64]	; 0x40
 8003936:	7818      	ldrb	r0, [r3, #0]
 8003938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800393a:	1c53      	adds	r3, r2, #1
 800393c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800393e:	697c      	ldr	r4, [r7, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6939      	ldr	r1, [r7, #16]
 8003944:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <_vsnprintf+0x89a>
 800394e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0eb      	beq.n	8003930 <_vsnprintf+0x868>
 8003958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800395a:	1e5a      	subs	r2, r3, #1
 800395c:	657a      	str	r2, [r7, #84]	; 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e6      	bne.n	8003930 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <_vsnprintf+0x8c2>
          while (l++ < width) {
 800396c:	e007      	b.n	800397e <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 800396e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003970:	1c53      	adds	r3, r2, #1
 8003972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003974:	697c      	ldr	r4, [r7, #20]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6939      	ldr	r1, [r7, #16]
 800397a:	2020      	movs	r0, #32
 800397c:	47a0      	blx	r4
          while (l++ < width) {
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003984:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003986:	429a      	cmp	r2, r3
 8003988:	d8f1      	bhi.n	800396e <_vsnprintf+0x8a6>
          }
        }
        format++;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
        break;
 8003990:	e066      	b.n	8003a60 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003992:	2308      	movs	r3, #8
 8003994:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003998:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 80039a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d023      	beq.n	80039f4 <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80039ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b0:	1d1a      	adds	r2, r3, #4
 80039b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	2300      	movs	r3, #0
 80039bc:	603a      	str	r2, [r7, #0]
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c2:	9308      	str	r3, [sp, #32]
 80039c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039c6:	9307      	str	r3, [sp, #28]
 80039c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ca:	9306      	str	r3, [sp, #24]
 80039cc:	f04f 0210 	mov.w	r2, #16
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039d8:	2300      	movs	r3, #0
 80039da:	9302      	str	r3, [sp, #8]
 80039dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039e0:	e9cd 3400 	strd	r3, r4, [sp]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039e8:	6939      	ldr	r1, [r7, #16]
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7fe fe1e 	bl	800262c <_ntoa_long_long>
 80039f0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80039f2:	e018      	b.n	8003a26 <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80039f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039f8:	1d1a      	adds	r2, r3, #4
 80039fa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a04:	9305      	str	r3, [sp, #20]
 8003a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a08:	9304      	str	r3, [sp, #16]
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a0c:	9303      	str	r3, [sp, #12]
 8003a0e:	2310      	movs	r3, #16
 8003a10:	9302      	str	r3, [sp, #8]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	9200      	str	r2, [sp, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1c:	6939      	ldr	r1, [r7, #16]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7fe fd9e 	bl	8002560 <_ntoa_long>
 8003a24:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	60bb      	str	r3, [r7, #8]
        break;
 8003a2c:	e018      	b.n	8003a60 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a30:	1c53      	adds	r3, r2, #1
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a34:	697c      	ldr	r4, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	2025      	movs	r0, #37	; 0x25
 8003a3c:	47a0      	blx	r4
        format++;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3301      	adds	r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
        break;
 8003a44:	e00c      	b.n	8003a60 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	7818      	ldrb	r0, [r3, #0]
 8003a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a4c:	1c53      	adds	r3, r2, #1
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a50:	697c      	ldr	r4, [r7, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6939      	ldr	r1, [r7, #16]
 8003a56:	47a0      	blx	r4
        format++;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
        break;
 8003a5e:	bf00      	nop
  while (*format)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f47f ab41 	bne.w	80030ec <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <_vsnprintf+0x9b0>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	e000      	b.n	8003a7a <_vsnprintf+0x9b2>
 8003a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a7a:	697c      	ldr	r4, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6939      	ldr	r1, [r7, #16]
 8003a80:	2000      	movs	r0, #0
 8003a82:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3764      	adds	r7, #100	; 0x64
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a90 <vsnprintf_>:
{
  return _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
}

int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4803      	ldr	r0, [pc, #12]	; (8003ab8 <vsnprintf_+0x28>)
 8003aaa:	f7ff fb0d 	bl	80030c8 <_vsnprintf>
 8003aae:	4603      	mov	r3, r0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	0800220f 	.word	0x0800220f

08003abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <HAL_MspInit+0x34>)
 8003ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_MspInit+0x34>)
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_MspInit+0x34>)
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003ae0:	2004      	movs	r0, #4
 8003ae2:	f000 ff6d 	bl	80049c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	46020c00 	.word	0x46020c00

08003af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0bc      	sub	sp, #240	; 0xf0
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	22c8      	movs	r2, #200	; 0xc8
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f008 fa13 	bl	800bf40 <memset>
  if(hadc->Instance==ADC1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_ADC_MspInit+0xbc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d140      	bne.n	8003ba6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8003b24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8003b30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fd8f 	bl	8007660 <HAL_RCCEx_PeriphCLKConfig>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8003b48:	f7fe fb5c 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_ADC_MspInit+0xc0>)
 8003b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b52:	4a18      	ldr	r2, [pc, #96]	; (8003bb4 <HAL_ADC_MspInit+0xc0>)
 8003b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_ADC_MspInit+0xc0>)
 8003b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_ADC_MspInit+0xc0>)
 8003b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_ADC_MspInit+0xc0>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_ADC_MspInit+0xc0>)
 8003b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003b88:	2304      	movs	r3, #4
 8003b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003b9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <HAL_ADC_MspInit+0xc4>)
 8003ba2:	f000 ff4d 	bl	8004a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ba6:	bf00      	nop
 8003ba8:	37f0      	adds	r7, #240	; 0xf0
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	42028000 	.word	0x42028000
 8003bb4:	46020c00 	.word	0x46020c00
 8003bb8:	42020800 	.word	0x42020800

08003bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0b      	ldr	r2, [pc, #44]	; (8003bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_TIM_Base_MspInit+0x40>)
 8003bd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd4:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_TIM_Base_MspInit+0x40>)
 8003bd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bda:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_TIM_Base_MspInit+0x40>)
 8003be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	46020c00 	.word	0x46020c00

08003c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b0bc      	sub	sp, #240	; 0xf0
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c18:	f107 0310 	add.w	r3, r7, #16
 8003c1c:	22c8      	movs	r2, #200	; 0xc8
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f008 f98d 	bl	800bf40 <memset>
  if(huart->Instance==USART1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_UART_MspInit+0xc4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d145      	bne.n	8003cbc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c30:	f04f 0201 	mov.w	r2, #1
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c40:	f107 0310 	add.w	r3, r7, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 fd0b 	bl	8007660 <HAL_RCCEx_PeriphCLKConfig>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003c50:	f7fe fad8 	bl	8002204 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <HAL_UART_MspInit+0xc8>)
 8003c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c5a:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_UART_MspInit+0xc8>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c60:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_UART_MspInit+0xc8>)
 8003c66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_UART_MspInit+0xc8>)
 8003c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <HAL_UART_MspInit+0xc8>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_UART_MspInit+0xc8>)
 8003c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003c90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003caa:	2307      	movs	r3, #7
 8003cac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4805      	ldr	r0, [pc, #20]	; (8003ccc <HAL_UART_MspInit+0xcc>)
 8003cb8:	f000 fec2 	bl	8004a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003cbc:	bf00      	nop
 8003cbe:	37f0      	adds	r7, #240	; 0xf0
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40013800 	.word	0x40013800
 8003cc8:	46020c00 	.word	0x46020c00
 8003ccc:	42020000 	.word	0x42020000

08003cd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0be      	sub	sp, #248	; 0xf8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ce8:	f107 0318 	add.w	r3, r7, #24
 8003cec:	22c8      	movs	r2, #200	; 0xc8
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f008 f925 	bl	800bf40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a3c      	ldr	r2, [pc, #240]	; (8003dec <HAL_PCD_MspInit+0x11c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d171      	bne.n	8003de4 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003d00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d12:	f107 0318 	add.w	r3, r7, #24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 fca2 	bl	8007660 <HAL_RCCEx_PeriphCLKConfig>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8003d22:	f7fe fa6f 	bl	8002204 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d26:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2c:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d36:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003d44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003d48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003d5e:	230a      	movs	r3, #10
 8003d60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4822      	ldr	r0, [pc, #136]	; (8003df4 <HAL_PCD_MspInit+0x124>)
 8003d6c:	f000 fe68 	bl	8004a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d119      	bne.n	8003dd0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da2:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003da4:	f043 0304 	orr.w	r3, r3, #4
 8003da8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8003dba:	f002 f985 	bl	80060c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc4:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <HAL_PCD_MspInit+0x120>)
 8003dc6:	f023 0304 	bic.w	r3, r3, #4
 8003dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003dce:	e001      	b.n	8003dd4 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8003dd0:	f002 f97a 	bl	80060c8 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2049      	movs	r0, #73	; 0x49
 8003dda:	f000 fdfc 	bl	80049d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003dde:	2049      	movs	r0, #73	; 0x49
 8003de0:	f000 fe13 	bl	8004a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003de4:	bf00      	nop
 8003de6:	37f8      	adds	r7, #248	; 0xf8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	42040000 	.word	0x42040000
 8003df0:	46020c00 	.word	0x46020c00
 8003df4:	42020000 	.word	0x42020000

08003df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dfc:	e7fe      	b.n	8003dfc <NMI_Handler+0x4>

08003dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e02:	e7fe      	b.n	8003e02 <HardFault_Handler+0x4>

08003e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <MemManage_Handler+0x4>

08003e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e0e:	e7fe      	b.n	8003e0e <BusFault_Handler+0x4>

08003e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <UsageFault_Handler+0x4>

08003e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e44:	f000 f8d2 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <OTG_FS_IRQHandler+0x10>)
 8003e52:	f001 f909 	bl	8005068 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200002b0 	.word	0x200002b0

08003e60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <SystemInit+0x68>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <SystemInit+0x68>)
 8003e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <SystemInit+0x6c>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <SystemInit+0x6c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <SystemInit+0x6c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <SystemInit+0x6c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <SystemInit+0x6c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <SystemInit+0x6c>)
 8003e92:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003e96:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003e9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <SystemInit+0x6c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <SystemInit+0x6c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <SystemInit+0x6c>)
 8003ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <SystemInit+0x6c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <SystemInit+0x68>)
 8003eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003eba:	609a      	str	r2, [r3, #8]
  #endif
}
 8003ebc:	bf00      	nop
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000ed00 	.word	0xe000ed00
 8003ecc:	46020c00 	.word	0x46020c00

08003ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ed6:	e003      	b.n	8003ee0 <LoopCopyDataInit>

08003ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ede:	3104      	adds	r1, #4

08003ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ee0:	480b      	ldr	r0, [pc, #44]	; (8003f10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ee8:	d3f6      	bcc.n	8003ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003eec:	e002      	b.n	8003ef4 <LoopFillZerobss>

08003eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ef0:	f842 3b04 	str.w	r3, [r2], #4

08003ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <LoopForever+0x16>)
	cmp	r2, r3
 8003ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ef8:	d3f9      	bcc.n	8003eee <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003efa:	f7ff ffb1 	bl	8003e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003efe:	f007 fffb 	bl	800bef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f02:	f7fd fe47 	bl	8001b94 <main>

08003f06 <LoopForever>:

LoopForever:
    b LoopForever
 8003f06:	e7fe      	b.n	8003f06 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003f08:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003f0c:	0800dcf0 	.word	0x0800dcf0
	ldr	r0, =_sdata
 8003f10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f14:	20000015 	.word	0x20000015
	ldr	r2, =_sbss
 8003f18:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003f1c:	200007c0 	.word	0x200007c0

08003f20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f20:	e7fe      	b.n	8003f20 <ADC1_IRQHandler>
	...

08003f24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_Init+0x4c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_Init+0x4c>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f34:	2003      	movs	r0, #3
 8003f36:	f000 fd43 	bl	80049c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003f3a:	f003 f9ad 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_Init+0x50>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	490b      	ldr	r1, [pc, #44]	; (8003f78 <HAL_Init+0x54>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <HAL_Init+0x58>)
 8003f52:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f54:	2000      	movs	r0, #0
 8003f56:	f000 f813 	bl	8003f80 <HAL_InitTick>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e002      	b.n	8003f6a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f64:	f7ff fdaa 	bl	8003abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40022000 	.word	0x40022000
 8003f74:	46020c00 	.word	0x46020c00
 8003f78:	0800dbe0 	.word	0x0800dbe0
 8003f7c:	2000000c 	.word	0x2000000c

08003f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003f88:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_InitTick+0x60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e021      	b.n	8003fd8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_InitTick+0x64>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_InitTick+0x60>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd3b 	bl	8004a26 <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f000 fd05 	bl	80049d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <HAL_InitTick+0x68>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000014 	.word	0x20000014
 8003fe4:	2000000c 	.word	0x2000000c
 8003fe8:	20000010 	.word	0x20000010

08003fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000014 	.word	0x20000014
 8004010:	200007bc 	.word	0x200007bc

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	200007bc 	.word	0x200007bc

0800402c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff ffee 	bl	8004014 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d005      	beq.n	8004052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <HAL_Delay+0x44>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004052:	bf00      	nop
 8004054:	f7ff ffde 	bl	8004014 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	429a      	cmp	r2, r3
 8004062:	d8f7      	bhi.n	8004054 <HAL_Delay+0x28>
  {
  }
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000014 	.word	0x20000014

08004074 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	2a00      	cmp	r2, #0
 80040c4:	d002      	beq.n	80040cc <LL_ADC_SetGainCompensation+0x32>
 80040c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040ca:	e000      	b.n	80040ce <LL_ADC_SetGainCompensation+0x34>
 80040cc:	2200      	movs	r2, #0
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2107      	movs	r1, #7
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	fa01 f303 	lsl.w	r3, r1, r3
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800412e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6093      	str	r3, [r2, #8]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004156:	d101      	bne.n	800415c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800417a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800417e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	609a      	str	r2, [r3, #8]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a6:	d101      	bne.n	80041ac <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <LL_ADC_IsEnabled+0x18>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <LL_ADC_IsEnabled+0x1a>
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d101      	bne.n	80041f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d101      	bne.n	800421e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 800423a:	2300      	movs	r3, #0
 800423c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e2e3      	b.n	8004814 <HAL_ADC_Init+0x5e8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a92      	ldr	r2, [pc, #584]	; (80044a4 <HAL_ADC_Init+0x278>)
 800425a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fc45 	bl	8003af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff60 	bl	8004142 <LL_ADC_IsDeepPowerDownEnabled>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff46 	bl	800411e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ff7b 	bl	8004192 <LL_ADC_IsInternalRegulatorEnabled>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d115      	bne.n	80042ce <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff5f 	bl	800416a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042ac:	4b7e      	ldr	r3, [pc, #504]	; (80044a8 <HAL_ADC_Init+0x27c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	4a7e      	ldr	r2, [pc, #504]	; (80044ac <HAL_ADC_Init+0x280>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	3301      	adds	r3, #1
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042c0:	e002      	b.n	80042c8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f9      	bne.n	80042c2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff5d 	bl	8004192 <LL_ADC_IsInternalRegulatorEnabled>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10e      	bne.n	80042fc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e2:	f043 0210 	orr.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ee:	f043 0201 	orr.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff6d 	bl	80041e0 <LL_ADC_REG_IsConversionOngoing>
 8004306:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 8274 	bne.w	80047fe <HAL_ADC_Init+0x5d2>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 8270 	bne.w	80047fe <HAL_ADC_Init+0x5d2>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004322:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004326:	f043 0202 	orr.w	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff41 	bl	80041ba <LL_ADC_IsEnabled>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d14e      	bne.n	80043dc <HAL_ADC_Init+0x1b0>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <HAL_ADC_Init+0x278>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d028      	beq.n	800439a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a58      	ldr	r2, [pc, #352]	; (80044b0 <HAL_ADC_Init+0x284>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d109      	bne.n	8004366 <HAL_ADC_Init+0x13a>
 8004352:	4857      	ldr	r0, [pc, #348]	; (80044b0 <HAL_ADC_Init+0x284>)
 8004354:	f7ff ff31 	bl	80041ba <LL_ADC_IsEnabled>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	e008      	b.n	8004378 <HAL_ADC_Init+0x14c>
 8004366:	484f      	ldr	r0, [pc, #316]	; (80044a4 <HAL_ADC_Init+0x278>)
 8004368:	f7ff ff27 	bl	80041ba <LL_ADC_IsEnabled>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <HAL_ADC_Init+0x1b0>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <HAL_ADC_Init+0x284>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <HAL_ADC_Init+0x15e>
 8004386:	4a4b      	ldr	r2, [pc, #300]	; (80044b4 <HAL_ADC_Init+0x288>)
 8004388:	e000      	b.n	800438c <HAL_ADC_Init+0x160>
 800438a:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <HAL_ADC_Init+0x28c>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7ff fe6e 	bl	8004074 <LL_ADC_SetCommonClock>
 8004398:	e020      	b.n	80043dc <HAL_ADC_Init+0x1b0>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        MODIFY_REG(hadc->Instance->CFGR1,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f023 010c 	bic.w	r1, r3, #12
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d005      	beq.n	80043bc <HAL_ADC_Init+0x190>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	e000      	b.n	80043be <HAL_ADC_Init+0x192>
 80043bc:	230c      	movs	r3, #12
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	430b      	orrs	r3, r1
 80043c4:	60d3      	str	r3, [r2, #12]
                   ADC_CFGR1_RES,
                   __LL_ADC_RESOLUTION_ADC1_TO_ADC4(hadc->Init.Resolution));   /* Convert resolution for the ADC4 */

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80043c6:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <HAL_ADC_Init+0x28c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043d6:	4938      	ldr	r1, [pc, #224]	; (80044b8 <HAL_ADC_Init+0x28c>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <HAL_ADC_Init+0x278>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d010      	beq.n	8004408 <HAL_ADC_Init+0x1dc>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043ec:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043f2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80043f8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004400:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8004402:	4313      	orrs	r3, r2
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	e030      	b.n	800446a <HAL_ADC_Init+0x23e>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7f1b      	ldrb	r3, [r3, #28]
 800440c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004414:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004416:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800441c:	2a00      	cmp	r2, #0
 800441e:	d002      	beq.n	8004426 <HAL_ADC_Init+0x1fa>
 8004420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004424:	e000      	b.n	8004428 <HAL_ADC_Init+0x1fc>
 8004426:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004428:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800442e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	da04      	bge.n	8004442 <HAL_ADC_Init+0x216>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004440:	e001      	b.n	8004446 <HAL_ADC_Init+0x21a>
 8004442:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8004446:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4918      	ldr	r1, [pc, #96]	; (80044b0 <HAL_ADC_Init+0x284>)
 800444e:	428b      	cmp	r3, r1
 8004450:	d103      	bne.n	800445a <HAL_ADC_Init+0x22e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004458:	e003      	b.n	8004462 <HAL_ADC_Init+0x236>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004460:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8004462:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	4313      	orrs	r3, r2
 8004468:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d12f      	bne.n	80044d4 <HAL_ADC_Init+0x2a8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <HAL_ADC_Init+0x278>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d007      	beq.n	800448e <HAL_ADC_Init+0x262>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	3b01      	subs	r3, #1
 8004484:	045b      	lsls	r3, r3, #17
 8004486:	6a3a      	ldr	r2, [r7, #32]
 8004488:	4313      	orrs	r3, r2
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	e022      	b.n	80044d4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	d111      	bne.n	80044bc <HAL_ADC_Init+0x290>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	e018      	b.n	80044d4 <HAL_ADC_Init+0x2a8>
 80044a2:	bf00      	nop
 80044a4:	46021000 	.word	0x46021000
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	053e2d63 	.word	0x053e2d63
 80044b0:	42028000 	.word	0x42028000
 80044b4:	42028308 	.word	0x42028308
 80044b8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	f043 0220 	orr.w	r2, r3, #32
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a93      	ldr	r2, [pc, #588]	; (8004728 <HAL_ADC_Init+0x4fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_ADC_Init+0x2e4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_ADC_Init+0x2ce>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ea:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	4313      	orrs	r3, r2
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	4b8a      	ldr	r3, [pc, #552]	; (800472c <HAL_ADC_Init+0x500>)
 8004502:	4013      	ands	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	430b      	orrs	r3, r1
 800450c:	60d3      	str	r3, [r2, #12]
 800450e:	e033      	b.n	8004578 <HAL_ADC_Init+0x34c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <HAL_ADC_Init+0x300>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	4313      	orrs	r3, r2
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	4313      	orrs	r3, r2
 800452a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 33bf 	bic.w	r3, r3, #97792	; 0x17e00
 8004536:	f423 73f9 	bic.w	r3, r3, #498	; 0x1f2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	6a39      	ldr	r1, [r7, #32]
 8004540:	430b      	orrs	r3, r1
 8004542:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN   |
                 ADC4_CFGR1_SCANDIR |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_ADC_Init+0x332>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.LowPowerAutoPowerOff);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_ADC_Init+0x34c>
      {
        SET_BIT(hadc->Instance->PW, hadc->Init.VrefProtection);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6a      	ldr	r2, [pc, #424]	; (8004728 <HAL_ADC_Init+0x4fc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f000 8093 	beq.w	80046aa <HAL_ADC_Init+0x47e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fe29 	bl	80041e0 <LL_ADC_REG_IsConversionOngoing>
 800458e:	6138      	str	r0, [r7, #16]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fe36 	bl	8004206 <LL_ADC_INJ_IsConversionOngoing>
 800459a:	60f8      	str	r0, [r7, #12]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d161      	bne.n	8004666 <HAL_ADC_Init+0x43a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d15e      	bne.n	8004666 <HAL_ADC_Init+0x43a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7f1b      	ldrb	r3, [r3, #28]
 80045ac:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	495f      	ldr	r1, [pc, #380]	; (8004730 <HAL_ADC_Init+0x504>)
 80045b4:	428b      	cmp	r3, r1
 80045b6:	d102      	bne.n	80045be <HAL_ADC_Init+0x392>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	e002      	b.n	80045c4 <HAL_ADC_Init+0x398>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045c4:	4313      	orrs	r3, r2
 80045c6:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	6a39      	ldr	r1, [r7, #32]
 80045dc:	430b      	orrs	r3, r1
 80045de:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d007      	beq.n	80045f8 <HAL_ADC_Init+0x3cc>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7ff fd51 	bl	800409a <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11e      	bne.n	8004640 <HAL_ADC_Init+0x414>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	4b49      	ldr	r3, [pc, #292]	; (8004734 <HAL_ADC_Init+0x508>)
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004616:	0411      	lsls	r1, r2, #16
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800461c:	4311      	orrs	r1, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004622:	4311      	orrs	r1, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800462e:	0892      	lsrs	r2, r2, #2
 8004630:	430a      	orrs	r2, r1
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e007      	b.n	8004650 <HAL_ADC_Init+0x424>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d10c      	bne.n	8004688 <HAL_ADC_Init+0x45c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	f023 010f 	bic.w	r1, r3, #15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	1e5a      	subs	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
 8004686:	e007      	b.n	8004698 <HAL_ADC_Init+0x46c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 020f 	bic.w	r2, r2, #15
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800469c:	f023 0303 	bic.w	r3, r3, #3
 80046a0:	f043 0201 	orr.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80046a8:	e0b2      	b.n	8004810 <HAL_ADC_Init+0x5e4>
      /*  - oversampling enable                                                 */
      /*  - oversampling ratio                                                  */
      /*  - oversampling shift                                                  */
      /*  - oversampling discontinuous mode (triggered mode)                    */
      /*  - trigger frequency mode                                              */
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                   hadc->Init.Oversampling.RightBitShift |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80046b2:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                   hadc->Init.Oversampling.RightBitShift |
 80046b8:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                   hadc->Init.Oversampling.TriggeredMode |
 80046be:	4313      	orrs	r3, r2
      tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d103      	bne.n	80046d8 <HAL_ADC_Init+0x4ac>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_ADC_Init+0x50c>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	69f9      	ldr	r1, [r7, #28]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	461a      	mov	r2, r3
 80046f6:	2100      	movs	r1, #0
 80046f8:	f7ff fcf2 	bl	80040e0 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	461a      	mov	r2, r3
 8004706:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 800470a:	f7ff fce9 	bl	80040e0 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <HAL_ADC_Init+0x510>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f062 020f 	orn	r2, r2, #15
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
 8004726:	e044      	b.n	80047b2 <HAL_ADC_Init+0x586>
 8004728:	46021000 	.word	0x46021000
 800472c:	fff0c013 	.word	0xfff0c013
 8004730:	42028000 	.word	0x42028000
 8004734:	fc00f81e 	.word	0xfc00f81e
 8004738:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004744:	d135      	bne.n	80047b2 <HAL_ADC_Init+0x586>
      {
        /* Count number of ranks available in HAL ADC handle variable */
        uint32_t ADCGroupRegularSequencerRanksCount;

        /* Parse all ranks from 1 to 8 */
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e00d      	b.n	8004768 <HAL_ADC_Init+0x53c>
             ADCGroupRegularSequencerRanksCount++)
        {
          /* Check each sequencer rank until value of end of sequence */
          if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	2b0f      	cmp	r3, #15
 8004760:	d006      	beq.n	8004770 <HAL_ADC_Init+0x544>
             ADCGroupRegularSequencerRanksCount++)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	3301      	adds	r3, #1
 8004766:	61bb      	str	r3, [r7, #24]
        for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL);                    \
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b07      	cmp	r3, #7
 800476c:	d9ee      	bls.n	800474c <HAL_ADC_Init+0x520>
 800476e:	e000      	b.n	8004772 <HAL_ADC_Init+0x546>
              ADC_CHSELR_SQ1)
          {
            break;
 8004770:	bf00      	nop
          }
        }

        if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d108      	bne.n	800478a <HAL_ADC_Init+0x55e>
        {
          /* Set ADC group regular sequencer:                                   */
          /* Set sequencer scan length by clearing ranks above rank 1           */
          /* and do not modify rank 1 value.                                    */
          SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f062 020f 	orn	r2, r2, #15
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
 8004788:	e013      	b.n	80047b2 <HAL_ADC_Init+0x586>
          /*          therefore after the first call of "HAL_ADC_Init()",        */
          /*          each rank corresponding to parameter "NbrOfConversion"    */
          /*          must be set using "HAL_ADC_ConfigChannel()".              */
          /*  - Set sequencer scan length by clearing ranks above maximum rank  */
          /*    and do not modify other ranks value.                            */
          MODIFY_REG(hadc->Instance->CHSELR,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	3b01      	subs	r3, #1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	f003 031c 	and.w	r3, r3, #28
 800479c:	f06f 020f 	mvn.w	r2, #15
 80047a0:	fa02 f103 	lsl.w	r1, r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <HAL_ADC_Init+0x5f0>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	6a3a      	ldr	r2, [r7, #32]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d10b      	bne.n	80047da <HAL_ADC_Init+0x5ae>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047cc:	f023 0303 	bic.w	r3, r3, #3
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80047d8:	e01a      	b.n	8004810 <HAL_ADC_Init+0x5e4>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047de:	f023 0312 	bic.w	r3, r3, #18
 80047e2:	f043 0210 	orr.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80047fc:	e008      	b.n	8004810 <HAL_ADC_Init+0x5e4>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004802:	f043 0210 	orr.w	r2, r3, #16
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8004810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004814:	4618      	mov	r0, r3
 8004816:	3728      	adds	r7, #40	; 0x28
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	833ffff3 	.word	0x833ffff3

08004820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <__NVIC_SetPriorityGrouping+0x44>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800483c:	4013      	ands	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800484c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004852:	4a04      	ldr	r2, [pc, #16]	; (8004864 <__NVIC_SetPriorityGrouping+0x44>)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	60d3      	str	r3, [r2, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <__NVIC_GetPriorityGrouping+0x18>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	f003 0307 	and.w	r3, r3, #7
}
 8004876:	4618      	mov	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	2b00      	cmp	r3, #0
 8004894:	db0b      	blt.n	80048ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	f003 021f 	and.w	r2, r3, #31
 800489c:	4907      	ldr	r1, [pc, #28]	; (80048bc <__NVIC_EnableIRQ+0x38>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2001      	movs	r0, #1
 80048a6:	fa00 f202 	lsl.w	r2, r0, r2
 80048aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	e000e100 	.word	0xe000e100

080048c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	6039      	str	r1, [r7, #0]
 80048ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db0a      	blt.n	80048ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	490c      	ldr	r1, [pc, #48]	; (800490c <__NVIC_SetPriority+0x4c>)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	0112      	lsls	r2, r2, #4
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	440b      	add	r3, r1
 80048e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048e8:	e00a      	b.n	8004900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	4908      	ldr	r1, [pc, #32]	; (8004910 <__NVIC_SetPriority+0x50>)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	3b04      	subs	r3, #4
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	761a      	strb	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000e100 	.word	0xe000e100
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f1c3 0307 	rsb	r3, r3, #7
 800492e:	2b04      	cmp	r3, #4
 8004930:	bf28      	it	cs
 8004932:	2304      	movcs	r3, #4
 8004934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3304      	adds	r3, #4
 800493a:	2b06      	cmp	r3, #6
 800493c:	d902      	bls.n	8004944 <NVIC_EncodePriority+0x30>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3b03      	subs	r3, #3
 8004942:	e000      	b.n	8004946 <NVIC_EncodePriority+0x32>
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	401a      	ands	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800495c:	f04f 31ff 	mov.w	r1, #4294967295
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa01 f303 	lsl.w	r3, r1, r3
 8004966:	43d9      	mvns	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	4313      	orrs	r3, r2
         );
}
 800496e:	4618      	mov	r0, r3
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
	...

0800497c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3b01      	subs	r3, #1
 8004988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800498c:	d301      	bcc.n	8004992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800498e:	2301      	movs	r3, #1
 8004990:	e00f      	b.n	80049b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <SysTick_Config+0x40>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800499a:	210f      	movs	r1, #15
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	f7ff ff8e 	bl	80048c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <SysTick_Config+0x40>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <SysTick_Config+0x40>)
 80049ac:	2207      	movs	r2, #7
 80049ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	e000e010 	.word	0xe000e010

080049c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff29 	bl	8004820 <__NVIC_SetPriorityGrouping>
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4603      	mov	r3, r0
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
 80049e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049e4:	f7ff ff40 	bl	8004868 <__NVIC_GetPriorityGrouping>
 80049e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7ff ff90 	bl	8004914 <NVIC_EncodePriority>
 80049f4:	4602      	mov	r2, r0
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	4611      	mov	r1, r2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff ff5f 	bl	80048c0 <__NVIC_SetPriority>
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	4603      	mov	r3, r0
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff33 	bl	8004884 <__NVIC_EnableIRQ>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ffa4 	bl	800497c <SysTick_Config>
 8004a34:	4603      	mov	r3, r0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	; 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004a52:	e1ba      	b.n	8004dca <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 81aa 	beq.w	8004dc4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a55      	ldr	r2, [pc, #340]	; (8004bc8 <HAL_GPIO_Init+0x188>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d15d      	bne.n	8004b34 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8004a7e:	2201      	movs	r2, #1
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 0201 	and.w	r2, r3, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004aa8:	4a48      	ldr	r2, [pc, #288]	; (8004bcc <HAL_GPIO_Init+0x18c>)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ab0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004ab2:	4a46      	ldr	r2, [pc, #280]	; (8004bcc <HAL_GPIO_Init+0x18c>)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4413      	add	r3, r2
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	08da      	lsrs	r2, r3, #3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3208      	adds	r2, #8
 8004ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	220f      	movs	r2, #15
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	220b      	movs	r2, #11
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	08da      	lsrs	r2, r3, #3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	3208      	adds	r2, #8
 8004afe:	69f9      	ldr	r1, [r7, #28]
 8004b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	2203      	movs	r2, #3
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	2202      	movs	r2, #2
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e067      	b.n	8004c04 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x104>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b12      	cmp	r3, #18
 8004b42:	d145      	bne.n	8004bd0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	08da      	lsrs	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f003 020f 	and.w	r2, r3, #15
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	08da      	lsrs	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3208      	adds	r2, #8
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0203 	and.w	r2, r3, #3
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e01e      	b.n	8004c04 <HAL_GPIO_Init+0x1c4>
 8004bc6:	bf00      	nop
 8004bc8:	46020000 	.word	0x46020000
 8004bcc:	0800dc38 	.word	0x0800dc38
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	2203      	movs	r2, #3
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0203 	and.w	r2, r3, #3
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d00b      	beq.n	8004c24 <HAL_GPIO_Init+0x1e4>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d007      	beq.n	8004c24 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c18:	2b11      	cmp	r3, #17
 8004c1a:	d003      	beq.n	8004c24 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b12      	cmp	r3, #18
 8004c22:	d130      	bne.n	8004c86 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	2203      	movs	r2, #3
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	69fa      	ldr	r2, [r7, #28]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	091b      	lsrs	r3, r3, #4
 8004c70:	f003 0201 	and.w	r2, r3, #1
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	69fa      	ldr	r2, [r7, #28]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d017      	beq.n	8004cbe <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	2203      	movs	r2, #3
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d07c      	beq.n	8004dc4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004cca:	4a47      	ldr	r2, [pc, #284]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	4013      	ands	r3, r2
 8004cec:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0a9a      	lsrs	r2, r3, #10
 8004cf2:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <HAL_GPIO_Init+0x3ac>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	f002 0203 	and.w	r2, r2, #3
 8004cfc:	00d2      	lsls	r2, r2, #3
 8004cfe:	4093      	lsls	r3, r2
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004d06:	4938      	ldr	r1, [pc, #224]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004d14:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004d38:	4a2b      	ldr	r2, [pc, #172]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004d62:	4a21      	ldr	r2, [pc, #132]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004d68:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004d8e:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004dbc:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <HAL_GPIO_Init+0x3a8>)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f ae3d 	bne.w	8004a54 <HAL_GPIO_Init+0x14>
  }
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	3724      	adds	r7, #36	; 0x24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	46022000 	.word	0x46022000
 8004dec:	002f7f7f 	.word	0x002f7f7f

08004df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e00:	787b      	ldrb	r3, [r7, #1]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004e0c:	e002      	b.n	8004e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004e0e:	887a      	ldrh	r2, [r7, #2]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	b08f      	sub	sp, #60	; 0x3c
 8004e24:	af0a      	add	r7, sp, #40	; 0x28
 8004e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e116      	b.n	8005060 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fe ff3f 	bl	8003cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2203      	movs	r2, #3
 8004e56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f006 fb3b 	bl	800b4ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	687e      	ldr	r6, [r7, #4]
 8004e7e:	466d      	mov	r5, sp
 8004e80:	f106 0410 	add.w	r4, r6, #16
 8004e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e90:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e94:	1d33      	adds	r3, r6, #4
 8004e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f006 fa58 	bl	800b34e <USB_CoreInit>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0d7      	b.n	8005060 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f006 fb29 	bl	800b50e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
 8004ec0:	e04a      	b.n	8004f58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ec2:	7bfa      	ldrb	r2, [r7, #15]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	333d      	adds	r3, #61	; 0x3d
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	333c      	adds	r3, #60	; 0x3c
 8004ee6:	7bfa      	ldrb	r2, [r7, #15]
 8004ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	b298      	uxth	r0, r3
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	3344      	adds	r3, #68	; 0x44
 8004efe:	4602      	mov	r2, r0
 8004f00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f02:	7bfa      	ldrb	r2, [r7, #15]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3340      	adds	r3, #64	; 0x40
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	3348      	adds	r3, #72	; 0x48
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f2a:	7bfa      	ldrb	r2, [r7, #15]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	334c      	adds	r3, #76	; 0x4c
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f3e:	7bfa      	ldrb	r2, [r7, #15]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3354      	adds	r3, #84	; 0x54
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	3301      	adds	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3af      	bcc.n	8004ec2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
 8004f66:	e044      	b.n	8004ff2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f7e:	7bfa      	ldrb	r2, [r7, #15]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
 8004ff2:	7bfa      	ldrb	r2, [r7, #15]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3b5      	bcc.n	8004f68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	687e      	ldr	r6, [r7, #4]
 8005004:	466d      	mov	r5, sp
 8005006:	f106 0410 	add.w	r4, r6, #16
 800500a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800500c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800500e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005012:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005016:	e885 0003 	stmia.w	r5, {r0, r1}
 800501a:	1d33      	adds	r3, r6, #4
 800501c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800501e:	6838      	ldr	r0, [r7, #0]
 8005020:	f006 fac2 	bl	800b5a8 <USB_DevInit>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e014      	b.n	8005060 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	2b01      	cmp	r3, #1
 800504c:	d102      	bne.n	8005054 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 ff38 	bl	8005ec4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f006 fdd5 	bl	800bc08 <USB_DevDisconnect>

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005068 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b08d      	sub	sp, #52	; 0x34
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f006 fe76 	bl	800bd70 <USB_GetMode>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 84b7 	bne.w	80059fa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f006 fdda 	bl	800bc4a <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 84ad 	beq.w	80059f8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f006 fdc7 	bl	800bc4a <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d107      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f002 0202 	and.w	r2, r2, #2
 80050d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f006 fdb5 	bl	800bc4a <USB_ReadInterrupts>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	2b10      	cmp	r3, #16
 80050e8:	d161      	bne.n	80051ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0210 	bic.w	r2, r2, #16
 80050f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 020f 	and.w	r2, r3, #15
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4413      	add	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4413      	add	r3, r2
 8005116:	3304      	adds	r3, #4
 8005118:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	0c5b      	lsrs	r3, r3, #17
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	2b02      	cmp	r3, #2
 8005124:	d124      	bne.n	8005170 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d035      	beq.n	800519e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800513c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005140:	b29b      	uxth	r3, r3
 8005142:	461a      	mov	r2, r3
 8005144:	6a38      	ldr	r0, [r7, #32]
 8005146:	f006 fd07 	bl	800bb58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005156:	441a      	add	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005168:	441a      	add	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
 800516e:	e016      	b.n	800519e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	0c5b      	lsrs	r3, r3, #17
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2b06      	cmp	r3, #6
 800517a:	d110      	bne.n	800519e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005182:	2208      	movs	r2, #8
 8005184:	4619      	mov	r1, r3
 8005186:	6a38      	ldr	r0, [r7, #32]
 8005188:	f006 fce6 	bl	800bb58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005198:	441a      	add	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0210 	orr.w	r2, r2, #16
 80051ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f006 fd49 	bl	800bc4a <USB_ReadInterrupts>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c2:	f040 80a7 	bne.w	8005314 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f006 fd4e 	bl	800bc70 <USB_ReadDevAllOutEpInterrupt>
 80051d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051d6:	e099      	b.n	800530c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 808e 	beq.w	8005300 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	4611      	mov	r1, r2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f006 fd72 	bl	800bcd8 <USB_ReadDevOutEPInterrupt>
 80051f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00c      	beq.n	800521a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	461a      	mov	r2, r3
 800520e:	2301      	movs	r3, #1
 8005210:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fd27 	bl	8005c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	461a      	mov	r2, r3
 8005232:	2308      	movs	r3, #8
 8005234:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fdfd 	bl	8005e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	461a      	mov	r2, r3
 8005256:	2310      	movs	r3, #16
 8005258:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d030      	beq.n	80052c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d109      	bne.n	8005284 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005282:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005286:	4613      	mov	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	3304      	adds	r3, #4
 8005298:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	78db      	ldrb	r3, [r3, #3]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d108      	bne.n	80052b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fbf0 	bl	8005a94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	461a      	mov	r2, r3
 80052c2:	2302      	movs	r3, #2
 80052c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	461a      	mov	r2, r3
 80052de:	2320      	movs	r3, #32
 80052e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	461a      	mov	r2, r3
 80052fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	3301      	adds	r3, #1
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	f47f af62 	bne.w	80051d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f006 fc96 	bl	800bc4a <USB_ReadInterrupts>
 800531e:	4603      	mov	r3, r0
 8005320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005328:	f040 80db 	bne.w	80054e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f006 fcb7 	bl	800bca4 <USB_ReadDevAllInEpInterrupt>
 8005336:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800533c:	e0cd      	b.n	80054da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80c2 	beq.w	80054ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f006 fcdd 	bl	800bd14 <USB_ReadDevInEPInterrupt>
 800535a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d057      	beq.n	8005416 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	2201      	movs	r2, #1
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	43db      	mvns	r3, r3
 8005380:	69f9      	ldr	r1, [r7, #28]
 8005382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005386:	4013      	ands	r3, r2
 8005388:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	461a      	mov	r2, r3
 8005398:	2301      	movs	r3, #1
 800539a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d132      	bne.n	800540a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a8:	4613      	mov	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	334c      	adds	r3, #76	; 0x4c
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4403      	add	r3, r0
 80053c4:	3348      	adds	r3, #72	; 0x48
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4419      	add	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4403      	add	r3, r0
 80053d8:	334c      	adds	r3, #76	; 0x4c
 80053da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d113      	bne.n	800540a <HAL_PCD_IRQHandler+0x3a2>
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	4613      	mov	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4413      	add	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	3354      	adds	r3, #84	; 0x54
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005402:	461a      	mov	r2, r3
 8005404:	2101      	movs	r1, #1
 8005406:	f006 fce5 	bl	800bdd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fb01 	bl	8005a18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	461a      	mov	r2, r3
 800542e:	2308      	movs	r3, #8
 8005430:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	461a      	mov	r2, r3
 800544a:	2310      	movs	r3, #16
 800544c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	461a      	mov	r2, r3
 8005466:	2340      	movs	r3, #64	; 0x40
 8005468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d023      	beq.n	80054bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005476:	6a38      	ldr	r0, [r7, #32]
 8005478:	f006 f9e4 	bl	800b844 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800547c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547e:	4613      	mov	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	3338      	adds	r3, #56	; 0x38
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4413      	add	r3, r2
 800548c:	3304      	adds	r3, #4
 800548e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	78db      	ldrb	r3, [r3, #3]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d108      	bne.n	80054aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2200      	movs	r2, #0
 800549c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fb01 	bl	8005aac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	461a      	mov	r2, r3
 80054b8:	2302      	movs	r3, #2
 80054ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb40 	bl	8005b4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	3301      	adds	r3, #1
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f af2e 	bne.w	800533e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f006 fbaf 	bl	800bc4a <USB_ReadInterrupts>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f6:	d122      	bne.n	800553e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005512:	2b01      	cmp	r3, #1
 8005514:	d108      	bne.n	8005528 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800551e:	2100      	movs	r1, #0
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fcf3 	bl	8005f0c <HAL_PCDEx_LPM_Callback>
 8005526:	e002      	b.n	800552e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 faa9 	bl	8005a80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800553c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f006 fb81 	bl	800bc4a <USB_ReadInterrupts>
 8005548:	4603      	mov	r3, r0
 800554a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005552:	d112      	bne.n	800557a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	d102      	bne.n	800556a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fa81 	bl	8005a6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005578:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f006 fb63 	bl	800bc4a <USB_ReadInterrupts>
 8005584:	4603      	mov	r3, r0
 8005586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800558a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558e:	d121      	bne.n	80055d4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800559e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d111      	bne.n	80055ce <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	f003 020f 	and.w	r2, r3, #15
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80055c4:	2101      	movs	r1, #1
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fca0 	bl	8005f0c <HAL_PCDEx_LPM_Callback>
 80055cc:	e002      	b.n	80055d4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa4c 	bl	8005a6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f006 fb36 	bl	800bc4a <USB_ReadInterrupts>
 80055de:	4603      	mov	r3, r0
 80055e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	f040 80b7 	bne.w	800575a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2110      	movs	r1, #16
 8005606:	4618      	mov	r0, r3
 8005608:	f006 f91c 	bl	800b844 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800560c:	2300      	movs	r3, #0
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005610:	e046      	b.n	80056a0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	461a      	mov	r2, r3
 8005620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005624:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005640:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005644:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	461a      	mov	r2, r3
 8005654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005658:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005674:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005678:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005694:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005698:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	3301      	adds	r3, #1
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3b3      	bcc.n	8005612 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80056bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d6:	f043 030b 	orr.w	r3, r3, #11
 80056da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	69fa      	ldr	r2, [r7, #28]
 80056e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ec:	f043 030b 	orr.w	r3, r3, #11
 80056f0:	6453      	str	r3, [r2, #68]	; 0x44
 80056f2:	e015      	b.n	8005720 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005702:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005706:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800570a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571a:	f043 030b 	orr.w	r3, r3, #11
 800571e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005732:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005744:	461a      	mov	r2, r3
 8005746:	f006 fb45 	bl	800bdd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f006 fa73 	bl	800bc4a <USB_ReadInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d124      	bne.n	80057ba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f006 fb09 	bl	800bd8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f006 f8dd 	bl	800b93e <USB_GetDevSpeed>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681c      	ldr	r4, [r3, #0]
 8005790:	f001 fe8a 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 8005794:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	4620      	mov	r0, r4
 80057a0:	f005 fe02 	bl	800b3a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f957 	bl	8005a58 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695a      	ldr	r2, [r3, #20]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80057b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f006 fa43 	bl	800bc4a <USB_ReadInterrupts>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d10a      	bne.n	80057e4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f938 	bl	8005a44 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f002 0208 	and.w	r2, r2, #8
 80057e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f006 fa2e 	bl	800bc4a <USB_ReadInterrupts>
 80057ee:	4603      	mov	r3, r0
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d122      	bne.n	800583e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005804:	2301      	movs	r3, #1
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e014      	b.n	8005834 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	b2db      	uxtb	r3, r3
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f95f 	bl	8005aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	3301      	adds	r3, #1
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	429a      	cmp	r2, r3
 800583c:	d3e5      	bcc.n	800580a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f006 fa01 	bl	800bc4a <USB_ReadInterrupts>
 8005848:	4603      	mov	r3, r0
 800584a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005852:	d13b      	bne.n	80058cc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e02b      	b.n	80058b2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	3340      	adds	r3, #64	; 0x40
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d115      	bne.n	80058ac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005880:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005882:	2b00      	cmp	r3, #0
 8005884:	da12      	bge.n	80058ac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	333f      	adds	r3, #63	; 0x3f
 8005896:	2201      	movs	r2, #1
 8005898:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f920 	bl	8005aec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	3301      	adds	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3ce      	bcc.n	800585a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80058ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f006 f9ba 	bl	800bc4a <USB_ReadInterrupts>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058e0:	d155      	bne.n	800598e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058e2:	2301      	movs	r3, #1
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
 80058e6:	e045      	b.n	8005974 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d12e      	bne.n	800596e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005910:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005912:	2b00      	cmp	r3, #0
 8005914:	da2b      	bge.n	800596e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005922:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005926:	429a      	cmp	r2, r3
 8005928:	d121      	bne.n	800596e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800596a:	6053      	str	r3, [r2, #4]
            break;
 800596c:	e007      	b.n	800597e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	3301      	adds	r3, #1
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	429a      	cmp	r2, r3
 800597c:	d3b4      	bcc.n	80058e8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695a      	ldr	r2, [r3, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800598c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f006 f959 	bl	800bc4a <USB_ReadInterrupts>
 8005998:	4603      	mov	r3, r0
 800599a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d10a      	bne.n	80059ba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f88d 	bl	8005ac4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695a      	ldr	r2, [r3, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f006 f943 	bl	800bc4a <USB_ReadInterrupts>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d115      	bne.n	80059fa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f879 	bl	8005ad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	e000      	b.n	80059fa <HAL_PCD_IRQHandler+0x992>
      return;
 80059f8:	bf00      	nop
    }
  }
}
 80059fa:	3734      	adds	r7, #52	; 0x34
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}

08005a00 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0c      	bge.n	8005b1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	f003 020f 	and.w	r2, r3, #15
 8005b06:	4613      	mov	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3338      	adds	r3, #56	; 0x38
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e00c      	b.n	8005b34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 ff24 	bl	800b988 <USB_EPStopXfer>
 8005b40:	4603      	mov	r3, r0
 8005b42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b44:	7afb      	ldrb	r3, [r7, #11]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b08a      	sub	sp, #40	; 0x28
 8005b52:	af02      	add	r7, sp, #8
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	3338      	adds	r3, #56	; 0x38
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	3304      	adds	r3, #4
 8005b74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d901      	bls.n	8005b86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e06c      	b.n	8005c60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d902      	bls.n	8005ba2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3303      	adds	r3, #3
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005baa:	e02b      	b.n	8005c04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d902      	bls.n	8005bc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3303      	adds	r3, #3
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6919      	ldr	r1, [r3, #16]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	4603      	mov	r3, r0
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f005 ff78 	bl	800badc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d809      	bhi.n	8005c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d203      	bcs.n	8005c2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1be      	bne.n	8005bac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d811      	bhi.n	8005c5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	2201      	movs	r2, #1
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	6939      	ldr	r1, [r7, #16]
 8005c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	333c      	adds	r3, #60	; 0x3c
 8005c80:	3304      	adds	r3, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d17b      	bne.n	8005d96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4a61      	ldr	r2, [pc, #388]	; (8005e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	f240 80b9 	bls.w	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80b3 	beq.w	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cd0:	6093      	str	r3, [r2, #8]
 8005cd2:	e0a7      	b.n	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	461a      	mov	r2, r3
 8005cec:	2320      	movs	r3, #32
 8005cee:	6093      	str	r3, [r2, #8]
 8005cf0:	e098      	b.n	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f040 8093 	bne.w	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4a4b      	ldr	r2, [pc, #300]	; (8005e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d90f      	bls.n	8005d26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	6093      	str	r3, [r2, #8]
 8005d24:	e07e      	b.n	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	3304      	adds	r3, #4
 8005d3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	0159      	lsls	r1, r3, #5
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	440b      	add	r3, r1
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d52:	1ad2      	subs	r2, r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d114      	bne.n	8005d88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d70:	461a      	mov	r2, r3
 8005d72:	2101      	movs	r1, #1
 8005d74:	f006 f82e 	bl	800bdd4 <USB_EP0_OutStart>
 8005d78:	e006      	b.n	8005d88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	441a      	add	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fe36 	bl	8005a00 <HAL_PCD_DataOutStageCallback>
 8005d94:	e046      	b.n	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	4a26      	ldr	r2, [pc, #152]	; (8005e34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d124      	bne.n	8005de8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db4:	461a      	mov	r2, r3
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	6093      	str	r3, [r2, #8]
 8005dbc:	e032      	b.n	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2320      	movs	r3, #32
 8005dd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff fe0d 	bl	8005a00 <HAL_PCD_DataOutStageCallback>
 8005de6:	e01d      	b.n	8005e24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d114      	bne.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d108      	bne.n	8005e18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e10:	461a      	mov	r2, r3
 8005e12:	2100      	movs	r1, #0
 8005e14:	f005 ffde 	bl	800bdd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fdee 	bl	8005a00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	4f54300a 	.word	0x4f54300a
 8005e34:	4f54310a 	.word	0x4f54310a

08005e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	333c      	adds	r3, #60	; 0x3c
 8005e50:	3304      	adds	r3, #4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d90e      	bls.n	8005e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	461a      	mov	r2, r3
 8005e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff fdcf 	bl	8005a30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d90c      	bls.n	8005eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d108      	bne.n	8005eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005eac:	461a      	mov	r2, r3
 8005eae:	2101      	movs	r1, #1
 8005eb0:	f005 ff90 	bl	800bdd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	4f54300a 	.word	0x4f54300a

08005ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	f043 0303 	orr.w	r3, r3, #3
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005f2c:	4b34      	ldr	r3, [pc, #208]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f34:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d101      	bne.n	8005f42 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e057      	b.n	8005ff2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f48:	d90a      	bls.n	8005f60 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005f4a:	4b2d      	ldr	r3, [pc, #180]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5c:	60d3      	str	r3, [r2, #12]
 8005f5e:	e007      	b.n	8005f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005f60:	4b27      	ldr	r3, [pc, #156]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f68:	4925      	ldr	r1, [pc, #148]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005f70:	4b24      	ldr	r3, [pc, #144]	; (8006004 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a24      	ldr	r2, [pc, #144]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	099b      	lsrs	r3, r3, #6
 8005f7c:	2232      	movs	r2, #50	; 0x32
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	4a21      	ldr	r2, [pc, #132]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	099b      	lsrs	r3, r3, #6
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005f8e:	e002      	b.n	8005f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <HAL_PWREx_ControlVoltageScaling+0x84>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f3      	bne.n	8005f90 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01b      	beq.n	8005fe6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005fae:	4b15      	ldr	r3, [pc, #84]	; (8006004 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a15      	ldr	r2, [pc, #84]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	099b      	lsrs	r3, r3, #6
 8005fba:	2232      	movs	r2, #50	; 0x32
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	4a11      	ldr	r2, [pc, #68]	; (8006008 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	099b      	lsrs	r3, r3, #6
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005fcc:	e002      	b.n	8005fd4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f3      	bne.n	8005fce <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e000      	b.n	8005ff2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	46020800 	.word	0x46020800
 8006004:	2000000c 	.word	0x2000000c
 8006008:	10624dd3 	.word	0x10624dd3

0800600c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <HAL_PWREx_GetVoltageRange+0x18>)
 8006012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	46020800 	.word	0x46020800

08006028 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006030:	4b22      	ldr	r3, [pc, #136]	; (80060bc <HAL_PWREx_ConfigSupply+0x94>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a22      	ldr	r2, [pc, #136]	; (80060c0 <HAL_PWREx_ConfigSupply+0x98>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	2232      	movs	r2, #50	; 0x32
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <HAL_PWREx_ConfigSupply+0x98>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	099b      	lsrs	r3, r3, #6
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d113      	bne.n	800607c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006054:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <HAL_PWREx_ConfigSupply+0x9c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <HAL_PWREx_ConfigSupply+0x9c>)
 800605a:	f023 0302 	bic.w	r3, r3, #2
 800605e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006060:	e002      	b.n	8006068 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3b01      	subs	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006068:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <HAL_PWREx_ConfigSupply+0x9c>)
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b02      	cmp	r3, #2
 8006072:	d116      	bne.n	80060a2 <HAL_PWREx_ConfigSupply+0x7a>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f3      	bne.n	8006062 <HAL_PWREx_ConfigSupply+0x3a>
 800607a:	e012      	b.n	80060a2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <HAL_PWREx_ConfigSupply+0x9c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4a10      	ldr	r2, [pc, #64]	; (80060c4 <HAL_PWREx_ConfigSupply+0x9c>)
 8006082:	f043 0302 	orr.w	r3, r3, #2
 8006086:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006088:	e002      	b.n	8006090 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b01      	subs	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <HAL_PWREx_ConfigSupply+0x9c>)
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <HAL_PWREx_ConfigSupply+0x7a>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f3      	bne.n	800608a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e000      	b.n	80060ae <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	2000000c 	.word	0x2000000c
 80060c0:	10624dd3 	.word	0x10624dd3
 80060c4:	46020800 	.word	0x46020800

080060c8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d6:	6113      	str	r3, [r2, #16]
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	46020800 	.word	0x46020800

080060e8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_PWREx_EnableVddIO2+0x1c>)
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_PWREx_EnableVddIO2+0x1c>)
 80060f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f6:	6113      	str	r3, [r2, #16]
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	46020800 	.word	0x46020800

08006108 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08e      	sub	sp, #56	; 0x38
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006110:	2300      	movs	r3, #0
 8006112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f000 bec3 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006122:	4b9c      	ldr	r3, [pc, #624]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f003 030c 	and.w	r3, r3, #12
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800612c:	4b99      	ldr	r3, [pc, #612]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8172 	beq.w	8006428 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	2b00      	cmp	r3, #0
 8006148:	d007      	beq.n	800615a <HAL_RCC_OscConfig+0x52>
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2b0c      	cmp	r3, #12
 800614e:	f040 80e4 	bne.w	800631a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b01      	cmp	r3, #1
 8006156:	f040 80e0 	bne.w	800631a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800615a:	4b8e      	ldr	r3, [pc, #568]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <HAL_RCC_OscConfig+0x6c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f000 be9a 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006178:	4b86      	ldr	r3, [pc, #536]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_RCC_OscConfig+0x86>
 8006184:	4b83      	ldr	r3, [pc, #524]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800618c:	e005      	b.n	800619a <HAL_RCC_OscConfig+0x92>
 800618e:	4b81      	ldr	r3, [pc, #516]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800619a:	4293      	cmp	r3, r2
 800619c:	d255      	bcs.n	800624a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 f9d3 	bl	8007554 <RCC_SetFlashLatencyFromMSIRange>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f000 be77 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80061ba:	4b76      	ldr	r3, [pc, #472]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4a75      	ldr	r2, [pc, #468]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80061c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061c4:	6093      	str	r3, [r2, #8]
 80061c6:	4b73      	ldr	r3, [pc, #460]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	4970      	ldr	r1, [pc, #448]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80061e0:	d309      	bcc.n	80061f6 <HAL_RCC_OscConfig+0xee>
 80061e2:	4b6c      	ldr	r3, [pc, #432]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f023 021f 	bic.w	r2, r3, #31
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	4969      	ldr	r1, [pc, #420]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60cb      	str	r3, [r1, #12]
 80061f4:	e07e      	b.n	80062f4 <HAL_RCC_OscConfig+0x1ec>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da0a      	bge.n	8006214 <HAL_RCC_OscConfig+0x10c>
 80061fe:	4b65      	ldr	r3, [pc, #404]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	015b      	lsls	r3, r3, #5
 800620c:	4961      	ldr	r1, [pc, #388]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800620e:	4313      	orrs	r3, r2
 8006210:	60cb      	str	r3, [r1, #12]
 8006212:	e06f      	b.n	80062f4 <HAL_RCC_OscConfig+0x1ec>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d30a      	bcc.n	8006234 <HAL_RCC_OscConfig+0x12c>
 800621e:	4b5d      	ldr	r3, [pc, #372]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	4959      	ldr	r1, [pc, #356]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800622e:	4313      	orrs	r3, r2
 8006230:	60cb      	str	r3, [r1, #12]
 8006232:	e05f      	b.n	80062f4 <HAL_RCC_OscConfig+0x1ec>
 8006234:	4b57      	ldr	r3, [pc, #348]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	03db      	lsls	r3, r3, #15
 8006242:	4954      	ldr	r1, [pc, #336]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006244:	4313      	orrs	r3, r2
 8006246:	60cb      	str	r3, [r1, #12]
 8006248:	e054      	b.n	80062f4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800624a:	4b52      	ldr	r3, [pc, #328]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	4a51      	ldr	r2, [pc, #324]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006254:	6093      	str	r3, [r2, #8]
 8006256:	4b4f      	ldr	r3, [pc, #316]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	494c      	ldr	r1, [pc, #304]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006270:	d309      	bcc.n	8006286 <HAL_RCC_OscConfig+0x17e>
 8006272:	4b48      	ldr	r3, [pc, #288]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f023 021f 	bic.w	r2, r3, #31
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	4945      	ldr	r1, [pc, #276]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	60cb      	str	r3, [r1, #12]
 8006284:	e028      	b.n	80062d8 <HAL_RCC_OscConfig+0x1d0>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	da0a      	bge.n	80062a4 <HAL_RCC_OscConfig+0x19c>
 800628e:	4b41      	ldr	r3, [pc, #260]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	015b      	lsls	r3, r3, #5
 800629c:	493d      	ldr	r1, [pc, #244]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	60cb      	str	r3, [r1, #12]
 80062a2:	e019      	b.n	80062d8 <HAL_RCC_OscConfig+0x1d0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d30a      	bcc.n	80062c4 <HAL_RCC_OscConfig+0x1bc>
 80062ae:	4b39      	ldr	r3, [pc, #228]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	4935      	ldr	r1, [pc, #212]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	60cb      	str	r3, [r1, #12]
 80062c2:	e009      	b.n	80062d8 <HAL_RCC_OscConfig+0x1d0>
 80062c4:	4b33      	ldr	r3, [pc, #204]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	03db      	lsls	r3, r3, #15
 80062d2:	4930      	ldr	r1, [pc, #192]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	4618      	mov	r0, r3
 80062e4:	f001 f936 	bl	8007554 <RCC_SetFlashLatencyFromMSIRange>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	f000 bdda 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80062f4:	f001 f8d8 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062f8:	4b27      	ldr	r3, [pc, #156]	; (8006398 <HAL_RCC_OscConfig+0x290>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd fe3f 	bl	8003f80 <HAL_InitTick>
 8006302:	4603      	mov	r3, r0
 8006304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8006308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 808a 	beq.w	8006426 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8006312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006316:	f000 bdc7 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d066      	beq.n	80063f0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006322:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800632e:	f7fd fe71 	bl	8004014 <HAL_GetTick>
 8006332:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006334:	e009      	b.n	800634a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006336:	f7fd fe6d 	bl	8004014 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	2b02      	cmp	r3, #2
 8006342:	d902      	bls.n	800634a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	f000 bdaf 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0ef      	beq.n	8006336 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	4a0e      	ldr	r2, [pc, #56]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800635c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006360:	6093      	str	r3, [r2, #8]
 8006362:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	4909      	ldr	r1, [pc, #36]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006370:	4313      	orrs	r3, r2
 8006372:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800637c:	d30e      	bcc.n	800639c <HAL_RCC_OscConfig+0x294>
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f023 021f 	bic.w	r2, r3, #31
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	4902      	ldr	r1, [pc, #8]	; (8006394 <HAL_RCC_OscConfig+0x28c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	60cb      	str	r3, [r1, #12]
 8006390:	e04a      	b.n	8006428 <HAL_RCC_OscConfig+0x320>
 8006392:	bf00      	nop
 8006394:	46020c00 	.word	0x46020c00
 8006398:	20000010 	.word	0x20000010
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da0a      	bge.n	80063ba <HAL_RCC_OscConfig+0x2b2>
 80063a4:	4b9b      	ldr	r3, [pc, #620]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	015b      	lsls	r3, r3, #5
 80063b2:	4998      	ldr	r1, [pc, #608]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60cb      	str	r3, [r1, #12]
 80063b8:	e036      	b.n	8006428 <HAL_RCC_OscConfig+0x320>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d30a      	bcc.n	80063da <HAL_RCC_OscConfig+0x2d2>
 80063c4:	4b93      	ldr	r3, [pc, #588]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	029b      	lsls	r3, r3, #10
 80063d2:	4990      	ldr	r1, [pc, #576]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60cb      	str	r3, [r1, #12]
 80063d8:	e026      	b.n	8006428 <HAL_RCC_OscConfig+0x320>
 80063da:	4b8e      	ldr	r3, [pc, #568]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	03db      	lsls	r3, r3, #15
 80063e8:	498a      	ldr	r1, [pc, #552]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60cb      	str	r3, [r1, #12]
 80063ee:	e01b      	b.n	8006428 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80063f0:	4b88      	ldr	r3, [pc, #544]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a87      	ldr	r2, [pc, #540]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80063f6:	f023 0301 	bic.w	r3, r3, #1
 80063fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063fc:	f7fd fe0a 	bl	8004014 <HAL_GetTick>
 8006400:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006402:	e009      	b.n	8006418 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006404:	f7fd fe06 	bl	8004014 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d902      	bls.n	8006418 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	f000 bd48 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006418:	4b7e      	ldr	r3, [pc, #504]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1ef      	bne.n	8006404 <HAL_RCC_OscConfig+0x2fc>
 8006424:	e000      	b.n	8006428 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006426:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 8094 	beq.w	800655e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	2b08      	cmp	r3, #8
 800643a:	d005      	beq.n	8006448 <HAL_RCC_OscConfig+0x340>
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2b0c      	cmp	r3, #12
 8006440:	d110      	bne.n	8006464 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b03      	cmp	r3, #3
 8006446:	d10d      	bne.n	8006464 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006448:	4b72      	ldr	r3, [pc, #456]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8083 	beq.w	800655c <HAL_RCC_OscConfig+0x454>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d17e      	bne.n	800655c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f000 bd22 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646c:	d106      	bne.n	800647c <HAL_RCC_OscConfig+0x374>
 800646e:	4b69      	ldr	r3, [pc, #420]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a68      	ldr	r2, [pc, #416]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e041      	b.n	8006500 <HAL_RCC_OscConfig+0x3f8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006484:	d112      	bne.n	80064ac <HAL_RCC_OscConfig+0x3a4>
 8006486:	4b63      	ldr	r3, [pc, #396]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a62      	ldr	r2, [pc, #392]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 800648c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b60      	ldr	r3, [pc, #384]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a5f      	ldr	r2, [pc, #380]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006498:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b5d      	ldr	r3, [pc, #372]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a5c      	ldr	r2, [pc, #368]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e029      	b.n	8006500 <HAL_RCC_OscConfig+0x3f8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80064b4:	d112      	bne.n	80064dc <HAL_RCC_OscConfig+0x3d4>
 80064b6:	4b57      	ldr	r3, [pc, #348]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a56      	ldr	r2, [pc, #344]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b54      	ldr	r3, [pc, #336]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a53      	ldr	r2, [pc, #332]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b51      	ldr	r3, [pc, #324]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a50      	ldr	r2, [pc, #320]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e011      	b.n	8006500 <HAL_RCC_OscConfig+0x3f8>
 80064dc:	4b4d      	ldr	r3, [pc, #308]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a4c      	ldr	r2, [pc, #304]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a49      	ldr	r2, [pc, #292]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	4b47      	ldr	r3, [pc, #284]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a46      	ldr	r2, [pc, #280]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80064fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d014      	beq.n	8006532 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8006508:	f7fd fd84 	bl	8004014 <HAL_GetTick>
 800650c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800650e:	e009      	b.n	8006524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006510:	f7fd fd80 	bl	8004014 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b64      	cmp	r3, #100	; 0x64
 800651c:	d902      	bls.n	8006524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	f000 bcc2 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006524:	4b3b      	ldr	r3, [pc, #236]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0ef      	beq.n	8006510 <HAL_RCC_OscConfig+0x408>
 8006530:	e015      	b.n	800655e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006532:	f7fd fd6f 	bl	8004014 <HAL_GetTick>
 8006536:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006538:	e009      	b.n	800654e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800653a:	f7fd fd6b 	bl	8004014 <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b64      	cmp	r3, #100	; 0x64
 8006546:	d902      	bls.n	800654e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	f000 bcad 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1ef      	bne.n	800653a <HAL_RCC_OscConfig+0x432>
 800655a:	e000      	b.n	800655e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d066      	beq.n	8006638 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2b04      	cmp	r3, #4
 800656e:	d005      	beq.n	800657c <HAL_RCC_OscConfig+0x474>
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2b0c      	cmp	r3, #12
 8006574:	d11a      	bne.n	80065ac <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	2b02      	cmp	r3, #2
 800657a:	d117      	bne.n	80065ac <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657c:	4b25      	ldr	r3, [pc, #148]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <HAL_RCC_OscConfig+0x48e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f000 bc89 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	041b      	lsls	r3, r3, #16
 80065a4:	491b      	ldr	r1, [pc, #108]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065aa:	e045      	b.n	8006638 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d024      	beq.n	80065fe <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80065b4:	4b17      	ldr	r3, [pc, #92]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a16      	ldr	r2, [pc, #88]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80065ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065c0:	f7fd fd28 	bl	8004014 <HAL_GetTick>
 80065c4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065c6:	e009      	b.n	80065dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c8:	f7fd fd24 	bl	8004014 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d902      	bls.n	80065dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	f000 bc66 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0ef      	beq.n	80065c8 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	4907      	ldr	r1, [pc, #28]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	610b      	str	r3, [r1, #16]
 80065fc:	e01c      	b.n	8006638 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a04      	ldr	r2, [pc, #16]	; (8006614 <HAL_RCC_OscConfig+0x50c>)
 8006604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006608:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800660a:	f7fd fd03 	bl	8004014 <HAL_GetTick>
 800660e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006610:	e00c      	b.n	800662c <HAL_RCC_OscConfig+0x524>
 8006612:	bf00      	nop
 8006614:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006618:	f7fd fcfc 	bl	8004014 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d902      	bls.n	800662c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	f000 bc3e 	b.w	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800662c:	4baf      	ldr	r3, [pc, #700]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ef      	bne.n	8006618 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80c7 	beq.w	80067d4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006646:	2300      	movs	r3, #0
 8006648:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664c:	4ba7      	ldr	r3, [pc, #668]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800664e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d111      	bne.n	800667e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	4ba4      	ldr	r3, [pc, #656]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800665c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006660:	4aa2      	ldr	r2, [pc, #648]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800666a:	4ba0      	ldr	r3, [pc, #640]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800666c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800667e:	4b9c      	ldr	r3, [pc, #624]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 8006680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d118      	bne.n	80066bc <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800668a:	4b99      	ldr	r3, [pc, #612]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	4a98      	ldr	r2, [pc, #608]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006696:	f7fd fcbd 	bl	8004014 <HAL_GetTick>
 800669a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800669c:	e008      	b.n	80066b0 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669e:	f7fd fcb9 	bl	8004014 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e3fb      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80066b0:	4b8f      	ldr	r3, [pc, #572]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0f0      	beq.n	800669e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d05f      	beq.n	8006784 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80066c4:	4b89      	ldr	r3, [pc, #548]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80066c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066ca:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699a      	ldr	r2, [r3, #24]
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d037      	beq.n	800674a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e3da      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01b      	beq.n	8006734 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80066fc:	4b7b      	ldr	r3, [pc, #492]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80066fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006702:	4a7a      	ldr	r2, [pc, #488]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006704:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800670c:	f7fd fc82 	bl	8004014 <HAL_GetTick>
 8006710:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006714:	f7fd fc7e 	bl	8004014 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e3c0      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006726:	4b71      	ldr	r3, [pc, #452]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800672c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1ef      	bne.n	8006714 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006734:	4b6d      	ldr	r3, [pc, #436]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800673a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	496a      	ldr	r1, [pc, #424]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800674a:	4b68      	ldr	r3, [pc, #416]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800674c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006750:	4a66      	ldr	r2, [pc, #408]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800675a:	f7fd fc5b 	bl	8004014 <HAL_GetTick>
 800675e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006762:	f7fd fc57 	bl	8004014 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e399      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006774:	4b5d      	ldr	r3, [pc, #372]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800677a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0ef      	beq.n	8006762 <HAL_RCC_OscConfig+0x65a>
 8006782:	e01b      	b.n	80067bc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006784:	4b59      	ldr	r3, [pc, #356]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800678a:	4a58      	ldr	r2, [pc, #352]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800678c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006794:	f7fd fc3e 	bl	8004014 <HAL_GetTick>
 8006798:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679c:	f7fd fc3a 	bl	8004014 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e37c      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80067ae:	4b4f      	ldr	r3, [pc, #316]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80067b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1ef      	bne.n	800679c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c4:	4b49      	ldr	r3, [pc, #292]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80067c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ca:	4a48      	ldr	r2, [pc, #288]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80067cc:	f023 0304 	bic.w	r3, r3, #4
 80067d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8112 	beq.w	8006a06 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e8:	4b40      	ldr	r3, [pc, #256]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80067ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d111      	bne.n	800681a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f6:	4b3d      	ldr	r3, [pc, #244]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80067f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067fc:	4a3b      	ldr	r2, [pc, #236]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80067fe:	f043 0304 	orr.w	r3, r3, #4
 8006802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800681a:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d118      	bne.n	8006858 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006826:	4b32      	ldr	r3, [pc, #200]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	4a31      	ldr	r2, [pc, #196]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006832:	f7fd fbef 	bl	8004014 <HAL_GetTick>
 8006836:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683a:	f7fd fbeb 	bl	8004014 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e32d      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800684c:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <HAL_RCC_OscConfig+0x7e8>)
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01f      	beq.n	80068a4 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d010      	beq.n	8006892 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006870:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006876:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006878:	f043 0304 	orr.w	r3, r3, #4
 800687c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006886:	4a19      	ldr	r2, [pc, #100]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006890:	e018      	b.n	80068c4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006892:	4b16      	ldr	r3, [pc, #88]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 8006894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80068a2:	e00f      	b.n	80068c4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80068a4:	4b11      	ldr	r3, [pc, #68]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80068a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068aa:	4a10      	ldr	r2, [pc, #64]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80068b4:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80068b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ba:	4a0c      	ldr	r2, [pc, #48]	; (80068ec <HAL_RCC_OscConfig+0x7e4>)
 80068bc:	f023 0304 	bic.w	r3, r3, #4
 80068c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d058      	beq.n	800697e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80068cc:	f7fd fba2 	bl	8004014 <HAL_GetTick>
 80068d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068d2:	e00f      	b.n	80068f4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d4:	f7fd fb9e 	bl	8004014 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d906      	bls.n	80068f4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e2de      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
 80068ea:	bf00      	nop
 80068ec:	46020c00 	.word	0x46020c00
 80068f0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068f4:	4b9c      	ldr	r3, [pc, #624]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80068f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0e8      	beq.n	80068d4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01b      	beq.n	8006946 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800690e:	4b96      	ldr	r3, [pc, #600]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006914:	4a94      	ldr	r2, [pc, #592]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800691e:	e00a      	b.n	8006936 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006920:	f7fd fb78 	bl	8004014 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e2b8      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006936:	4b8c      	ldr	r3, [pc, #560]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0ed      	beq.n	8006920 <HAL_RCC_OscConfig+0x818>
 8006944:	e053      	b.n	80069ee <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006946:	4b88      	ldr	r3, [pc, #544]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800694c:	4a86      	ldr	r2, [pc, #536]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 800694e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006956:	e00a      	b.n	800696e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fd fb5c 	bl	8004014 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	; 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e29c      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800696e:	4b7e      	ldr	r3, [pc, #504]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1ed      	bne.n	8006958 <HAL_RCC_OscConfig+0x850>
 800697c:	e037      	b.n	80069ee <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800697e:	f7fd fb49 	bl	8004014 <HAL_GetTick>
 8006982:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fd fb45 	bl	8004014 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e285      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800699c:	4b72      	ldr	r3, [pc, #456]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 800699e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ed      	bne.n	8006986 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80069aa:	4b6f      	ldr	r3, [pc, #444]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80069ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01a      	beq.n	80069ee <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80069b8:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80069ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069be:	4a6a      	ldr	r2, [pc, #424]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80069c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80069c8:	e00a      	b.n	80069e0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fd fb23 	bl	8004014 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e263      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80069e0:	4b61      	ldr	r3, [pc, #388]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80069e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ed      	bne.n	80069ca <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d107      	bne.n	8006a06 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f6:	4b5c      	ldr	r3, [pc, #368]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80069f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069fc:	4a5a      	ldr	r2, [pc, #360]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 80069fe:	f023 0304 	bic.w	r3, r3, #4
 8006a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d036      	beq.n	8006a80 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d019      	beq.n	8006a4e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006a1a:	4b53      	ldr	r3, [pc, #332]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a52      	ldr	r2, [pc, #328]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a24:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a26:	f7fd faf5 	bl	8004014 <HAL_GetTick>
 8006a2a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a2e:	f7fd faf1 	bl	8004014 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e233      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a40:	4b49      	ldr	r3, [pc, #292]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <HAL_RCC_OscConfig+0x926>
 8006a4c:	e018      	b.n	8006a80 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006a4e:	4b46      	ldr	r3, [pc, #280]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a45      	ldr	r2, [pc, #276]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a58:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a5a:	f7fd fadb 	bl	8004014 <HAL_GetTick>
 8006a5e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a62:	f7fd fad7 	bl	8004014 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e219      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a74:	4b3c      	ldr	r3, [pc, #240]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f0      	bne.n	8006a62 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d036      	beq.n	8006afa <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d019      	beq.n	8006ac8 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006a94:	4b34      	ldr	r3, [pc, #208]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a33      	ldr	r2, [pc, #204]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006aa0:	f7fd fab8 	bl	8004014 <HAL_GetTick>
 8006aa4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006aa6:	e008      	b.n	8006aba <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006aa8:	f7fd fab4 	bl	8004014 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e1f6      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006aba:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f0      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x9a0>
 8006ac6:	e018      	b.n	8006afa <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006ac8:	4b27      	ldr	r3, [pc, #156]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006ad4:	f7fd fa9e 	bl	8004014 <HAL_GetTick>
 8006ad8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006adc:	f7fd fa9a 	bl	8004014 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e1dc      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006aee:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d07f      	beq.n	8006c06 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d062      	beq.n	8006bd4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006b0e:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b18:	6093      	str	r3, [r2, #8]
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	4910      	ldr	r1, [pc, #64]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006b34:	d309      	bcc.n	8006b4a <HAL_RCC_OscConfig+0xa42>
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f023 021f 	bic.w	r2, r3, #31
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	4909      	ldr	r1, [pc, #36]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60cb      	str	r3, [r1, #12]
 8006b48:	e02a      	b.n	8006ba0 <HAL_RCC_OscConfig+0xa98>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da0c      	bge.n	8006b6c <HAL_RCC_OscConfig+0xa64>
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	015b      	lsls	r3, r3, #5
 8006b60:	4901      	ldr	r1, [pc, #4]	; (8006b68 <HAL_RCC_OscConfig+0xa60>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60cb      	str	r3, [r1, #12]
 8006b66:	e01b      	b.n	8006ba0 <HAL_RCC_OscConfig+0xa98>
 8006b68:	46020c00 	.word	0x46020c00
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d30a      	bcc.n	8006b8c <HAL_RCC_OscConfig+0xa84>
 8006b76:	4ba5      	ldr	r3, [pc, #660]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	49a1      	ldr	r1, [pc, #644]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60cb      	str	r3, [r1, #12]
 8006b8a:	e009      	b.n	8006ba0 <HAL_RCC_OscConfig+0xa98>
 8006b8c:	4b9f      	ldr	r3, [pc, #636]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	03db      	lsls	r3, r3, #15
 8006b9a:	499c      	ldr	r1, [pc, #624]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006ba0:	4b9a      	ldr	r3, [pc, #616]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a99      	ldr	r2, [pc, #612]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006ba6:	f043 0310 	orr.w	r3, r3, #16
 8006baa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006bac:	f7fd fa32 	bl	8004014 <HAL_GetTick>
 8006bb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006bb4:	f7fd fa2e 	bl	8004014 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e170      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006bc6:	4b91      	ldr	r3, [pc, #580]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCC_OscConfig+0xaac>
 8006bd2:	e018      	b.n	8006c06 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006bd4:	4b8d      	ldr	r3, [pc, #564]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a8c      	ldr	r2, [pc, #560]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006be0:	f7fd fa18 	bl	8004014 <HAL_GetTick>
 8006be4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006be8:	f7fd fa14 	bl	8004014 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e156      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006bfa:	4b84      	ldr	r3, [pc, #528]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 814b 	beq.w	8006ea6 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c16:	4b7d      	ldr	r3, [pc, #500]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b0c      	cmp	r3, #12
 8006c20:	f000 80fa 	beq.w	8006e18 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	f040 80cc 	bne.w	8006dc6 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006c2e:	4b77      	ldr	r3, [pc, #476]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a76      	ldr	r2, [pc, #472]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c3a:	f7fd f9eb 	bl	8004014 <HAL_GetTick>
 8006c3e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c42:	f7fd f9e7 	bl	8004014 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e129      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c54:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f0      	bne.n	8006c42 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c60:	4b6a      	ldr	r3, [pc, #424]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d111      	bne.n	8006c92 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006c6e:	4b67      	ldr	r3, [pc, #412]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c74:	4a65      	ldr	r2, [pc, #404]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c76:	f043 0304 	orr.w	r3, r3, #4
 8006c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006c7e:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006c92:	4b5f      	ldr	r3, [pc, #380]	; (8006e10 <HAL_RCC_OscConfig+0xd08>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c9e:	d102      	bne.n	8006ca6 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006ca6:	4b5a      	ldr	r3, [pc, #360]	; (8006e10 <HAL_RCC_OscConfig+0xd08>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	4a59      	ldr	r2, [pc, #356]	; (8006e10 <HAL_RCC_OscConfig+0xd08>)
 8006cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cb0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006cb2:	4b56      	ldr	r3, [pc, #344]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cba:	f023 0303 	bic.w	r3, r3, #3
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006cc6:	3a01      	subs	r2, #1
 8006cc8:	0212      	lsls	r2, r2, #8
 8006cca:	4311      	orrs	r1, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	494e      	ldr	r1, [pc, #312]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	628b      	str	r3, [r1, #40]	; 0x28
 8006cd8:	4b4c      	ldr	r3, [pc, #304]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cdc:	4b4d      	ldr	r3, [pc, #308]	; (8006e14 <HAL_RCC_OscConfig+0xd0c>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	0252      	lsls	r2, r2, #9
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	4311      	orrs	r1, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006cfa:	3a01      	subs	r2, #1
 8006cfc:	0412      	lsls	r2, r2, #16
 8006cfe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006d02:	4311      	orrs	r1, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006d08:	3a01      	subs	r2, #1
 8006d0a:	0612      	lsls	r2, r2, #24
 8006d0c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006d10:	430a      	orrs	r2, r1
 8006d12:	493e      	ldr	r1, [pc, #248]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006d18:	4b3c      	ldr	r3, [pc, #240]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	4a3b      	ldr	r2, [pc, #236]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d1e:	f023 0310 	bic.w	r3, r3, #16
 8006d22:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006d24:	4b39      	ldr	r3, [pc, #228]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d34:	00d2      	lsls	r2, r2, #3
 8006d36:	4935      	ldr	r1, [pc, #212]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d3c:	4b33      	ldr	r3, [pc, #204]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	4a32      	ldr	r2, [pc, #200]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d42:	f043 0310 	orr.w	r3, r3, #16
 8006d46:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006d48:	4b30      	ldr	r3, [pc, #192]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	f023 020c 	bic.w	r2, r3, #12
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	492d      	ldr	r1, [pc, #180]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8006d5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d105      	bne.n	8006d6e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006d62:	4b2b      	ldr	r3, [pc, #172]	; (8006e10 <HAL_RCC_OscConfig+0xd08>)
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4a2a      	ldr	r2, [pc, #168]	; (8006e10 <HAL_RCC_OscConfig+0xd08>)
 8006d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d6c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006d6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d107      	bne.n	8006d86 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006d76:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7c:	4a23      	ldr	r2, [pc, #140]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d7e:	f023 0304 	bic.w	r3, r3, #4
 8006d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d86:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	4a20      	ldr	r2, [pc, #128]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d90:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006d92:	4b1e      	ldr	r3, [pc, #120]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1d      	ldr	r2, [pc, #116]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d9c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d9e:	f7fd f939 	bl	8004014 <HAL_GetTick>
 8006da2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006da4:	e008      	b.n	8006db8 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da6:	f7fd f935 	bl	8004014 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d901      	bls.n	8006db8 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e077      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006db8:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0f0      	beq.n	8006da6 <HAL_RCC_OscConfig+0xc9e>
 8006dc4:	e06f      	b.n	8006ea6 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dd0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006dd2:	f7fd f91f 	bl	8004014 <HAL_GetTick>
 8006dd6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dda:	f7fd f91b 	bl	8004014 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e05d      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	4a03      	ldr	r2, [pc, #12]	; (8006e0c <HAL_RCC_OscConfig+0xd04>)
 8006dfe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006e02:	f023 0303 	bic.w	r3, r3, #3
 8006e06:	6293      	str	r3, [r2, #40]	; 0x28
 8006e08:	e04d      	b.n	8006ea6 <HAL_RCC_OscConfig+0xd9e>
 8006e0a:	bf00      	nop
 8006e0c:	46020c00 	.word	0x46020c00
 8006e10:	46020800 	.word	0x46020800
 8006e14:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006e18:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <HAL_RCC_OscConfig+0xda8>)
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e1e:	4b24      	ldr	r3, [pc, #144]	; (8006eb0 <HAL_RCC_OscConfig+0xda8>)
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d03a      	beq.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0203 	and.w	r2, r3, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d133      	bne.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d12a      	bne.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	0b1b      	lsrs	r3, r3, #12
 8006e50:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d122      	bne.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e66:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d11a      	bne.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	0a5b      	lsrs	r3, r3, #9
 8006e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e78:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d111      	bne.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d108      	bne.n	8006ea2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	0e1b      	lsrs	r3, r3, #24
 8006e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d001      	beq.n	8006ea6 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3738      	adds	r7, #56	; 0x38
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	46020c00 	.word	0x46020c00

08006eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e1d9      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec8:	4b9b      	ldr	r3, [pc, #620]	; (8007138 <HAL_RCC_ClockConfig+0x284>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d910      	bls.n	8006ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed6:	4b98      	ldr	r3, [pc, #608]	; (8007138 <HAL_RCC_ClockConfig+0x284>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 020f 	bic.w	r2, r3, #15
 8006ede:	4996      	ldr	r1, [pc, #600]	; (8007138 <HAL_RCC_ClockConfig+0x284>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	4b94      	ldr	r3, [pc, #592]	; (8007138 <HAL_RCC_ClockConfig+0x284>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e1c1      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	4b8c      	ldr	r3, [pc, #560]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d908      	bls.n	8006f26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006f14:	4b89      	ldr	r3, [pc, #548]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	4986      	ldr	r1, [pc, #536]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d012      	beq.n	8006f58 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	4b81      	ldr	r3, [pc, #516]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	091b      	lsrs	r3, r3, #4
 8006f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d909      	bls.n	8006f58 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006f44:	4b7d      	ldr	r3, [pc, #500]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	497a      	ldr	r1, [pc, #488]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d010      	beq.n	8006f86 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	4b74      	ldr	r3, [pc, #464]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d908      	bls.n	8006f86 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006f74:	4b71      	ldr	r3, [pc, #452]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	496e      	ldr	r1, [pc, #440]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d010      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	4b69      	ldr	r3, [pc, #420]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d908      	bls.n	8006fb4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006fa2:	4b66      	ldr	r3, [pc, #408]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f023 020f 	bic.w	r2, r3, #15
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	4963      	ldr	r1, [pc, #396]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80d2 	beq.w	8007166 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d143      	bne.n	8007056 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fce:	4b5b      	ldr	r3, [pc, #364]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006fdc:	4b57      	ldr	r3, [pc, #348]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe2:	4a56      	ldr	r2, [pc, #344]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006fe4:	f043 0304 	orr.w	r3, r3, #4
 8006fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8006fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	60bb      	str	r3, [r7, #8]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006ffe:	f7fd f809 	bl	8004014 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007004:	4b4e      	ldr	r3, [pc, #312]	; (8007140 <HAL_RCC_ClockConfig+0x28c>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00f      	beq.n	8007030 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007010:	e008      	b.n	8007024 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007012:	f7fc ffff 	bl	8004014 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e12b      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007024:	4b46      	ldr	r3, [pc, #280]	; (8007140 <HAL_RCC_ClockConfig+0x28c>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8007038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800703c:	4a3f      	ldr	r2, [pc, #252]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 800703e:	f023 0304 	bic.w	r3, r3, #4
 8007042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d121      	bne.n	8007096 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e112      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d107      	bne.n	800706e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800705e:	4b37      	ldr	r3, [pc, #220]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d115      	bne.n	8007096 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e106      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d107      	bne.n	8007086 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007076:	4b31      	ldr	r3, [pc, #196]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e0fa      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007086:	4b2d      	ldr	r3, [pc, #180]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e0f2      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f023 0203 	bic.w	r2, r3, #3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	4926      	ldr	r1, [pc, #152]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80070a8:	f7fc ffb4 	bl	8004014 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d112      	bne.n	80070dc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b8:	f7fc ffac 	bl	8004014 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e0d6      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070ce:	4b1b      	ldr	r3, [pc, #108]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	f003 030c 	and.w	r3, r3, #12
 80070d6:	2b0c      	cmp	r3, #12
 80070d8:	d1ee      	bne.n	80070b8 <HAL_RCC_ClockConfig+0x204>
 80070da:	e044      	b.n	8007166 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d112      	bne.n	800710a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070e4:	e00a      	b.n	80070fc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070e6:	f7fc ff95 	bl	8004014 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e0bf      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f003 030c 	and.w	r3, r3, #12
 8007104:	2b08      	cmp	r3, #8
 8007106:	d1ee      	bne.n	80070e6 <HAL_RCC_ClockConfig+0x232>
 8007108:	e02d      	b.n	8007166 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d123      	bne.n	800715a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007112:	e00a      	b.n	800712a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007114:	f7fc ff7e 	bl	8004014 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007122:	4293      	cmp	r3, r2
 8007124:	d901      	bls.n	800712a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e0a8      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <HAL_RCC_ClockConfig+0x288>)
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1ee      	bne.n	8007114 <HAL_RCC_ClockConfig+0x260>
 8007136:	e016      	b.n	8007166 <HAL_RCC_ClockConfig+0x2b2>
 8007138:	40022000 	.word	0x40022000
 800713c:	46020c00 	.word	0x46020c00
 8007140:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007144:	f7fc ff66 	bl	8004014 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007152:	4293      	cmp	r3, r2
 8007154:	d901      	bls.n	800715a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e090      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800715a:	4b4a      	ldr	r3, [pc, #296]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f003 030c 	and.w	r3, r3, #12
 8007162:	2b04      	cmp	r3, #4
 8007164:	d1ee      	bne.n	8007144 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d010      	beq.n	8007194 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	4b43      	ldr	r3, [pc, #268]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	429a      	cmp	r2, r3
 8007180:	d208      	bcs.n	8007194 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007182:	4b40      	ldr	r3, [pc, #256]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f023 020f 	bic.w	r2, r3, #15
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	493d      	ldr	r1, [pc, #244]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007190:	4313      	orrs	r3, r2
 8007192:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007194:	4b3c      	ldr	r3, [pc, #240]	; (8007288 <HAL_RCC_ClockConfig+0x3d4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d210      	bcs.n	80071c4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a2:	4b39      	ldr	r3, [pc, #228]	; (8007288 <HAL_RCC_ClockConfig+0x3d4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f023 020f 	bic.w	r2, r3, #15
 80071aa:	4937      	ldr	r1, [pc, #220]	; (8007288 <HAL_RCC_ClockConfig+0x3d4>)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b2:	4b35      	ldr	r3, [pc, #212]	; (8007288 <HAL_RCC_ClockConfig+0x3d4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d001      	beq.n	80071c4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e05b      	b.n	800727c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d010      	beq.n	80071f2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	4b2b      	ldr	r3, [pc, #172]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071dc:	429a      	cmp	r2, r3
 80071de:	d208      	bcs.n	80071f2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4925      	ldr	r1, [pc, #148]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d012      	beq.n	8007224 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	4b20      	ldr	r3, [pc, #128]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	091b      	lsrs	r3, r3, #4
 8007208:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800720c:	429a      	cmp	r2, r3
 800720e:	d209      	bcs.n	8007224 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007210:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	4919      	ldr	r1, [pc, #100]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007220:	4313      	orrs	r3, r2
 8007222:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695a      	ldr	r2, [r3, #20]
 8007234:	4b13      	ldr	r3, [pc, #76]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800723c:	429a      	cmp	r2, r3
 800723e:	d208      	bcs.n	8007252 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	490d      	ldr	r1, [pc, #52]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 800724e:	4313      	orrs	r3, r2
 8007250:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007252:	f000 f821 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8007256:	4602      	mov	r2, r0
 8007258:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <HAL_RCC_ClockConfig+0x3d0>)
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	490a      	ldr	r1, [pc, #40]	; (800728c <HAL_RCC_ClockConfig+0x3d8>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
 8007268:	4a09      	ldr	r2, [pc, #36]	; (8007290 <HAL_RCC_ClockConfig+0x3dc>)
 800726a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800726c:	4b09      	ldr	r3, [pc, #36]	; (8007294 <HAL_RCC_ClockConfig+0x3e0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f7fc fe85 	bl	8003f80 <HAL_InitTick>
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]

  return status;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	46020c00 	.word	0x46020c00
 8007288:	40022000 	.word	0x40022000
 800728c:	0800dbe0 	.word	0x0800dbe0
 8007290:	2000000c 	.word	0x2000000c
 8007294:	20000010 	.word	0x20000010

08007298 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007298:	b480      	push	{r7}
 800729a:	b08b      	sub	sp, #44	; 0x2c
 800729c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a6:	4b7b      	ldr	r3, [pc, #492]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072b0:	4b78      	ldr	r3, [pc, #480]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <HAL_RCC_GetSysClockFreq+0x34>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b0c      	cmp	r3, #12
 80072c4:	d121      	bne.n	800730a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d11e      	bne.n	800730a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80072cc:	4b71      	ldr	r3, [pc, #452]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d107      	bne.n	80072e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80072d8:	4b6e      	ldr	r3, [pc, #440]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80072da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072de:	0b1b      	lsrs	r3, r3, #12
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
 80072e6:	e005      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80072e8:	4b6a      	ldr	r3, [pc, #424]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	0f1b      	lsrs	r3, r3, #28
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072f4:	4a68      	ldr	r2, [pc, #416]	; (8007498 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007308:	e00d      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800730a:	4b62      	ldr	r3, [pc, #392]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 030c 	and.w	r3, r3, #12
 8007312:	2b04      	cmp	r3, #4
 8007314:	d102      	bne.n	800731c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007316:	4b61      	ldr	r3, [pc, #388]	; (800749c <HAL_RCC_GetSysClockFreq+0x204>)
 8007318:	623b      	str	r3, [r7, #32]
 800731a:	e004      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d101      	bne.n	8007326 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007322:	4b5e      	ldr	r3, [pc, #376]	; (800749c <HAL_RCC_GetSysClockFreq+0x204>)
 8007324:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b0c      	cmp	r3, #12
 800732a:	f040 80ac 	bne.w	8007486 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800732e:	4b59      	ldr	r3, [pc, #356]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007338:	4b56      	ldr	r3, [pc, #344]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	f003 030f 	and.w	r3, r3, #15
 8007342:	3301      	adds	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007346:	4b53      	ldr	r3, [pc, #332]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007352:	4b50      	ldr	r3, [pc, #320]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	08db      	lsrs	r3, r3, #3
 8007358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	fb02 f303 	mul.w	r3, r2, r3
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8086 	beq.w	8007482 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d003      	beq.n	8007384 <HAL_RCC_GetSysClockFreq+0xec>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d022      	beq.n	80073c8 <HAL_RCC_GetSysClockFreq+0x130>
 8007382:	e043      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80074a0 <HAL_RCC_GetSysClockFreq+0x208>
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b3f      	ldr	r3, [pc, #252]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80073aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80074a4 <HAL_RCC_GetSysClockFreq+0x20c>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80073c6:	e046      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eddf 6a33 	vldr	s13, [pc, #204]	; 80074a0 <HAL_RCC_GetSysClockFreq+0x208>
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b2e      	ldr	r3, [pc, #184]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80073ee:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80074a4 <HAL_RCC_GetSysClockFreq+0x20c>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800740a:	e024      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007424:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007434:	ed97 6a01 	vldr	s12, [r7, #4]
 8007438:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80074a4 <HAL_RCC_GetSysClockFreq+0x20c>
 800743c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007440:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007448:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800744c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007450:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007454:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	0e1b      	lsrs	r3, r3, #24
 800745c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007460:	3301      	adds	r3, #1
 8007462:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800746e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747a:	ee17 3a90 	vmov	r3, s15
 800747e:	623b      	str	r3, [r7, #32]
 8007480:	e001      	b.n	8007486 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8007486:	6a3b      	ldr	r3, [r7, #32]
}
 8007488:	4618      	mov	r0, r3
 800748a:	372c      	adds	r7, #44	; 0x2c
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	46020c00 	.word	0x46020c00
 8007498:	0800dbf8 	.word	0x0800dbf8
 800749c:	00f42400 	.word	0x00f42400
 80074a0:	4b742400 	.word	0x4b742400
 80074a4:	46000000 	.word	0x46000000

080074a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80074ac:	f7ff fef4 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 80074b0:	4602      	mov	r2, r0
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <HAL_RCC_GetHCLKFreq+0x28>)
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	4906      	ldr	r1, [pc, #24]	; (80074d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80074bc:	5ccb      	ldrb	r3, [r1, r3]
 80074be:	fa22 f303 	lsr.w	r3, r2, r3
 80074c2:	4a05      	ldr	r2, [pc, #20]	; (80074d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80074c4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80074c6:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80074c8:	681b      	ldr	r3, [r3, #0]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	46020c00 	.word	0x46020c00
 80074d4:	0800dbe0 	.word	0x0800dbe0
 80074d8:	2000000c 	.word	0x2000000c

080074dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80074e0:	f7ff ffe2 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 80074e4:	4602      	mov	r2, r0
 80074e6:	4b05      	ldr	r3, [pc, #20]	; (80074fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	091b      	lsrs	r3, r3, #4
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	4903      	ldr	r1, [pc, #12]	; (8007500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f2:	5ccb      	ldrb	r3, [r1, r3]
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	46020c00 	.word	0x46020c00
 8007500:	0800dbf0 	.word	0x0800dbf0

08007504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007508:	f7ff ffce 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 800750c:	4602      	mov	r2, r0
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	0a1b      	lsrs	r3, r3, #8
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	4903      	ldr	r1, [pc, #12]	; (8007528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800751a:	5ccb      	ldrb	r3, [r1, r3]
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007520:	4618      	mov	r0, r3
 8007522:	bd80      	pop	{r7, pc}
 8007524:	46020c00 	.word	0x46020c00
 8007528:	0800dbf0 	.word	0x0800dbf0

0800752c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007530:	f7ff ffba 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 8007534:	4602      	mov	r2, r0
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_RCC_GetPCLK3Freq+0x20>)
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	091b      	lsrs	r3, r3, #4
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	4903      	ldr	r1, [pc, #12]	; (8007550 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007542:	5ccb      	ldrb	r3, [r1, r3]
 8007544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007548:	4618      	mov	r0, r3
 800754a:	bd80      	pop	{r7, pc}
 800754c:	46020c00 	.word	0x46020c00
 8007550:	0800dbf0 	.word	0x0800dbf0

08007554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800755c:	4b3e      	ldr	r3, [pc, #248]	; (8007658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800755e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007562:	f003 0304 	and.w	r3, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800756a:	f7fe fd4f 	bl	800600c <HAL_PWREx_GetVoltageRange>
 800756e:	6178      	str	r0, [r7, #20]
 8007570:	e019      	b.n	80075a6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007572:	4b39      	ldr	r3, [pc, #228]	; (8007658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007578:	4a37      	ldr	r2, [pc, #220]	; (8007658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800757a:	f043 0304 	orr.w	r3, r3, #4
 800757e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007582:	4b35      	ldr	r3, [pc, #212]	; (8007658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007590:	f7fe fd3c 	bl	800600c <HAL_PWREx_GetVoltageRange>
 8007594:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007596:	4b30      	ldr	r3, [pc, #192]	; (8007658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800759c:	4a2e      	ldr	r2, [pc, #184]	; (8007658 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800759e:	f023 0304 	bic.w	r3, r3, #4
 80075a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075ac:	d003      	beq.n	80075b6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075b4:	d109      	bne.n	80075ca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075bc:	d202      	bcs.n	80075c4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80075be:	2301      	movs	r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80075c2:	e033      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80075c4:	2300      	movs	r3, #0
 80075c6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80075c8:	e030      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075d0:	d208      	bcs.n	80075e4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d8:	d102      	bne.n	80075e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80075da:	2303      	movs	r3, #3
 80075dc:	613b      	str	r3, [r7, #16]
 80075de:	e025      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e035      	b.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ea:	d90f      	bls.n	800760c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d109      	bne.n	8007606 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075f8:	d902      	bls.n	8007600 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80075fa:	2300      	movs	r3, #0
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	e015      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007600:	2301      	movs	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	e012      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	e00f      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007612:	d109      	bne.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800761a:	d102      	bne.n	8007622 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800761c:	2301      	movs	r3, #1
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	e004      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007622:	2302      	movs	r3, #2
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e001      	b.n	800762c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007628:	2301      	movs	r3, #1
 800762a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f023 020f 	bic.w	r2, r3, #15
 8007634:	4909      	ldr	r1, [pc, #36]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4313      	orrs	r3, r2
 800763a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800763c:	4b07      	ldr	r3, [pc, #28]	; (800765c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	429a      	cmp	r2, r3
 8007648:	d001      	beq.n	800764e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	46020c00 	.word	0x46020c00
 800765c:	40022000 	.word	0x40022000

08007660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007664:	b0ba      	sub	sp, #232	; 0xe8
 8007666:	af00      	add	r7, sp, #0
 8007668:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800766c:	2300      	movs	r3, #0
 800766e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007672:	2300      	movs	r3, #0
 8007674:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f002 0401 	and.w	r4, r2, #1
 8007684:	2500      	movs	r5, #0
 8007686:	ea54 0305 	orrs.w	r3, r4, r5
 800768a:	d00b      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800768c:	4bcb      	ldr	r3, [pc, #812]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800768e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007692:	f023 0103 	bic.w	r1, r3, #3
 8007696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800769a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769c:	4ac7      	ldr	r2, [pc, #796]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800769e:	430b      	orrs	r3, r1
 80076a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f002 0802 	and.w	r8, r2, #2
 80076b0:	f04f 0900 	mov.w	r9, #0
 80076b4:	ea58 0309 	orrs.w	r3, r8, r9
 80076b8:	d00b      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80076ba:	4bc0      	ldr	r3, [pc, #768]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076c0:	f023 010c 	bic.w	r1, r3, #12
 80076c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ca:	4abc      	ldr	r2, [pc, #752]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076cc:	430b      	orrs	r3, r1
 80076ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f002 0a04 	and.w	sl, r2, #4
 80076de:	f04f 0b00 	mov.w	fp, #0
 80076e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80076e6:	d00b      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80076e8:	4bb4      	ldr	r3, [pc, #720]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076ee:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80076f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f8:	4ab0      	ldr	r2, [pc, #704]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076fa:	430b      	orrs	r3, r1
 80076fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	f002 0308 	and.w	r3, r2, #8
 800770c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007710:	2300      	movs	r3, #0
 8007712:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007716:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800771a:	460b      	mov	r3, r1
 800771c:	4313      	orrs	r3, r2
 800771e:	d00b      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007720:	4ba6      	ldr	r3, [pc, #664]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800772a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	4aa2      	ldr	r2, [pc, #648]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007732:	430b      	orrs	r3, r1
 8007734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f002 0310 	and.w	r3, r2, #16
 8007744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800774e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007752:	460b      	mov	r3, r1
 8007754:	4313      	orrs	r3, r2
 8007756:	d00b      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007758:	4b98      	ldr	r3, [pc, #608]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800775a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800775e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007768:	4a94      	ldr	r2, [pc, #592]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800776a:	430b      	orrs	r3, r1
 800776c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f002 0320 	and.w	r3, r2, #32
 800777c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007780:	2300      	movs	r3, #0
 8007782:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007786:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800778a:	460b      	mov	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	d00b      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007790:	4b8a      	ldr	r3, [pc, #552]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007796:	f023 0107 	bic.w	r1, r3, #7
 800779a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800779e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077a0:	4a86      	ldr	r2, [pc, #536]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077a2:	430b      	orrs	r3, r1
 80077a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80077b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b8:	2300      	movs	r3, #0
 80077ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4313      	orrs	r3, r2
 80077c6:	d00b      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80077c8:	4b7c      	ldr	r3, [pc, #496]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077ce:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80077d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077d8:	4a78      	ldr	r2, [pc, #480]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077da:	430b      	orrs	r3, r1
 80077dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80077ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80077f0:	2300      	movs	r3, #0
 80077f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d00b      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007800:	4b6e      	ldr	r3, [pc, #440]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800780a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800780e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007810:	4a6a      	ldr	r2, [pc, #424]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007812:	430b      	orrs	r3, r1
 8007814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8007824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800782e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007832:	460b      	mov	r3, r1
 8007834:	4313      	orrs	r3, r2
 8007836:	d00b      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007838:	4b60      	ldr	r3, [pc, #384]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800783a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800783e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007848:	4a5c      	ldr	r2, [pc, #368]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800784a:	430b      	orrs	r3, r1
 800784c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800785c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007866:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d00b      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007870:	4b52      	ldr	r3, [pc, #328]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007876:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800787a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800787e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007880:	4a4e      	ldr	r2, [pc, #312]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007882:	430b      	orrs	r3, r1
 8007884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8007894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007898:	2300      	movs	r3, #0
 800789a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800789e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80078a2:	460b      	mov	r3, r1
 80078a4:	4313      	orrs	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80078a8:	4b44      	ldr	r3, [pc, #272]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078ae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80078b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078b8:	4a40      	ldr	r2, [pc, #256]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80078cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078d0:	2300      	movs	r3, #0
 80078d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80078d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80078da:	460b      	mov	r3, r1
 80078dc:	4313      	orrs	r3, r2
 80078de:	d00b      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80078e0:	4b36      	ldr	r3, [pc, #216]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078e6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80078ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f0:	4a32      	ldr	r2, [pc, #200]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078f2:	430b      	orrs	r3, r1
 80078f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80078f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007908:	2300      	movs	r3, #0
 800790a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800790e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007912:	460b      	mov	r3, r1
 8007914:	4313      	orrs	r3, r2
 8007916:	d00c      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007918:	4b28      	ldr	r3, [pc, #160]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800791a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800791e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800792c:	430b      	orrs	r3, r1
 800792e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800793e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007940:	2300      	movs	r3, #0
 8007942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007944:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007948:	460b      	mov	r3, r1
 800794a:	4313      	orrs	r3, r2
 800794c:	d04f      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800794e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007956:	2b80      	cmp	r3, #128	; 0x80
 8007958:	d02d      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	d827      	bhi.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800795e:	2b60      	cmp	r3, #96	; 0x60
 8007960:	d02e      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007962:	2b60      	cmp	r3, #96	; 0x60
 8007964:	d823      	bhi.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d006      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d81f      	bhi.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007972:	2b20      	cmp	r3, #32
 8007974:	d011      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007976:	e01a      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	4a0f      	ldr	r2, [pc, #60]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800797e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007982:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007984:	e01d      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800798a:	3308      	adds	r3, #8
 800798c:	4618      	mov	r0, r3
 800798e:	f002 f981 	bl	8009c94 <RCCEx_PLL2_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007998:	e013      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800799a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800799e:	332c      	adds	r3, #44	; 0x2c
 80079a0:	4618      	mov	r0, r3
 80079a2:	f002 fa0f 	bl	8009dc4 <RCCEx_PLL3_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80079ac:	e009      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80079b4:	e005      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80079b6:	bf00      	nop
 80079b8:	e003      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80079ba:	bf00      	nop
 80079bc:	46020c00 	.word	0x46020c00
        break;
 80079c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079c2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10d      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80079ca:	4bb6      	ldr	r3, [pc, #728]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079d0:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80079d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079dc:	4ab1      	ldr	r2, [pc, #708]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079de:	430b      	orrs	r3, r1
 80079e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80079e4:	e003      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80079ea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80079ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80079fa:	673b      	str	r3, [r7, #112]	; 0x70
 80079fc:	2300      	movs	r3, #0
 80079fe:	677b      	str	r3, [r7, #116]	; 0x74
 8007a00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007a04:	460b      	mov	r3, r1
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d053      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a16:	d033      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1c:	d82c      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a22:	d02f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a28:	d826      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2e:	d008      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a34:	d820      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a3e:	d011      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007a40:	e01a      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a42:	4b98      	ldr	r3, [pc, #608]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	4a97      	ldr	r2, [pc, #604]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a4c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a4e:	e01a      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a54:	3308      	adds	r3, #8
 8007a56:	4618      	mov	r0, r3
 8007a58:	f002 f91c 	bl	8009c94 <RCCEx_PLL2_Config>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a62:	e010      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a68:	332c      	adds	r3, #44	; 0x2c
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f002 f9aa 	bl	8009dc4 <RCCEx_PLL3_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a76:	e006      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007a7e:	e002      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10d      	bne.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007a8e:	4b85      	ldr	r3, [pc, #532]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aa0:	4a80      	ldr	r2, [pc, #512]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007aa8:	e003      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007aae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ac4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4313      	orrs	r3, r2
 8007acc:	d046      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ad6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ada:	d028      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007adc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ae0:	d821      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ae6:	d022      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aec:	d81b      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007aee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007af2:	d01c      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007af4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007af8:	d815      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afe:	d008      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b04:	d80f      	bhi.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d011      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	d00e      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007b10:	e009      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b16:	3308      	adds	r3, #8
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f002 f8bb 	bl	8009c94 <RCCEx_PLL2_Config>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007b24:	e004      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b30:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10d      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007b38:	4b5a      	ldr	r3, [pc, #360]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b3e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b4a:	4a56      	ldr	r2, [pc, #344]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007b52:	e003      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007b58:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007b68:	663b      	str	r3, [r7, #96]	; 0x60
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b6e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007b72:	460b      	mov	r3, r1
 8007b74:	4313      	orrs	r3, r2
 8007b76:	d03f      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d81e      	bhi.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007b84:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007bcb 	.word	0x08007bcb
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007baf 	.word	0x08007baf
 8007b98:	08007bcb 	.word	0x08007bcb
 8007b9c:	08007bcb 	.word	0x08007bcb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ba0:	4b40      	ldr	r3, [pc, #256]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	4a3f      	ldr	r2, [pc, #252]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007baa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007bac:	e00e      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bb2:	332c      	adds	r3, #44	; 0x2c
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 f905 	bl	8009dc4 <RCCEx_PLL3_Config>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007bc0:	e004      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007bc8:	e000      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007bca:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007bcc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10d      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007bd4:	4b33      	ldr	r3, [pc, #204]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bda:	f023 0107 	bic.w	r1, r3, #7
 8007bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be6:	4a2f      	ldr	r2, [pc, #188]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007be8:	430b      	orrs	r3, r1
 8007bea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007bee:	e003      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007bf4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c06:	2300      	movs	r3, #0
 8007c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4313      	orrs	r3, r2
 8007c12:	d04d      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c20:	d028      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007c22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c26:	d821      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c2c:	d024      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007c2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c32:	d81b      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c38:	d00e      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c3e:	d815      	bhi.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01b      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c48:	d110      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c4a:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	4a15      	ldr	r2, [pc, #84]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c54:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007c56:	e012      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c5c:	332c      	adds	r3, #44	; 0x2c
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f002 f8b0 	bl	8009dc4 <RCCEx_PLL3_Config>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007c6a:	e008      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007c72:	e004      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c7c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d110      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007c90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	4a02      	ldr	r2, [pc, #8]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007ca0:	e006      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007ca2:	bf00      	nop
 8007ca4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007cac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f000 80b5 	beq.w	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cd4:	4b9d      	ldr	r3, [pc, #628]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d113      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ce2:	4b9a      	ldr	r3, [pc, #616]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce8:	4a98      	ldr	r2, [pc, #608]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cea:	f043 0304 	orr.w	r3, r3, #4
 8007cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007cf2:	4b96      	ldr	r3, [pc, #600]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d0a:	4b91      	ldr	r3, [pc, #580]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	4a90      	ldr	r2, [pc, #576]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d16:	f7fc f97d 	bl	8004014 <HAL_GetTick>
 8007d1a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d1e:	e00b      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d20:	f7fc f978 	bl	8004014 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d903      	bls.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007d36:	e005      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d38:	4b85      	ldr	r3, [pc, #532]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0ed      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8007d44:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d165      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d4c:	4b7f      	ldr	r3, [pc, #508]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d023      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d01b      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d72:	4b76      	ldr	r3, [pc, #472]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d80:	4b72      	ldr	r3, [pc, #456]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d86:	4a71      	ldr	r2, [pc, #452]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d90:	4b6e      	ldr	r3, [pc, #440]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d96:	4a6d      	ldr	r2, [pc, #436]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007da0:	4a6a      	ldr	r2, [pc, #424]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d019      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db6:	f7fc f92d 	bl	8004014 <HAL_GetTick>
 8007dba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dbe:	e00d      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dc0:	f7fc f928 	bl	8004014 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d903      	bls.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8007dda:	e006      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ddc:	4b5b      	ldr	r3, [pc, #364]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0ea      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007dea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10d      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007df2:	4b56      	ldr	r3, [pc, #344]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007df8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007e04:	4a51      	ldr	r2, [pc, #324]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007e0c:	e008      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007e12:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8007e16:	e003      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e18:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007e1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e20:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d107      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e28:	4b48      	ldr	r3, [pc, #288]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e2e:	4a47      	ldr	r2, [pc, #284]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e30:	f023 0304 	bic.w	r3, r3, #4
 8007e34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e46:	2300      	movs	r3, #0
 8007e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	d042      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e60:	d022      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007e62:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e66:	d81b      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e6c:	d011      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e72:	d815      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d019      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e7c:	d110      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e82:	3308      	adds	r3, #8
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 ff05 	bl	8009c94 <RCCEx_PLL2_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007e90:	e00d      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e92:	4b2e      	ldr	r3, [pc, #184]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e96:	4a2d      	ldr	r2, [pc, #180]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e9c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007e9e:	e006      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007ea6:	e002      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007ea8:	bf00      	nop
 8007eaa:	e000      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007eac:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007eae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10d      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007eb6:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ebc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007ec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ec8:	4a20      	ldr	r2, [pc, #128]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ed0:	e003      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ed6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee8:	2300      	movs	r3, #0
 8007eea:	647b      	str	r3, [r7, #68]	; 0x44
 8007eec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d032      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f02:	d00b      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f08:	d804      	bhi.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d008      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f12:	d007      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007f1a:	e004      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007f20:	bf00      	nop
 8007f22:	e000      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007f24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007f26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d112      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007f2e:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f40:	4a02      	ldr	r2, [pc, #8]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f42:	430b      	orrs	r3, r1
 8007f44:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007f48:	e008      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007f4a:	bf00      	nop
 8007f4c:	46020c00 	.word	0x46020c00
 8007f50:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f54:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f58:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d00c      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007f78:	4b98      	ldr	r3, [pc, #608]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f7e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8007f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f8a:	4a94      	ldr	r2, [pc, #592]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4313      	orrs	r3, r2
 8007fac:	d019      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fba:	d105      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fbc:	4b87      	ldr	r3, [pc, #540]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	4a86      	ldr	r2, [pc, #536]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc6:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007fc8:	4b84      	ldr	r3, [pc, #528]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007fce:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fda:	4a80      	ldr	r2, [pc, #512]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ff4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d00c      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007ffe:	4b77      	ldr	r3, [pc, #476]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800800c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008010:	4972      	ldr	r1, [pc, #456]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008024:	623b      	str	r3, [r7, #32]
 8008026:	2300      	movs	r3, #0
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800802e:	460b      	mov	r3, r1
 8008030:	4313      	orrs	r3, r2
 8008032:	d00c      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008034:	4b69      	ldr	r3, [pc, #420]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800803a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800803e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008042:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008046:	4965      	ldr	r1, [pc, #404]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008048:	4313      	orrs	r3, r2
 800804a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800804e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800805a:	61bb      	str	r3, [r7, #24]
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008064:	460b      	mov	r3, r1
 8008066:	4313      	orrs	r3, r2
 8008068:	d00c      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800806a:	4b5c      	ldr	r3, [pc, #368]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800806c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008070:	f023 0218 	bic.w	r2, r3, #24
 8008074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008078:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800807c:	4957      	ldr	r1, [pc, #348]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800809a:	460b      	mov	r3, r1
 800809c:	4313      	orrs	r3, r2
 800809e:	d032      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80080a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ac:	d105      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ae:	4b4b      	ldr	r3, [pc, #300]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	4a4a      	ldr	r2, [pc, #296]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080b8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80080ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080c6:	d108      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080cc:	3308      	adds	r3, #8
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fde0 	bl	8009c94 <RCCEx_PLL2_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80080da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10d      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80080e2:	4b3e      	ldr	r3, [pc, #248]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080f4:	4939      	ldr	r1, [pc, #228]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80080fc:	e003      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008102:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8008112:	60bb      	str	r3, [r7, #8]
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800811c:	460b      	mov	r3, r1
 800811e:	4313      	orrs	r3, r2
 8008120:	d03a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8008122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800812a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800812e:	d00e      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8008130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008134:	d815      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d017      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800813a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800813e:	d110      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008140:	4b26      	ldr	r3, [pc, #152]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	4a25      	ldr	r2, [pc, #148]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800814a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800814c:	e00e      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800814e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008152:	3308      	adds	r3, #8
 8008154:	4618      	mov	r0, r3
 8008156:	f001 fd9d 	bl	8009c94 <RCCEx_PLL2_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008160:	e004      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008168:	e000      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800816a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800816c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008174:	4b19      	ldr	r3, [pc, #100]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800817a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800817e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008186:	4915      	ldr	r1, [pc, #84]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800818e:	e003      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008194:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80081a4:	603b      	str	r3, [r7, #0]
 80081a6:	2300      	movs	r3, #0
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081ae:	460b      	mov	r3, r1
 80081b0:	4313      	orrs	r3, r2
 80081b2:	d00c      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80081be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081c6:	4905      	ldr	r1, [pc, #20]	; (80081dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80081ce:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	37e8      	adds	r7, #232	; 0xe8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081dc:	46020c00 	.word	0x46020c00

080081e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b089      	sub	sp, #36	; 0x24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80081e8:	4bac      	ldr	r3, [pc, #688]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80081ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80081f2:	4baa      	ldr	r3, [pc, #680]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80081fc:	4ba7      	ldr	r3, [pc, #668]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	3301      	adds	r3, #1
 8008208:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800820a:	4ba4      	ldr	r3, [pc, #656]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800820c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008214:	4ba1      	ldr	r3, [pc, #644]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	08db      	lsrs	r3, r3, #3
 800821a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	ee07 3a90 	vmov	s15, r3
 8008228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8123 	beq.w	800847e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2b03      	cmp	r3, #3
 800823c:	d062      	beq.n	8008304 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b03      	cmp	r3, #3
 8008242:	f200 8081 	bhi.w	8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d024      	beq.n	8008296 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d17a      	bne.n	8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80084a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8008260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008264:	4b8d      	ldr	r3, [pc, #564]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826c:	ee07 3a90 	vmov	s15, r3
 8008270:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008274:	ed97 6a02 	vldr	s12, [r7, #8]
 8008278:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80084a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800827c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008280:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008288:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800828c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008294:	e08f      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008296:	4b81      	ldr	r3, [pc, #516]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80082a2:	4b7e      	ldr	r3, [pc, #504]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	0f1b      	lsrs	r3, r3, #28
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	e006      	b.n	80082bc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80082ae:	4b7b      	ldr	r3, [pc, #492]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80082b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082b4:	041b      	lsls	r3, r3, #16
 80082b6:	0f1b      	lsrs	r3, r3, #28
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	4a7a      	ldr	r2, [pc, #488]	; (80084a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80082be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	ee07 3a90 	vmov	s15, r3
 80082d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082e6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80084a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80082ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80082fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008302:	e058      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80084a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8008312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008316:	4b61      	ldr	r3, [pc, #388]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008326:	ed97 6a02 	vldr	s12, [r7, #8]
 800832a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80084a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800832e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008332:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800833e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008346:	e036      	b.n	80083b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008348:	4b54      	ldr	r3, [pc, #336]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8008354:	4b51      	ldr	r3, [pc, #324]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	0f1b      	lsrs	r3, r3, #28
 800835a:	f003 030f 	and.w	r3, r3, #15
 800835e:	e006      	b.n	800836e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8008360:	4b4e      	ldr	r3, [pc, #312]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	0f1b      	lsrs	r3, r3, #28
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	4a4e      	ldr	r2, [pc, #312]	; (80084a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	ee07 3a90 	vmov	s15, r3
 8008390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008394:	ed97 6a02 	vldr	s12, [r7, #8]
 8008398:	eddf 5a42 	vldr	s11, [pc, #264]	; 80084a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800839c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80083ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80083b6:	4b39      	ldr	r3, [pc, #228]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d017      	beq.n	80083f2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083c2:	4b36      	ldr	r3, [pc, #216]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	0a5b      	lsrs	r3, r3, #9
 80083c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80083d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80083e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e8:	ee17 2a90 	vmov	r2, s15
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	e002      	b.n	80083f8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80083f8:	4b28      	ldr	r3, [pc, #160]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d017      	beq.n	8008434 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008404:	4b25      	ldr	r3, [pc, #148]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800841a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800841e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842a:	ee17 2a90 	vmov	r2, s15
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	e002      	b.n	800843a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800843a:	4b18      	ldr	r3, [pc, #96]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d017      	beq.n	8008476 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	0e1b      	lsrs	r3, r3, #24
 800844c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008450:	ee07 3a90 	vmov	s15, r3
 8008454:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800845c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008460:	edd7 6a07 	vldr	s13, [r7, #28]
 8008464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800846c:	ee17 2a90 	vmov	r2, s15
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008474:	e00c      	b.n	8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	e008      	b.n	8008490 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	609a      	str	r2, [r3, #8]
}
 8008490:	bf00      	nop
 8008492:	3724      	adds	r7, #36	; 0x24
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	46020c00 	.word	0x46020c00
 80084a0:	4b742400 	.word	0x4b742400
 80084a4:	46000000 	.word	0x46000000
 80084a8:	0800dbf8 	.word	0x0800dbf8

080084ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b089      	sub	sp, #36	; 0x24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80084b4:	4bac      	ldr	r3, [pc, #688]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80084be:	4baa      	ldr	r3, [pc, #680]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80084c8:	4ba7      	ldr	r3, [pc, #668]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	0a1b      	lsrs	r3, r3, #8
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	3301      	adds	r3, #1
 80084d4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80084d6:	4ba4      	ldr	r3, [pc, #656]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f003 0310 	and.w	r3, r3, #16
 80084de:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80084e0:	4ba1      	ldr	r3, [pc, #644]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	08db      	lsrs	r3, r3, #3
 80084e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8123 	beq.w	800874a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b03      	cmp	r3, #3
 8008508:	d062      	beq.n	80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b03      	cmp	r3, #3
 800850e:	f200 8081 	bhi.w	8008614 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d024      	beq.n	8008562 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d17a      	bne.n	8008614 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008528:	eddf 6a90 	vldr	s13, [pc, #576]	; 800876c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800852c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008530:	4b8d      	ldr	r3, [pc, #564]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008540:	ed97 6a02 	vldr	s12, [r7, #8]
 8008544:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008548:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800854c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008554:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008560:	e08f      	b.n	8008682 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008562:	4b81      	ldr	r3, [pc, #516]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800856e:	4b7e      	ldr	r3, [pc, #504]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	0f1b      	lsrs	r3, r3, #28
 8008574:	f003 030f 	and.w	r3, r3, #15
 8008578:	e006      	b.n	8008588 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800857a:	4b7b      	ldr	r3, [pc, #492]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800857c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008580:	041b      	lsls	r3, r3, #16
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	4a7a      	ldr	r2, [pc, #488]	; (8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800858a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80085b2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80085b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80085c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ce:	e058      	b.n	8008682 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085da:	eddf 6a64 	vldr	s13, [pc, #400]	; 800876c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80085de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e2:	4b61      	ldr	r3, [pc, #388]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80085f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085f6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80085fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008606:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800860a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008612:	e036      	b.n	8008682 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008614:	4b54      	ldr	r3, [pc, #336]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d005      	beq.n	800862c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8008620:	4b51      	ldr	r3, [pc, #324]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	0f1b      	lsrs	r3, r3, #28
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	e006      	b.n	800863a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800862c:	4b4e      	ldr	r3, [pc, #312]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800862e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	0f1b      	lsrs	r3, r3, #28
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	4a4e      	ldr	r2, [pc, #312]	; (8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800863c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008660:	ed97 6a02 	vldr	s12, [r7, #8]
 8008664:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008674:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008680:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008682:	4b39      	ldr	r3, [pc, #228]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d017      	beq.n	80086be <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800868e:	4b36      	ldr	r3, [pc, #216]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	0a5b      	lsrs	r3, r3, #9
 8008694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80086a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b4:	ee17 2a90 	vmov	r2, s15
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	601a      	str	r2, [r3, #0]
 80086bc:	e002      	b.n	80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80086c4:	4b28      	ldr	r3, [pc, #160]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d017      	beq.n	8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80086d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80086e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f6:	ee17 2a90 	vmov	r2, s15
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	e002      	b.n	8008706 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008706:	4b18      	ldr	r3, [pc, #96]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d017      	beq.n	8008742 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008716:	0e1b      	lsrs	r3, r3, #24
 8008718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008728:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800872c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008738:	ee17 2a90 	vmov	r2, s15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008740:	e00c      	b.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
}
 8008748:	e008      	b.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	609a      	str	r2, [r3, #8]
}
 800875c:	bf00      	nop
 800875e:	3724      	adds	r7, #36	; 0x24
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	46020c00 	.word	0x46020c00
 800876c:	4b742400 	.word	0x4b742400
 8008770:	46000000 	.word	0x46000000
 8008774:	0800dbf8 	.word	0x0800dbf8

08008778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	; 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008780:	4bac      	ldr	r3, [pc, #688]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008788:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800878a:	4baa      	ldr	r3, [pc, #680]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008794:	4ba7      	ldr	r3, [pc, #668]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	3301      	adds	r3, #1
 80087a0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80087a2:	4ba4      	ldr	r3, [pc, #656]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80087a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a6:	f003 0310 	and.w	r3, r3, #16
 80087aa:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80087ac:	4ba1      	ldr	r3, [pc, #644]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80087ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b0:	08db      	lsrs	r3, r3, #3
 80087b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	fb02 f303 	mul.w	r3, r2, r3
 80087bc:	ee07 3a90 	vmov	s15, r3
 80087c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 8123 	beq.w	8008a16 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d062      	beq.n	800889c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	f200 8081 	bhi.w	80088e0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d024      	beq.n	800882e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d17a      	bne.n	80088e0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	ee07 3a90 	vmov	s15, r3
 80087f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80087f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fc:	4b8d      	ldr	r3, [pc, #564]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80087fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800880c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008810:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008814:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008818:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800881c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008820:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008828:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800882c:	e08f      	b.n	800894e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800882e:	4b81      	ldr	r3, [pc, #516]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d005      	beq.n	8008846 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800883a:	4b7e      	ldr	r3, [pc, #504]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0f1b      	lsrs	r3, r3, #28
 8008840:	f003 030f 	and.w	r3, r3, #15
 8008844:	e006      	b.n	8008854 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8008846:	4b7b      	ldr	r3, [pc, #492]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	0f1b      	lsrs	r3, r3, #28
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	4a7a      	ldr	r2, [pc, #488]	; (8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a02 	vldr	s12, [r7, #8]
 800887e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889a:	e058      	b.n	800894e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80088aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ae:	4b61      	ldr	r3, [pc, #388]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80088b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80088be:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80088c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80088ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80088ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80088d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088de:	e036      	b.n	800894e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80088e0:	4b54      	ldr	r3, [pc, #336]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80088ec:	4b51      	ldr	r3, [pc, #324]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	0f1b      	lsrs	r3, r3, #28
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	e006      	b.n	8008906 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80088f8:	4b4e      	ldr	r3, [pc, #312]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80088fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088fe:	041b      	lsls	r3, r3, #16
 8008900:	0f1b      	lsrs	r3, r3, #28
 8008902:	f003 030f 	and.w	r3, r3, #15
 8008906:	4a4e      	ldr	r2, [pc, #312]	; (8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008930:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008940:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008948:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800894c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800894e:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d017      	beq.n	800898a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800895a:	4b36      	ldr	r3, [pc, #216]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800895c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895e:	0a5b      	lsrs	r3, r3, #9
 8008960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008964:	ee07 3a90 	vmov	s15, r3
 8008968:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800896c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008970:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008974:	edd7 6a07 	vldr	s13, [r7, #28]
 8008978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008980:	ee17 2a90 	vmov	r2, s15
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e002      	b.n	8008990 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008990:	4b28      	ldr	r3, [pc, #160]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d017      	beq.n	80089cc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800899c:	4b25      	ldr	r3, [pc, #148]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80089ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089b2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089c2:	ee17 2a90 	vmov	r2, s15
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	605a      	str	r2, [r3, #4]
 80089ca:	e002      	b.n	80089d2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80089d2:	4b18      	ldr	r3, [pc, #96]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d017      	beq.n	8008a0e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089de:	4b15      	ldr	r3, [pc, #84]	; (8008a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80089e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e2:	0e1b      	lsrs	r3, r3, #24
 80089e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80089f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a04:	ee17 2a90 	vmov	r2, s15
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008a0c:	e00c      	b.n	8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	609a      	str	r2, [r3, #8]
}
 8008a14:	e008      	b.n	8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	609a      	str	r2, [r3, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	3724      	adds	r7, #36	; 0x24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	46020c00 	.word	0x46020c00
 8008a38:	4b742400 	.word	0x4b742400
 8008a3c:	46000000 	.word	0x46000000
 8008a40:	0800dbf8 	.word	0x0800dbf8

08008a44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08e      	sub	sp, #56	; 0x38
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a52:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8008a56:	430b      	orrs	r3, r1
 8008a58:	d145      	bne.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008a5a:	4ba7      	ldr	r3, [pc, #668]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a64:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008a66:	4ba4      	ldr	r3, [pc, #656]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d108      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a7a:	d104      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a80:	637b      	str	r3, [r7, #52]	; 0x34
 8008a82:	f001 b8fc 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008a86:	4b9c      	ldr	r3, [pc, #624]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a94:	d114      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a9c:	d110      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a9e:	4b96      	ldr	r3, [pc, #600]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aac:	d103      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008aae:	23fa      	movs	r3, #250	; 0xfa
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ab2:	f001 b8e4 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008ab6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008abc:	f001 b8df 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008ac0:	4b8d      	ldr	r3, [pc, #564]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008acc:	d107      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ad4:	d103      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008ad6:	4b89      	ldr	r3, [pc, #548]	; (8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ada:	f001 b8d0 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae2:	f001 b8cc 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aea:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008aee:	430b      	orrs	r3, r1
 8008af0:	d151      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008af2:	4b81      	ldr	r3, [pc, #516]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008af4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008af8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	2b80      	cmp	r3, #128	; 0x80
 8008b02:	d035      	beq.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	2b80      	cmp	r3, #128	; 0x80
 8008b08:	d841      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2b60      	cmp	r3, #96	; 0x60
 8008b0e:	d02a      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	2b60      	cmp	r3, #96	; 0x60
 8008b14:	d83b      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	2b40      	cmp	r3, #64	; 0x40
 8008b1a:	d009      	beq.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	2b40      	cmp	r3, #64	; 0x40
 8008b20:	d835      	bhi.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00c      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d012      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008b2e:	e02e      	b.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff fb53 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b3e:	f001 b89e 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b42:	f107 0318 	add.w	r3, r7, #24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff fcb0 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b50:	f001 b895 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b54:	f107 030c 	add.w	r3, r7, #12
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fe0d 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b62:	f001 b88c 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008b66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b6c:	f001 b887 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b70:	4b61      	ldr	r3, [pc, #388]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b7c:	d103      	bne.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008b7e:	4b60      	ldr	r3, [pc, #384]	; (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b82:	f001 b87c 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b8a:	f001 b878 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b92:	f001 b874 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b9a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008b9e:	430b      	orrs	r3, r1
 8008ba0:	d158      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008ba2:	4b55      	ldr	r3, [pc, #340]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bb4:	d03b      	beq.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bbc:	d846      	bhi.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bc4:	d02e      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bcc:	d83e      	bhi.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bd4:	d00b      	beq.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bdc:	d836      	bhi.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00d      	beq.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bea:	d012      	beq.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008bec:	e02e      	b.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff faf4 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bfc:	f001 b83f 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c00:	f107 0318 	add.w	r3, r7, #24
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fc51 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c0e:	f001 b836 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c12:	f107 030c 	add.w	r3, r7, #12
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7ff fdae 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c20:	f001 b82d 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008c24:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008c28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c2a:	f001 b828 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c2e:	4b32      	ldr	r3, [pc, #200]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3a:	d103      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008c3c:	4b30      	ldr	r3, [pc, #192]	; (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008c3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008c40:	f001 b81d 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c48:	f001 b819 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c50:	f001 b815 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c58:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	d126      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008c60:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c6a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008c6c:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c78:	d106      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d103      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008c80:	4b1f      	ldr	r3, [pc, #124]	; (8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
 8008c84:	f000 bffb 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c94:	d107      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c9c:	d103      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008c9e:	4b19      	ldr	r3, [pc, #100]	; (8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca2:	f000 bfec 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8008caa:	f000 bfe8 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cb2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	d164      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008cc0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008cc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008ccc:	d03d      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008cd4:	d852      	bhi.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cdc:	d014      	beq.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ce4:	d84a      	bhi.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01f      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cf2:	d012      	beq.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008cf4:	e042      	b.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008cf6:	bf00      	nop
 8008cf8:	46020c00 	.word	0x46020c00
 8008cfc:	0007a120 	.word	0x0007a120
 8008d00:	00f42400 	.word	0x00f42400
 8008d04:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff fa67 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d16:	f000 bfb2 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d1a:	f107 0318 	add.w	r3, r7, #24
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fbc4 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d28:	f000 bfa9 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008d2c:	4bab      	ldr	r3, [pc, #684]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d38:	d103      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008d3a:	4ba9      	ldr	r3, [pc, #676]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d3e:	f000 bf9e 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d46:	f000 bf9a 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d4a:	4ba4      	ldr	r3, [pc, #656]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008d56:	4ba1      	ldr	r3, [pc, #644]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	0e1b      	lsrs	r3, r3, #24
 8008d5c:	f003 030f 	and.w	r3, r3, #15
 8008d60:	e006      	b.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8008d62:	4b9e      	ldr	r3, [pc, #632]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d68:	041b      	lsls	r3, r3, #16
 8008d6a:	0e1b      	lsrs	r3, r3, #24
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	4a9c      	ldr	r2, [pc, #624]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d78:	f000 bf81 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d80:	f000 bf7d 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d88:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	d175      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d90:	4b92      	ldr	r3, [pc, #584]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d15b      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008da2:	4b8e      	ldr	r3, [pc, #568]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008da8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008db4:	d034      	beq.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008dbc:	d849      	bhi.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc4:	d00b      	beq.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dcc:	d841      	bhi.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d016      	beq.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dda:	d009      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008ddc:	e039      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff f9fc 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008dec:	f000 bf47 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008df0:	f107 0318 	add.w	r3, r7, #24
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff fb59 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008dfe:	f000 bf3e 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008e02:	4b76      	ldr	r3, [pc, #472]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e0e:	d103      	bne.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8008e10:	4b73      	ldr	r3, [pc, #460]	; (8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008e14:	f000 bf33 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008e1c:	f000 bf2f 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008e20:	4b6e      	ldr	r3, [pc, #440]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8008e2c:	4b6b      	ldr	r3, [pc, #428]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	0e1b      	lsrs	r3, r3, #24
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	e006      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8008e38:	4b68      	ldr	r3, [pc, #416]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e3e:	041b      	lsls	r3, r3, #16
 8008e40:	0e1b      	lsrs	r3, r3, #24
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	4a67      	ldr	r2, [pc, #412]	; (8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008e4e:	f000 bf16 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008e56:	f000 bf12 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e60:	d108      	bne.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff f9ba 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e70:	f000 bf05 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	637b      	str	r3, [r7, #52]	; 0x34
 8008e78:	f000 bf01 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e80:	1e51      	subs	r1, r2, #1
 8008e82:	430b      	orrs	r3, r1
 8008e84:	d136      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008e86:	4b55      	ldr	r3, [pc, #340]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e8c:	f003 0303 	and.w	r3, r3, #3
 8008e90:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008e98:	f7fe fb34 	bl	8007504 <HAL_RCC_GetPCLK2Freq>
 8008e9c:	6378      	str	r0, [r7, #52]	; 0x34
 8008e9e:	f000 beee 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d104      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ea8:	f7fe f9f6 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8008eac:	6378      	str	r0, [r7, #52]	; 0x34
 8008eae:	f000 bee6 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008eb2:	4b4a      	ldr	r3, [pc, #296]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ebe:	d106      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d103      	bne.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8008ec6:	4b48      	ldr	r3, [pc, #288]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eca:	f000 bed8 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008ece:	4b43      	ldr	r3, [pc, #268]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d107      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d104      	bne.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8008ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee8:	f000 bec9 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef0:	f000 bec5 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef8:	1e91      	subs	r1, r2, #2
 8008efa:	430b      	orrs	r3, r1
 8008efc:	d136      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008efe:	4b37      	ldr	r3, [pc, #220]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f04:	f003 030c 	and.w	r3, r3, #12
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f10:	f7fe fae4 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8008f14:	6378      	str	r0, [r7, #52]	; 0x34
 8008f16:	f000 beb2 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d104      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f20:	f7fe f9ba 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8008f24:	6378      	str	r0, [r7, #52]	; 0x34
 8008f26:	f000 beaa 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008f2a:	4b2c      	ldr	r3, [pc, #176]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f36:	d106      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	2b08      	cmp	r3, #8
 8008f3c:	d103      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8008f3e:	4b2a      	ldr	r3, [pc, #168]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
 8008f42:	f000 be9c 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008f46:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f4c:	f003 0302 	and.w	r3, r3, #2
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d107      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	2b0c      	cmp	r3, #12
 8008f58:	d104      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8008f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f60:	f000 be8d 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
 8008f68:	f000 be89 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f70:	1f11      	subs	r1, r2, #4
 8008f72:	430b      	orrs	r3, r1
 8008f74:	d13e      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008f76:	4b19      	ldr	r3, [pc, #100]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008f80:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f88:	f7fe faa8 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8008f8c:	6378      	str	r0, [r7, #52]	; 0x34
 8008f8e:	f000 be76 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	2b10      	cmp	r3, #16
 8008f96:	d104      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f98:	f7fe f97e 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8008f9c:	6378      	str	r0, [r7, #52]	; 0x34
 8008f9e:	f000 be6e 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008fa2:	4b0e      	ldr	r3, [pc, #56]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fae:	d106      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	d103      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8008fb6:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fba:	f000 be60 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008fbe:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fc4:	f003 0302 	and.w	r3, r3, #2
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d10f      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d10c      	bne.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8008fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd8:	f000 be51 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008fdc:	46020c00 	.word	0x46020c00
 8008fe0:	02dc6c00 	.word	0x02dc6c00
 8008fe4:	0800dbf8 	.word	0x0800dbf8
 8008fe8:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff0:	f000 be45 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff8:	f1a2 0108 	sub.w	r1, r2, #8
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	d136      	bne.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009000:	4b9f      	ldr	r3, [pc, #636]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009006:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800900a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009012:	f7fe fa63 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8009016:	6378      	str	r0, [r7, #52]	; 0x34
 8009018:	f000 be31 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	2b40      	cmp	r3, #64	; 0x40
 8009020:	d104      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009022:	f7fe f939 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009026:	6378      	str	r0, [r7, #52]	; 0x34
 8009028:	f000 be29 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800902c:	4b94      	ldr	r3, [pc, #592]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009038:	d106      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	2b80      	cmp	r3, #128	; 0x80
 800903e:	d103      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8009040:	4b90      	ldr	r3, [pc, #576]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009042:	637b      	str	r3, [r7, #52]	; 0x34
 8009044:	f000 be1b 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009048:	4b8d      	ldr	r3, [pc, #564]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800904a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	2b02      	cmp	r3, #2
 8009054:	d107      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2bc0      	cmp	r3, #192	; 0xc0
 800905a:	d104      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800905c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
 8009062:	f000 be0c 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
 800906a:	f000 be08 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800906e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009072:	f1a2 0110 	sub.w	r1, r2, #16
 8009076:	430b      	orrs	r3, r1
 8009078:	d139      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800907a:	4b81      	ldr	r3, [pc, #516]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800907c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009084:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800908c:	f7fe fa26 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8009090:	6378      	str	r0, [r7, #52]	; 0x34
 8009092:	f000 bdf4 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800909c:	d104      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800909e:	f7fe f8fb 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 80090a2:	6378      	str	r0, [r7, #52]	; 0x34
 80090a4:	f000 bdeb 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80090a8:	4b75      	ldr	r3, [pc, #468]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090b4:	d107      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090bc:	d103      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80090be:	4b71      	ldr	r3, [pc, #452]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80090c0:	637b      	str	r3, [r7, #52]	; 0x34
 80090c2:	f000 bddc 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80090c6:	4b6e      	ldr	r3, [pc, #440]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d108      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090da:	d104      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80090dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e0:	637b      	str	r3, [r7, #52]	; 0x34
 80090e2:	f000 bdcc 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
 80090ea:	f000 bdc8 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80090ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f2:	f1a2 0120 	sub.w	r1, r2, #32
 80090f6:	430b      	orrs	r3, r1
 80090f8:	d158      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80090fa:	4b61      	ldr	r3, [pc, #388]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800910c:	f7fe fa0e 	bl	800752c <HAL_RCC_GetPCLK3Freq>
 8009110:	6378      	str	r0, [r7, #52]	; 0x34
 8009112:	f000 bdb4 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	d104      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800911c:	f7fe f8bc 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009120:	6378      	str	r0, [r7, #52]	; 0x34
 8009122:	f000 bdac 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009126:	4b56      	ldr	r3, [pc, #344]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800912e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009132:	d106      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	2b02      	cmp	r3, #2
 8009138:	d103      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800913a:	4b52      	ldr	r3, [pc, #328]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
 800913e:	f000 bd9e 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009142:	4b4f      	ldr	r3, [pc, #316]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b02      	cmp	r3, #2
 800914e:	d107      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	2b03      	cmp	r3, #3
 8009154:	d104      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8009156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800915a:	637b      	str	r3, [r7, #52]	; 0x34
 800915c:	f000 bd8f 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009160:	4b47      	ldr	r3, [pc, #284]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b20      	cmp	r3, #32
 800916a:	d11b      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2b04      	cmp	r3, #4
 8009170:	d118      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009172:	4b43      	ldr	r3, [pc, #268]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800917e:	4b40      	ldr	r3, [pc, #256]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	0e1b      	lsrs	r3, r3, #24
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	e006      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800918a:	4b3d      	ldr	r3, [pc, #244]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800918c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009190:	041b      	lsls	r3, r3, #16
 8009192:	0e1b      	lsrs	r3, r3, #24
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	4a3b      	ldr	r2, [pc, #236]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800919a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
 80091a0:	f000 bd6d 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	637b      	str	r3, [r7, #52]	; 0x34
 80091a8:	f000 bd69 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80091ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80091b4:	430b      	orrs	r3, r1
 80091b6:	d169      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80091b8:	4b31      	ldr	r3, [pc, #196]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80091ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80091be:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80091c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80091c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ca:	d104      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091cc:	f7fe f864 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 80091d0:	6378      	str	r0, [r7, #52]	; 0x34
 80091d2:	f000 bd54 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091dc:	d108      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091de:	f107 0318 	add.w	r3, r7, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff f962 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80091e8:	6a3b      	ldr	r3, [r7, #32]
 80091ea:	637b      	str	r3, [r7, #52]	; 0x34
 80091ec:	f000 bd47 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80091f6:	f7fe f957 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 80091fa:	6378      	str	r0, [r7, #52]	; 0x34
 80091fc:	f000 bd3f 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009206:	d118      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8009208:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8009214:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	0f1b      	lsrs	r3, r3, #28
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	e006      	b.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8009220:	4b17      	ldr	r3, [pc, #92]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	0f1b      	lsrs	r3, r3, #28
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	4a16      	ldr	r2, [pc, #88]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009234:	637b      	str	r3, [r7, #52]	; 0x34
 8009236:	f000 bd22 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800923a:	4b11      	ldr	r3, [pc, #68]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009246:	d107      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800924e:	d103      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8009250:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009252:	637b      	str	r3, [r7, #52]	; 0x34
 8009254:	f000 bd13 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009264:	d107      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800926c:	d103      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800926e:	4b05      	ldr	r3, [pc, #20]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
 8009272:	f000 bd04 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009276:	2300      	movs	r3, #0
 8009278:	637b      	str	r3, [r7, #52]	; 0x34
 800927a:	f000 bd00 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800927e:	bf00      	nop
 8009280:	46020c00 	.word	0x46020c00
 8009284:	00f42400 	.word	0x00f42400
 8009288:	0800dbf8 	.word	0x0800dbf8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800928c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009290:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009294:	430b      	orrs	r3, r1
 8009296:	d14e      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009298:	4ba8      	ldr	r3, [pc, #672]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800929a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d841      	bhi.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80092aa:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b0:	080092e9 	.word	0x080092e9
 80092b4:	080092c5 	.word	0x080092c5
 80092b8:	080092d7 	.word	0x080092d7
 80092bc:	080092f3 	.word	0x080092f3
 80092c0:	080092fd 	.word	0x080092fd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe ff89 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092d2:	f000 bcd4 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff fa4c 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092e4:	f000 bccb 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80092e8:	f7fe f8de 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 80092ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80092ee:	f000 bcc6 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80092f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80092f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092f8:	f000 bcc1 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092fc:	4b8f      	ldr	r3, [pc, #572]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8009308:	4b8c      	ldr	r3, [pc, #560]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	0e1b      	lsrs	r3, r3, #24
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	e006      	b.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009314:	4b89      	ldr	r3, [pc, #548]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	0e1b      	lsrs	r3, r3, #24
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	4a87      	ldr	r2, [pc, #540]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800932a:	f000 bca8 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009332:	f000 bca4 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800933e:	430b      	orrs	r3, r1
 8009340:	d15d      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009342:	4b7e      	ldr	r3, [pc, #504]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009348:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800934c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009354:	d036      	beq.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800935c:	d84b      	bhi.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009364:	d029      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800936c:	d843      	bhi.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009374:	d013      	beq.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800937c:	d83b      	bhi.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	2b00      	cmp	r3, #0
 8009382:	d015      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938a:	d134      	bne.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800938c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe ff25 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800939a:	f000 bc70 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff f9e8 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093ac:	f000 bc67 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80093b0:	f7fe f87a 	bl	80074a8 <HAL_RCC_GetHCLKFreq>
 80093b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80093b6:	f000 bc62 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80093ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80093be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093c0:	f000 bc5d 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093c4:	4b5d      	ldr	r3, [pc, #372]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80093d0:	4b5a      	ldr	r3, [pc, #360]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	0e1b      	lsrs	r3, r3, #24
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	e006      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80093dc:	4b57      	ldr	r3, [pc, #348]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80093de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80093e2:	041b      	lsls	r3, r3, #16
 80093e4:	0e1b      	lsrs	r3, r3, #24
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	4a55      	ldr	r2, [pc, #340]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80093ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093f2:	f000 bc44 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093fa:	f000 bc40 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80093fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009402:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8009406:	430b      	orrs	r3, r1
 8009408:	d14a      	bne.n	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800940a:	4b4c      	ldr	r3, [pc, #304]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800940c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009414:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800941c:	f7fe f85e 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8009420:	6378      	str	r0, [r7, #52]	; 0x34
 8009422:	f000 bc2c 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800942c:	d104      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800942e:	f7fd ff33 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009432:	6378      	str	r0, [r7, #52]	; 0x34
 8009434:	f000 bc23 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009438:	4b40      	ldr	r3, [pc, #256]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009444:	d107      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944c:	d103      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800944e:	4b3d      	ldr	r3, [pc, #244]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009450:	637b      	str	r3, [r7, #52]	; 0x34
 8009452:	f000 bc14 	b.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d11b      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009468:	d117      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800946a:	4b34      	ldr	r3, [pc, #208]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8009476:	4b31      	ldr	r3, [pc, #196]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	0e1b      	lsrs	r3, r3, #24
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	e006      	b.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8009482:	4b2e      	ldr	r3, [pc, #184]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	0e1b      	lsrs	r3, r3, #24
 800948c:	f003 030f 	and.w	r3, r3, #15
 8009490:	4a2b      	ldr	r2, [pc, #172]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
 8009498:	e3f1      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
 800949e:	e3ee      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80094a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80094a8:	430b      	orrs	r3, r1
 80094aa:	d14d      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80094ac:	4b23      	ldr	r3, [pc, #140]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80094b6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094be:	f7fe f80d 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 80094c2:	6378      	str	r0, [r7, #52]	; 0x34
 80094c4:	e3db      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80094c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094cc:	d103      	bne.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094ce:	f7fd fee3 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 80094d2:	6378      	str	r0, [r7, #52]	; 0x34
 80094d4:	e3d3      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80094d6:	4b19      	ldr	r3, [pc, #100]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e2:	d106      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ea:	d102      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80094ec:	4b15      	ldr	r3, [pc, #84]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
 80094f0:	e3c5      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d11b      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009504:	d117      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d005      	beq.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8009512:	4b0a      	ldr	r3, [pc, #40]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	0e1b      	lsrs	r3, r3, #24
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	e006      	b.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800951e:	4b07      	ldr	r3, [pc, #28]	; (800953c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009524:	041b      	lsls	r3, r3, #16
 8009526:	0e1b      	lsrs	r3, r3, #24
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	4a04      	ldr	r2, [pc, #16]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800952e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
 8009534:	e3a3      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	637b      	str	r3, [r7, #52]	; 0x34
 800953a:	e3a0      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800953c:	46020c00 	.word	0x46020c00
 8009540:	0800dbf8 	.word	0x0800dbf8
 8009544:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009550:	430b      	orrs	r3, r1
 8009552:	d148      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009554:	4b9d      	ldr	r3, [pc, #628]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800955a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800955e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	2bc0      	cmp	r3, #192	; 0xc0
 8009564:	d024      	beq.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	2bc0      	cmp	r3, #192	; 0xc0
 800956a:	d839      	bhi.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d00d      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	2b80      	cmp	r3, #128	; 0x80
 8009576:	d833      	bhi.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	2b40      	cmp	r3, #64	; 0x40
 8009582:	d011      	beq.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009584:	e02c      	b.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009586:	f7fd ffd1 	bl	800752c <HAL_RCC_GetPCLK3Freq>
 800958a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800958c:	e377      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800958e:	4b8f      	ldr	r3, [pc, #572]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800959a:	d102      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800959c:	4b8c      	ldr	r3, [pc, #560]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095a0:	e36d      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095a6:	e36a      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80095a8:	f7fd fe76 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 80095ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80095ae:	e366      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80095b0:	4b86      	ldr	r3, [pc, #536]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80095bc:	4b83      	ldr	r3, [pc, #524]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	0f1b      	lsrs	r3, r3, #28
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	e006      	b.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80095c8:	4b80      	ldr	r3, [pc, #512]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80095ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095ce:	041b      	lsls	r3, r3, #16
 80095d0:	0f1b      	lsrs	r3, r3, #28
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	4a7f      	ldr	r2, [pc, #508]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80095d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095de:	e34e      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095e4:	e34b      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80095e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ea:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80095ee:	430b      	orrs	r3, r1
 80095f0:	d147      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80095f2:	4b76      	ldr	r3, [pc, #472]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80095f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80095fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009604:	f7fd ff6a 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8009608:	6378      	str	r0, [r7, #52]	; 0x34
 800960a:	e338      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009612:	d103      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009614:	f7fd fe40 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009618:	6378      	str	r0, [r7, #52]	; 0x34
 800961a:	e330      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800961c:	4b6b      	ldr	r3, [pc, #428]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009628:	d106      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009630:	d102      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8009632:	4b67      	ldr	r3, [pc, #412]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
 8009636:	e322      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009638:	4b64      	ldr	r3, [pc, #400]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b20      	cmp	r3, #32
 8009642:	d11b      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800964a:	d117      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800964c:	4b5f      	ldr	r3, [pc, #380]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d005      	beq.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8009658:	4b5c      	ldr	r3, [pc, #368]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	0e1b      	lsrs	r3, r3, #24
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	e006      	b.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8009664:	4b59      	ldr	r3, [pc, #356]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	0e1b      	lsrs	r3, r3, #24
 800966e:	f003 030f 	and.w	r3, r3, #15
 8009672:	4a58      	ldr	r2, [pc, #352]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8009674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009678:	637b      	str	r3, [r7, #52]	; 0x34
 800967a:	e300      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	637b      	str	r3, [r7, #52]	; 0x34
 8009680:	e2fd      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009686:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800968a:	430b      	orrs	r3, r1
 800968c:	d15b      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800968e:	4b4f      	ldr	r3, [pc, #316]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009698:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d117      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096a0:	4b4a      	ldr	r3, [pc, #296]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80096ac:	4b47      	ldr	r3, [pc, #284]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	0e1b      	lsrs	r3, r3, #24
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	e006      	b.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80096b8:	4b44      	ldr	r3, [pc, #272]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80096ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096be:	041b      	lsls	r3, r3, #16
 80096c0:	0e1b      	lsrs	r3, r3, #24
 80096c2:	f003 030f 	and.w	r3, r3, #15
 80096c6:	4a43      	ldr	r2, [pc, #268]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80096c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096cc:	637b      	str	r3, [r7, #52]	; 0x34
 80096ce:	e2d6      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80096d0:	4b3e      	ldr	r3, [pc, #248]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80096d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096de:	d112      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e6:	d10e      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096e8:	4b38      	ldr	r3, [pc, #224]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80096ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096f6:	d102      	bne.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 80096f8:	23fa      	movs	r3, #250	; 0xfa
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096fc:	e2bf      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80096fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009702:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009704:	e2bb      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009706:	4b31      	ldr	r3, [pc, #196]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800970e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009712:	d106      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800971c:	4b2c      	ldr	r3, [pc, #176]	; (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
 8009720:	e2ad      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009722:	4b2a      	ldr	r3, [pc, #168]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b02      	cmp	r3, #2
 800972e:	d107      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009736:	d103      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8009738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
 800973e:	e29e      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	637b      	str	r3, [r7, #52]	; 0x34
 8009744:	e29b      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800974a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800974e:	430b      	orrs	r3, r1
 8009750:	d162      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009752:	4b1e      	ldr	r3, [pc, #120]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800975c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	2b00      	cmp	r3, #0
 8009762:	d117      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009764:	4b19      	ldr	r3, [pc, #100]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8009770:	4b16      	ldr	r3, [pc, #88]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	e006      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800977c:	4b13      	ldr	r3, [pc, #76]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800977e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009782:	041b      	lsls	r3, r3, #16
 8009784:	0e1b      	lsrs	r3, r3, #24
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	4a12      	ldr	r2, [pc, #72]	; (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800978c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
 8009792:	e274      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009794:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8009796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800979a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800979e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097a2:	d119      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097aa:	d115      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097ac:	4b07      	ldr	r3, [pc, #28]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80097ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097ba:	d102      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80097bc:	23fa      	movs	r3, #250	; 0xfa
 80097be:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097c0:	e25d      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80097c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097c8:	e259      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80097ca:	bf00      	nop
 80097cc:	46020c00 	.word	0x46020c00
 80097d0:	00f42400 	.word	0x00f42400
 80097d4:	0800dbf8 	.word	0x0800dbf8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80097d8:	4b9d      	ldr	r3, [pc, #628]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e4:	d106      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ec:	d102      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80097ee:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80097f0:	637b      	str	r3, [r7, #52]	; 0x34
 80097f2:	e244      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80097f4:	4b96      	ldr	r3, [pc, #600]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80097f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d107      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009808:	d103      	bne.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800980a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
 8009810:	e235      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
 8009816:	e232      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800981c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009820:	430b      	orrs	r3, r1
 8009822:	d147      	bne.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009824:	4b8a      	ldr	r3, [pc, #552]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800982a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800982e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009832:	2b00      	cmp	r3, #0
 8009834:	d103      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009836:	f7fd fe51 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 800983a:	6378      	str	r0, [r7, #52]	; 0x34
 800983c:	e21f      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800983e:	4b84      	ldr	r3, [pc, #528]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800984c:	d112      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009854:	d10e      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009856:	4b7e      	ldr	r3, [pc, #504]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800985c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009864:	d102      	bne.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8009866:	23fa      	movs	r3, #250	; 0xfa
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800986a:	e208      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800986c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009870:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009872:	e204      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009874:	4b76      	ldr	r3, [pc, #472]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800987c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009880:	d106      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009888:	d102      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800988a:	4b72      	ldr	r3, [pc, #456]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
 800988e:	e1f6      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009890:	4b6f      	ldr	r3, [pc, #444]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b02      	cmp	r3, #2
 800989c:	d107      	bne.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80098a4:	d103      	bne.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80098a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098aa:	637b      	str	r3, [r7, #52]	; 0x34
 80098ac:	e1e7      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80098ae:	2300      	movs	r3, #0
 80098b0:	637b      	str	r3, [r7, #52]	; 0x34
 80098b2:	e1e4      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80098b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80098bc:	430b      	orrs	r3, r1
 80098be:	d12d      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80098c0:	4b63      	ldr	r3, [pc, #396]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80098c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098c6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80098ca:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80098cc:	4b60      	ldr	r3, [pc, #384]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098d8:	d105      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80098e0:	4b5c      	ldr	r3, [pc, #368]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80098e2:	637b      	str	r3, [r7, #52]	; 0x34
 80098e4:	e1cb      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098ec:	d107      	bne.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fc74 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	637b      	str	r3, [r7, #52]	; 0x34
 80098fc:	e1bf      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009904:	d107      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009906:	f107 0318 	add.w	r3, r7, #24
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fdce 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	637b      	str	r3, [r7, #52]	; 0x34
 8009914:	e1b3      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	637b      	str	r3, [r7, #52]	; 0x34
 800991a:	e1b0      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800991c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009920:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8009924:	430b      	orrs	r3, r1
 8009926:	d14d      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009928:	4b49      	ldr	r3, [pc, #292]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800992a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800992e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009932:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800993a:	d028      	beq.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009942:	d83c      	bhi.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8009944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800994a:	d013      	beq.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009952:	d834      	bhi.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	2b00      	cmp	r3, #0
 8009958:	d004      	beq.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009960:	d004      	beq.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8009962:	e02c      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009964:	f7fd fdce 	bl	8007504 <HAL_RCC_GetPCLK2Freq>
 8009968:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800996a:	e188      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800996c:	f7fd fc94 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009970:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009972:	e184      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009974:	4b36      	ldr	r3, [pc, #216]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800997c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009980:	d102      	bne.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8009982:	4b34      	ldr	r3, [pc, #208]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009984:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009986:	e17a      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800998c:	e177      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800998e:	4b30      	ldr	r3, [pc, #192]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800999a:	4b2d      	ldr	r3, [pc, #180]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	0e1b      	lsrs	r3, r3, #24
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	e006      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80099a6:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80099a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	0e1b      	lsrs	r3, r3, #24
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	4a28      	ldr	r2, [pc, #160]	; (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80099b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099bc:	e15f      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099c2:	e15c      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80099c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c8:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80099cc:	430b      	orrs	r3, r1
 80099ce:	d154      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80099d0:	4b1f      	ldr	r3, [pc, #124]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80099d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099da:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099e2:	d028      	beq.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80099ea:	d843      	bhi.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099f2:	d013      	beq.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099fa:	d83b      	bhi.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d004      	beq.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a08:	d004      	beq.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009a0a:	e033      	b.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009a0c:	f7fd fd66 	bl	80074dc <HAL_RCC_GetPCLK1Freq>
 8009a10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009a12:	e134      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a14:	f7fd fc40 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009a18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009a1a:	e130      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a1c:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a28:	d102      	bne.n	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009a2a:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8009a2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a2e:	e126      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a34:	e123      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a36:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00c      	beq.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8009a42:	4b03      	ldr	r3, [pc, #12]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	0e1b      	lsrs	r3, r3, #24
 8009a48:	f003 030f 	and.w	r3, r3, #15
 8009a4c:	e00d      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8009a4e:	bf00      	nop
 8009a50:	46020c00 	.word	0x46020c00
 8009a54:	00f42400 	.word	0x00f42400
 8009a58:	0800dbf8 	.word	0x0800dbf8
 8009a5c:	4b8a      	ldr	r3, [pc, #552]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a62:	041b      	lsls	r3, r3, #16
 8009a64:	0e1b      	lsrs	r3, r3, #24
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	4a88      	ldr	r2, [pc, #544]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a72:	e104      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a78:	e101      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8009a82:	430b      	orrs	r3, r1
 8009a84:	d16e      	bne.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009a86:	4b80      	ldr	r3, [pc, #512]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a8c:	f003 0318 	and.w	r3, r3, #24
 8009a90:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	2b18      	cmp	r3, #24
 8009a96:	d862      	bhi.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009b05 	.word	0x08009b05
 8009aa4:	08009b5f 	.word	0x08009b5f
 8009aa8:	08009b5f 	.word	0x08009b5f
 8009aac:	08009b5f 	.word	0x08009b5f
 8009ab0:	08009b5f 	.word	0x08009b5f
 8009ab4:	08009b5f 	.word	0x08009b5f
 8009ab8:	08009b5f 	.word	0x08009b5f
 8009abc:	08009b5f 	.word	0x08009b5f
 8009ac0:	08009b0d 	.word	0x08009b0d
 8009ac4:	08009b5f 	.word	0x08009b5f
 8009ac8:	08009b5f 	.word	0x08009b5f
 8009acc:	08009b5f 	.word	0x08009b5f
 8009ad0:	08009b5f 	.word	0x08009b5f
 8009ad4:	08009b5f 	.word	0x08009b5f
 8009ad8:	08009b5f 	.word	0x08009b5f
 8009adc:	08009b5f 	.word	0x08009b5f
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009b5f 	.word	0x08009b5f
 8009ae8:	08009b5f 	.word	0x08009b5f
 8009aec:	08009b5f 	.word	0x08009b5f
 8009af0:	08009b5f 	.word	0x08009b5f
 8009af4:	08009b5f 	.word	0x08009b5f
 8009af8:	08009b5f 	.word	0x08009b5f
 8009afc:	08009b5f 	.word	0x08009b5f
 8009b00:	08009b2f 	.word	0x08009b2f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009b04:	f7fd fd12 	bl	800752c <HAL_RCC_GetPCLK3Freq>
 8009b08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009b0a:	e0b8      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b0c:	f7fd fbc4 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009b10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009b12:	e0b4      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b14:	4b5c      	ldr	r3, [pc, #368]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b20:	d102      	bne.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8009b22:	4b5b      	ldr	r3, [pc, #364]	; (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8009b24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b26:	e0aa      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b2c:	e0a7      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b2e:	4b56      	ldr	r3, [pc, #344]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009b3a:	4b53      	ldr	r3, [pc, #332]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	0e1b      	lsrs	r3, r3, #24
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	e006      	b.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8009b46:	4b50      	ldr	r3, [pc, #320]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	0e1b      	lsrs	r3, r3, #24
 8009b50:	f003 030f 	and.w	r3, r3, #15
 8009b54:	4a4d      	ldr	r2, [pc, #308]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b5c:	e08f      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b62:	e08c      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b68:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	d14c      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009b70:	4b45      	ldr	r3, [pc, #276]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009b72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009b7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b82:	d013      	beq.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8009b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b8a:	d83b      	bhi.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b92:	d013      	beq.n	8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b9a:	d833      	bhi.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d014      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba8:	d014      	beq.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009baa:	e02b      	b.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bac:	f107 0318 	add.w	r3, r7, #24
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7fe fc7b 	bl	80084ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bba:	e060      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fe fb0d 	bl	80081e0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bca:	e058      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009bcc:	f7fd fb64 	bl	8007298 <HAL_RCC_GetSysClockFreq>
 8009bd0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009bd2:	e054      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bd4:	4b2c      	ldr	r3, [pc, #176]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8009be0:	4b29      	ldr	r3, [pc, #164]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	0e1b      	lsrs	r3, r3, #24
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	e006      	b.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8009bec:	4b26      	ldr	r3, [pc, #152]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bf2:	041b      	lsls	r3, r3, #16
 8009bf4:	0e1b      	lsrs	r3, r3, #24
 8009bf6:	f003 030f 	and.w	r3, r3, #15
 8009bfa:	4a24      	ldr	r2, [pc, #144]	; (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8009bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c02:	e03c      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c08:	e039      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c0e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8009c12:	430b      	orrs	r3, r1
 8009c14:	d131      	bne.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009c16:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c20:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009c22:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d106      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8009c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	e01f      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009c3e:	4b12      	ldr	r3, [pc, #72]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c4c:	d112      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c54:	d10e      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8009c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c64:	d102      	bne.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8009c66:	23fa      	movs	r3, #250	; 0xfa
 8009c68:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c6a:	e008      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8009c6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c72:	e004      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
 8009c78:	e001      	b.n	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3738      	adds	r7, #56	; 0x38
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	46020c00 	.word	0x46020c00
 8009c8c:	0800dbf8 	.word	0x0800dbf8
 8009c90:	00f42400 	.word	0x00f42400

08009c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009c9c:	4b47      	ldr	r3, [pc, #284]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a46      	ldr	r2, [pc, #280]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ca6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ca8:	f7fa f9b4 	bl	8004014 <HAL_GetTick>
 8009cac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cae:	e008      	b.n	8009cc2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cb0:	f7fa f9b0 	bl	8004014 <HAL_GetTick>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d901      	bls.n	8009cc2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e077      	b.n	8009db2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009cc2:	4b3e      	ldr	r3, [pc, #248]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1f0      	bne.n	8009cb0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009cce:	4b3b      	ldr	r3, [pc, #236]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	6811      	ldr	r1, [r2, #0]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6852      	ldr	r2, [r2, #4]
 8009ce2:	3a01      	subs	r2, #1
 8009ce4:	0212      	lsls	r2, r2, #8
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	4934      	ldr	r1, [pc, #208]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009cee:	4b33      	ldr	r3, [pc, #204]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cf2:	4b33      	ldr	r3, [pc, #204]	; (8009dc0 <RCCEx_PLL2_Config+0x12c>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	6892      	ldr	r2, [r2, #8]
 8009cfa:	3a01      	subs	r2, #1
 8009cfc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68d2      	ldr	r2, [r2, #12]
 8009d04:	3a01      	subs	r2, #1
 8009d06:	0252      	lsls	r2, r2, #9
 8009d08:	b292      	uxth	r2, r2
 8009d0a:	4311      	orrs	r1, r2
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6912      	ldr	r2, [r2, #16]
 8009d10:	3a01      	subs	r2, #1
 8009d12:	0412      	lsls	r2, r2, #16
 8009d14:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009d18:	4311      	orrs	r1, r2
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6952      	ldr	r2, [r2, #20]
 8009d1e:	3a01      	subs	r2, #1
 8009d20:	0612      	lsls	r2, r2, #24
 8009d22:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009d26:	430a      	orrs	r2, r1
 8009d28:	4924      	ldr	r1, [pc, #144]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009d2e:	4b23      	ldr	r3, [pc, #140]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d32:	f023 020c 	bic.w	r2, r3, #12
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	4920      	ldr	r1, [pc, #128]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009d40:	4b1e      	ldr	r3, [pc, #120]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	491c      	ldr	r1, [pc, #112]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009d4e:	4b1b      	ldr	r3, [pc, #108]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	4a1a      	ldr	r2, [pc, #104]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d54:	f023 0310 	bic.w	r3, r3, #16
 8009d58:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d5a:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	69d2      	ldr	r2, [r2, #28]
 8009d6a:	00d2      	lsls	r2, r2, #3
 8009d6c:	4913      	ldr	r1, [pc, #76]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	4a11      	ldr	r2, [pc, #68]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d78:	f043 0310 	orr.w	r3, r3, #16
 8009d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a0e      	ldr	r2, [pc, #56]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009d84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d88:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d8a:	f7fa f943 	bl	8004014 <HAL_GetTick>
 8009d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d90:	e008      	b.n	8009da4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d92:	f7fa f93f 	bl	8004014 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d901      	bls.n	8009da4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009da0:	2303      	movs	r3, #3
 8009da2:	e006      	b.n	8009db2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009da4:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <RCCEx_PLL2_Config+0x128>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0f0      	beq.n	8009d92 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009db0:	2300      	movs	r3, #0

}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	46020c00 	.word	0x46020c00
 8009dc0:	80800000 	.word	0x80800000

08009dc4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009dcc:	4b47      	ldr	r3, [pc, #284]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a46      	ldr	r2, [pc, #280]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dd6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009dd8:	f7fa f91c 	bl	8004014 <HAL_GetTick>
 8009ddc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009dde:	e008      	b.n	8009df2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009de0:	f7fa f918 	bl	8004014 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d901      	bls.n	8009df2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e077      	b.n	8009ee2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009df2:	4b3e      	ldr	r3, [pc, #248]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1f0      	bne.n	8009de0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009dfe:	4b3b      	ldr	r3, [pc, #236]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e06:	f023 0303 	bic.w	r3, r3, #3
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	6811      	ldr	r1, [r2, #0]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6852      	ldr	r2, [r2, #4]
 8009e12:	3a01      	subs	r2, #1
 8009e14:	0212      	lsls	r2, r2, #8
 8009e16:	430a      	orrs	r2, r1
 8009e18:	4934      	ldr	r1, [pc, #208]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	630b      	str	r3, [r1, #48]	; 0x30
 8009e1e:	4b33      	ldr	r3, [pc, #204]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e22:	4b33      	ldr	r3, [pc, #204]	; (8009ef0 <RCCEx_PLL3_Config+0x12c>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6892      	ldr	r2, [r2, #8]
 8009e2a:	3a01      	subs	r2, #1
 8009e2c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	68d2      	ldr	r2, [r2, #12]
 8009e34:	3a01      	subs	r2, #1
 8009e36:	0252      	lsls	r2, r2, #9
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	4311      	orrs	r1, r2
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6912      	ldr	r2, [r2, #16]
 8009e40:	3a01      	subs	r2, #1
 8009e42:	0412      	lsls	r2, r2, #16
 8009e44:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009e48:	4311      	orrs	r1, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6952      	ldr	r2, [r2, #20]
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	0612      	lsls	r2, r2, #24
 8009e52:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009e56:	430a      	orrs	r2, r1
 8009e58:	4924      	ldr	r1, [pc, #144]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009e5e:	4b23      	ldr	r3, [pc, #140]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e62:	f023 020c 	bic.w	r2, r3, #12
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	4920      	ldr	r1, [pc, #128]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009e70:	4b1e      	ldr	r3, [pc, #120]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	491c      	ldr	r1, [pc, #112]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009e7e:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	4a1a      	ldr	r2, [pc, #104]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e84:	f023 0310 	bic.w	r3, r3, #16
 8009e88:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e8a:	4b18      	ldr	r3, [pc, #96]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	69d2      	ldr	r2, [r2, #28]
 8009e9a:	00d2      	lsls	r2, r2, #3
 8009e9c:	4913      	ldr	r1, [pc, #76]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009ea2:	4b12      	ldr	r3, [pc, #72]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	4a11      	ldr	r2, [pc, #68]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009ea8:	f043 0310 	orr.w	r3, r3, #16
 8009eac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009eae:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a0e      	ldr	r2, [pc, #56]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eba:	f7fa f8ab 	bl	8004014 <HAL_GetTick>
 8009ebe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ec0:	e008      	b.n	8009ed4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ec2:	f7fa f8a7 	bl	8004014 <HAL_GetTick>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d901      	bls.n	8009ed4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e006      	b.n	8009ee2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <RCCEx_PLL3_Config+0x128>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0f0      	beq.n	8009ec2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	46020c00 	.word	0x46020c00
 8009ef0:	80800000 	.word	0x80800000

08009ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e049      	b.n	8009f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7f9 fe4e 	bl	8003bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2202      	movs	r2, #2
 8009f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	4619      	mov	r1, r3
 8009f32:	4610      	mov	r0, r2
 8009f34:	f000 f938 	bl	800a1a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e0e6      	b.n	800a18e <HAL_TIM_ConfigClockSource+0x1ea>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a67      	ldr	r2, [pc, #412]	; (800a198 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	f000 80b1 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a000:	4a65      	ldr	r2, [pc, #404]	; (800a198 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a002:	4293      	cmp	r3, r2
 800a004:	f200 80b6 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a008:	4a64      	ldr	r2, [pc, #400]	; (800a19c <HAL_TIM_ConfigClockSource+0x1f8>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	f000 80a9 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a010:	4a62      	ldr	r2, [pc, #392]	; (800a19c <HAL_TIM_ConfigClockSource+0x1f8>)
 800a012:	4293      	cmp	r3, r2
 800a014:	f200 80ae 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a018:	4a61      	ldr	r2, [pc, #388]	; (800a1a0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	f000 80a1 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a020:	4a5f      	ldr	r2, [pc, #380]	; (800a1a0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	f200 80a6 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a028:	4a5e      	ldr	r2, [pc, #376]	; (800a1a4 <HAL_TIM_ConfigClockSource+0x200>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	f000 8099 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a030:	4a5c      	ldr	r2, [pc, #368]	; (800a1a4 <HAL_TIM_ConfigClockSource+0x200>)
 800a032:	4293      	cmp	r3, r2
 800a034:	f200 809e 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a038:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a03c:	f000 8091 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a040:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a044:	f200 8096 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a04c:	f000 8089 	beq.w	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a054:	f200 808e 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05c:	d03e      	beq.n	800a0dc <HAL_TIM_ConfigClockSource+0x138>
 800a05e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a062:	f200 8087 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06a:	f000 8086 	beq.w	800a17a <HAL_TIM_ConfigClockSource+0x1d6>
 800a06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a072:	d87f      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a074:	2b70      	cmp	r3, #112	; 0x70
 800a076:	d01a      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x10a>
 800a078:	2b70      	cmp	r3, #112	; 0x70
 800a07a:	d87b      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a07c:	2b60      	cmp	r3, #96	; 0x60
 800a07e:	d050      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x17e>
 800a080:	2b60      	cmp	r3, #96	; 0x60
 800a082:	d877      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a084:	2b50      	cmp	r3, #80	; 0x50
 800a086:	d03c      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0x15e>
 800a088:	2b50      	cmp	r3, #80	; 0x50
 800a08a:	d873      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d058      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x19e>
 800a090:	2b40      	cmp	r3, #64	; 0x40
 800a092:	d86f      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a094:	2b30      	cmp	r3, #48	; 0x30
 800a096:	d064      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a098:	2b30      	cmp	r3, #48	; 0x30
 800a09a:	d86b      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	d060      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d867      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d05c      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a0a8:	2b10      	cmp	r3, #16
 800a0aa:	d05a      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x1be>
 800a0ac:	e062      	b.n	800a174 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6899      	ldr	r1, [r3, #8]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	f000 f9e9 	bl	800a494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	609a      	str	r2, [r3, #8]
      break;
 800a0da:	e04f      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	6899      	ldr	r1, [r3, #8]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f000 f9d2 	bl	800a494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0fe:	609a      	str	r2, [r3, #8]
      break;
 800a100:	e03c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6859      	ldr	r1, [r3, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	461a      	mov	r2, r3
 800a110:	f000 f944 	bl	800a39c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2150      	movs	r1, #80	; 0x50
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f99d 	bl	800a45a <TIM_ITRx_SetConfig>
      break;
 800a120:	e02c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6859      	ldr	r1, [r3, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	461a      	mov	r2, r3
 800a130:	f000 f963 	bl	800a3fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2160      	movs	r1, #96	; 0x60
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 f98d 	bl	800a45a <TIM_ITRx_SetConfig>
      break;
 800a140:	e01c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6859      	ldr	r1, [r3, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	461a      	mov	r2, r3
 800a150:	f000 f924 	bl	800a39c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2140      	movs	r1, #64	; 0x40
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 f97d 	bl	800a45a <TIM_ITRx_SetConfig>
      break;
 800a160:	e00c      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f000 f974 	bl	800a45a <TIM_ITRx_SetConfig>
      break;
 800a172:	e003      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]
      break;
 800a178:	e000      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a17a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	00100070 	.word	0x00100070
 800a19c:	00100040 	.word	0x00100040
 800a1a0:	00100030 	.word	0x00100030
 800a1a4:	00100020 	.word	0x00100020

0800a1a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a68      	ldr	r2, [pc, #416]	; (800a35c <TIM_Base_SetConfig+0x1b4>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d02b      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a67      	ldr	r2, [pc, #412]	; (800a360 <TIM_Base_SetConfig+0x1b8>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d027      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ce:	d023      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1d6:	d01f      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a62      	ldr	r2, [pc, #392]	; (800a364 <TIM_Base_SetConfig+0x1bc>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d01b      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a61      	ldr	r2, [pc, #388]	; (800a368 <TIM_Base_SetConfig+0x1c0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d017      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a60      	ldr	r2, [pc, #384]	; (800a36c <TIM_Base_SetConfig+0x1c4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a5f      	ldr	r2, [pc, #380]	; (800a370 <TIM_Base_SetConfig+0x1c8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00f      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a5e      	ldr	r2, [pc, #376]	; (800a374 <TIM_Base_SetConfig+0x1cc>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00b      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a5d      	ldr	r2, [pc, #372]	; (800a378 <TIM_Base_SetConfig+0x1d0>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a5c      	ldr	r2, [pc, #368]	; (800a37c <TIM_Base_SetConfig+0x1d4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_Base_SetConfig+0x70>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a5b      	ldr	r2, [pc, #364]	; (800a380 <TIM_Base_SetConfig+0x1d8>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d108      	bne.n	800a22a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a21e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a4b      	ldr	r2, [pc, #300]	; (800a35c <TIM_Base_SetConfig+0x1b4>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d043      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a4a      	ldr	r2, [pc, #296]	; (800a360 <TIM_Base_SetConfig+0x1b8>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d03f      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a240:	d03b      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a248:	d037      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a45      	ldr	r2, [pc, #276]	; (800a364 <TIM_Base_SetConfig+0x1bc>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d033      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a44      	ldr	r2, [pc, #272]	; (800a368 <TIM_Base_SetConfig+0x1c0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d02f      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a43      	ldr	r2, [pc, #268]	; (800a36c <TIM_Base_SetConfig+0x1c4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d02b      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a42      	ldr	r2, [pc, #264]	; (800a370 <TIM_Base_SetConfig+0x1c8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d027      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a41      	ldr	r2, [pc, #260]	; (800a374 <TIM_Base_SetConfig+0x1cc>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d023      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a40      	ldr	r2, [pc, #256]	; (800a378 <TIM_Base_SetConfig+0x1d0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d01f      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a3f      	ldr	r2, [pc, #252]	; (800a37c <TIM_Base_SetConfig+0x1d4>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d01b      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a3e      	ldr	r2, [pc, #248]	; (800a380 <TIM_Base_SetConfig+0x1d8>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d017      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a3d      	ldr	r2, [pc, #244]	; (800a384 <TIM_Base_SetConfig+0x1dc>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a3c      	ldr	r2, [pc, #240]	; (800a388 <TIM_Base_SetConfig+0x1e0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00f      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a3b      	ldr	r2, [pc, #236]	; (800a38c <TIM_Base_SetConfig+0x1e4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d00b      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a3a      	ldr	r2, [pc, #232]	; (800a390 <TIM_Base_SetConfig+0x1e8>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d007      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a39      	ldr	r2, [pc, #228]	; (800a394 <TIM_Base_SetConfig+0x1ec>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d003      	beq.n	800a2ba <TIM_Base_SetConfig+0x112>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a38      	ldr	r2, [pc, #224]	; (800a398 <TIM_Base_SetConfig+0x1f0>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d108      	bne.n	800a2cc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a1a      	ldr	r2, [pc, #104]	; (800a35c <TIM_Base_SetConfig+0x1b4>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d023      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a19      	ldr	r2, [pc, #100]	; (800a360 <TIM_Base_SetConfig+0x1b8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d01f      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <TIM_Base_SetConfig+0x1d4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d01b      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a1d      	ldr	r2, [pc, #116]	; (800a380 <TIM_Base_SetConfig+0x1d8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d017      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a1c      	ldr	r2, [pc, #112]	; (800a384 <TIM_Base_SetConfig+0x1dc>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d013      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a1b      	ldr	r2, [pc, #108]	; (800a388 <TIM_Base_SetConfig+0x1e0>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00f      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a1a      	ldr	r2, [pc, #104]	; (800a38c <TIM_Base_SetConfig+0x1e4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d00b      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a19      	ldr	r2, [pc, #100]	; (800a390 <TIM_Base_SetConfig+0x1e8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d007      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a18      	ldr	r2, [pc, #96]	; (800a394 <TIM_Base_SetConfig+0x1ec>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d003      	beq.n	800a340 <TIM_Base_SetConfig+0x198>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a17      	ldr	r2, [pc, #92]	; (800a398 <TIM_Base_SetConfig+0x1f0>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d103      	bne.n	800a348 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	615a      	str	r2, [r3, #20]
}
 800a34e:	bf00      	nop
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	40012c00 	.word	0x40012c00
 800a360:	50012c00 	.word	0x50012c00
 800a364:	40000400 	.word	0x40000400
 800a368:	50000400 	.word	0x50000400
 800a36c:	40000800 	.word	0x40000800
 800a370:	50000800 	.word	0x50000800
 800a374:	40000c00 	.word	0x40000c00
 800a378:	50000c00 	.word	0x50000c00
 800a37c:	40013400 	.word	0x40013400
 800a380:	50013400 	.word	0x50013400
 800a384:	40014000 	.word	0x40014000
 800a388:	50014000 	.word	0x50014000
 800a38c:	40014400 	.word	0x40014400
 800a390:	50014400 	.word	0x50014400
 800a394:	40014800 	.word	0x40014800
 800a398:	50014800 	.word	0x50014800

0800a39c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6a1b      	ldr	r3, [r3, #32]
 800a3ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	f023 0201 	bic.w	r2, r3, #1
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f023 030a 	bic.w	r3, r3, #10
 800a3d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	621a      	str	r2, [r3, #32]
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b087      	sub	sp, #28
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	f023 0210 	bic.w	r2, r3, #16
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	031b      	lsls	r3, r3, #12
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	011b      	lsls	r3, r3, #4
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	4313      	orrs	r3, r2
 800a440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	621a      	str	r2, [r3, #32]
}
 800a44e:	bf00      	nop
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b085      	sub	sp, #20
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	f043 0307 	orr.w	r3, r3, #7
 800a480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	609a      	str	r2, [r3, #8]
}
 800a488:	bf00      	nop
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	021a      	lsls	r2, r3, #8
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	609a      	str	r2, [r3, #8]
}
 800a4c8:	bf00      	nop
 800a4ca:	371c      	adds	r7, #28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d101      	bne.n	800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	e097      	b.n	800a61c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a45      	ldr	r2, [pc, #276]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00e      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a44      	ldr	r2, [pc, #272]	; (800a62c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d009      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a42      	ldr	r2, [pc, #264]	; (800a630 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d004      	beq.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a41      	ldr	r2, [pc, #260]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d108      	bne.n	800a546 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a53a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a2f      	ldr	r2, [pc, #188]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d040      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a2e      	ldr	r2, [pc, #184]	; (800a62c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d03b      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a580:	d036      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a58a:	d031      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a29      	ldr	r2, [pc, #164]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d02c      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a28      	ldr	r2, [pc, #160]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d027      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a26      	ldr	r2, [pc, #152]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d022      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a25      	ldr	r2, [pc, #148]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d01d      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a23      	ldr	r2, [pc, #140]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d018      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a22      	ldr	r2, [pc, #136]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d013      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a18      	ldr	r2, [pc, #96]	; (800a630 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d00e      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a17      	ldr	r2, [pc, #92]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d009      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d004      	beq.n	800a5f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a1a      	ldr	r2, [pc, #104]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d10c      	bne.n	800a60a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	40012c00 	.word	0x40012c00
 800a62c:	50012c00 	.word	0x50012c00
 800a630:	40013400 	.word	0x40013400
 800a634:	50013400 	.word	0x50013400
 800a638:	40000400 	.word	0x40000400
 800a63c:	50000400 	.word	0x50000400
 800a640:	40000800 	.word	0x40000800
 800a644:	50000800 	.word	0x50000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	50000c00 	.word	0x50000c00
 800a650:	40014000 	.word	0x40014000
 800a654:	50014000 	.word	0x50014000

0800a658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e042      	b.n	800a6f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7f9 fabf 	bl	8003c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2224      	movs	r2, #36	; 0x24
 800a686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0201 	bic.w	r2, r2, #1
 800a698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f82c 	bl	800a6f8 <UART_SetConfig>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d101      	bne.n	800a6aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e022      	b.n	800a6f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f9c2 	bl	800aa3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f042 0201 	orr.w	r2, r2, #1
 800a6e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fa49 	bl	800ab80 <UART_CheckIdleState>
 800a6ee:	4603      	mov	r3, r0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6fc:	b094      	sub	sp, #80	; 0x50
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a702:	2300      	movs	r3, #0
 800a704:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b7e      	ldr	r3, [pc, #504]	; (800a908 <UART_SetConfig+0x210>)
 800a70e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	431a      	orrs	r2, r3
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	431a      	orrs	r2, r3
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	4313      	orrs	r3, r2
 800a726:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4977      	ldr	r1, [pc, #476]	; (800a90c <UART_SetConfig+0x214>)
 800a730:	4019      	ands	r1, r3
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a738:	430b      	orrs	r3, r1
 800a73a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	68d9      	ldr	r1, [r3, #12]
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	ea40 0301 	orr.w	r3, r0, r1
 800a752:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	4b6a      	ldr	r3, [pc, #424]	; (800a908 <UART_SetConfig+0x210>)
 800a760:	429a      	cmp	r2, r3
 800a762:	d009      	beq.n	800a778 <UART_SetConfig+0x80>
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b69      	ldr	r3, [pc, #420]	; (800a910 <UART_SetConfig+0x218>)
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d004      	beq.n	800a778 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	6a1a      	ldr	r2, [r3, #32]
 800a772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a774:	4313      	orrs	r3, r2
 800a776:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a782:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78c:	430b      	orrs	r3, r1
 800a78e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	f023 000f 	bic.w	r0, r3, #15
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	ea40 0301 	orr.w	r3, r0, r1
 800a7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	4b59      	ldr	r3, [pc, #356]	; (800a914 <UART_SetConfig+0x21c>)
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d102      	bne.n	800a7b8 <UART_SetConfig+0xc0>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7b6:	e029      	b.n	800a80c <UART_SetConfig+0x114>
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b56      	ldr	r3, [pc, #344]	; (800a918 <UART_SetConfig+0x220>)
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d102      	bne.n	800a7c8 <UART_SetConfig+0xd0>
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c6:	e021      	b.n	800a80c <UART_SetConfig+0x114>
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	4b53      	ldr	r3, [pc, #332]	; (800a91c <UART_SetConfig+0x224>)
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d102      	bne.n	800a7d8 <UART_SetConfig+0xe0>
 800a7d2:	2304      	movs	r3, #4
 800a7d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7d6:	e019      	b.n	800a80c <UART_SetConfig+0x114>
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	4b50      	ldr	r3, [pc, #320]	; (800a920 <UART_SetConfig+0x228>)
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d102      	bne.n	800a7e8 <UART_SetConfig+0xf0>
 800a7e2:	2308      	movs	r3, #8
 800a7e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7e6:	e011      	b.n	800a80c <UART_SetConfig+0x114>
 800a7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	4b4d      	ldr	r3, [pc, #308]	; (800a924 <UART_SetConfig+0x22c>)
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d102      	bne.n	800a7f8 <UART_SetConfig+0x100>
 800a7f2:	2310      	movs	r3, #16
 800a7f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7f6:	e009      	b.n	800a80c <UART_SetConfig+0x114>
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	4b42      	ldr	r3, [pc, #264]	; (800a908 <UART_SetConfig+0x210>)
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d102      	bne.n	800a808 <UART_SetConfig+0x110>
 800a802:	2320      	movs	r3, #32
 800a804:	64bb      	str	r3, [r7, #72]	; 0x48
 800a806:	e001      	b.n	800a80c <UART_SetConfig+0x114>
 800a808:	2300      	movs	r3, #0
 800a80a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b3d      	ldr	r3, [pc, #244]	; (800a908 <UART_SetConfig+0x210>)
 800a812:	429a      	cmp	r2, r3
 800a814:	d005      	beq.n	800a822 <UART_SetConfig+0x12a>
 800a816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4b3d      	ldr	r3, [pc, #244]	; (800a910 <UART_SetConfig+0x218>)
 800a81c:	429a      	cmp	r2, r3
 800a81e:	f040 8085 	bne.w	800a92c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a824:	2200      	movs	r2, #0
 800a826:	623b      	str	r3, [r7, #32]
 800a828:	627a      	str	r2, [r7, #36]	; 0x24
 800a82a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a82e:	f7fe f909 	bl	8008a44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a832:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 80e8 	beq.w	800aa0c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	4a39      	ldr	r2, [pc, #228]	; (800a928 <UART_SetConfig+0x230>)
 800a842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a846:	461a      	mov	r2, r3
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	4613      	mov	r3, r2
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	4413      	add	r3, r2
 800a85a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d305      	bcc.n	800a86c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a868:	429a      	cmp	r2, r3
 800a86a:	d903      	bls.n	800a874 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a872:	e048      	b.n	800a906 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a876:	2200      	movs	r2, #0
 800a878:	61bb      	str	r3, [r7, #24]
 800a87a:	61fa      	str	r2, [r7, #28]
 800a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	4a29      	ldr	r2, [pc, #164]	; (800a928 <UART_SetConfig+0x230>)
 800a882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a886:	b29b      	uxth	r3, r3
 800a888:	2200      	movs	r2, #0
 800a88a:	613b      	str	r3, [r7, #16]
 800a88c:	617a      	str	r2, [r7, #20]
 800a88e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a896:	f7f6 f98d 	bl	8000bb4 <__aeabi_uldivmod>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4610      	mov	r0, r2
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f04f 0200 	mov.w	r2, #0
 800a8a6:	f04f 0300 	mov.w	r3, #0
 800a8aa:	020b      	lsls	r3, r1, #8
 800a8ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8b0:	0202      	lsls	r2, r0, #8
 800a8b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8b4:	6849      	ldr	r1, [r1, #4]
 800a8b6:	0849      	lsrs	r1, r1, #1
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	4605      	mov	r5, r0
 800a8be:	eb12 0804 	adds.w	r8, r2, r4
 800a8c2:	eb43 0905 	adc.w	r9, r3, r5
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	60bb      	str	r3, [r7, #8]
 800a8ce:	60fa      	str	r2, [r7, #12]
 800a8d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8d4:	4640      	mov	r0, r8
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	f7f6 f96c 	bl	8000bb4 <__aeabi_uldivmod>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ea:	d308      	bcc.n	800a8fe <UART_SetConfig+0x206>
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8f2:	d204      	bcs.n	800a8fe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8fa:	60da      	str	r2, [r3, #12]
 800a8fc:	e003      	b.n	800a906 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a904:	e082      	b.n	800aa0c <UART_SetConfig+0x314>
 800a906:	e081      	b.n	800aa0c <UART_SetConfig+0x314>
 800a908:	46002400 	.word	0x46002400
 800a90c:	cfff69f3 	.word	0xcfff69f3
 800a910:	56002400 	.word	0x56002400
 800a914:	40013800 	.word	0x40013800
 800a918:	40004400 	.word	0x40004400
 800a91c:	40004800 	.word	0x40004800
 800a920:	40004c00 	.word	0x40004c00
 800a924:	40005000 	.word	0x40005000
 800a928:	0800dcb8 	.word	0x0800dcb8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a934:	d13c      	bne.n	800a9b0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a938:	2200      	movs	r2, #0
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	607a      	str	r2, [r7, #4]
 800a93e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a942:	f7fe f87f 	bl	8008a44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a946:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d05e      	beq.n	800aa0c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	4a39      	ldr	r2, [pc, #228]	; (800aa38 <UART_SetConfig+0x340>)
 800a954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a958:	461a      	mov	r2, r3
 800a95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a95c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a960:	005a      	lsls	r2, r3, #1
 800a962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	085b      	lsrs	r3, r3, #1
 800a968:	441a      	add	r2, r3
 800a96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a976:	2b0f      	cmp	r3, #15
 800a978:	d916      	bls.n	800a9a8 <UART_SetConfig+0x2b0>
 800a97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a980:	d212      	bcs.n	800a9a8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a984:	b29b      	uxth	r3, r3
 800a986:	f023 030f 	bic.w	r3, r3, #15
 800a98a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98e:	085b      	lsrs	r3, r3, #1
 800a990:	b29b      	uxth	r3, r3
 800a992:	f003 0307 	and.w	r3, r3, #7
 800a996:	b29a      	uxth	r2, r3
 800a998:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a99a:	4313      	orrs	r3, r2
 800a99c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a9a4:	60da      	str	r2, [r3, #12]
 800a9a6:	e031      	b.n	800aa0c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9ae:	e02d      	b.n	800aa0c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a9b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	469a      	mov	sl, r3
 800a9b6:	4693      	mov	fp, r2
 800a9b8:	4650      	mov	r0, sl
 800a9ba:	4659      	mov	r1, fp
 800a9bc:	f7fe f842 	bl	8008a44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9c0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d021      	beq.n	800aa0c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	4a1a      	ldr	r2, [pc, #104]	; (800aa38 <UART_SetConfig+0x340>)
 800a9ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	441a      	add	r2, r3
 800a9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ee:	2b0f      	cmp	r3, #15
 800a9f0:	d909      	bls.n	800aa06 <UART_SetConfig+0x30e>
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f8:	d205      	bcs.n	800aa06 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60da      	str	r2, [r3, #12]
 800aa04:	e002      	b.n	800aa0c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	2201      	movs	r2, #1
 800aa18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	2200      	movs	r2, #0
 800aa20:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	2200      	movs	r2, #0
 800aa26:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aa28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3750      	adds	r7, #80	; 0x50
 800aa30:	46bd      	mov	sp, r7
 800aa32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa36:	bf00      	nop
 800aa38:	0800dcb8 	.word	0x0800dcb8

0800aa3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa48:	f003 0301 	and.w	r3, r3, #1
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00a      	beq.n	800aa66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	f003 0302 	and.w	r3, r3, #2
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00a      	beq.n	800aaaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	430a      	orrs	r2, r1
 800aaca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad0:	f003 0310 	and.w	r3, r3, #16
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00a      	beq.n	800aaee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf2:	f003 0320 	and.w	r3, r3, #32
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01a      	beq.n	800ab52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab3a:	d10a      	bne.n	800ab52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	605a      	str	r2, [r3, #4]
  }
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af02      	add	r7, sp, #8
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab90:	f7f9 fa40 	bl	8004014 <HAL_GetTick>
 800ab94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0308 	and.w	r3, r3, #8
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d10e      	bne.n	800abc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f82f 	bl	800ac16 <UART_WaitOnFlagUntilTimeout>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e025      	b.n	800ac0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 0304 	and.w	r3, r3, #4
 800abcc:	2b04      	cmp	r3, #4
 800abce:	d10e      	bne.n	800abee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f819 	bl	800ac16 <UART_WaitOnFlagUntilTimeout>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e00f      	b.n	800ac0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b09c      	sub	sp, #112	; 0x70
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	603b      	str	r3, [r7, #0]
 800ac22:	4613      	mov	r3, r2
 800ac24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac26:	e0a9      	b.n	800ad7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2e:	f000 80a5 	beq.w	800ad7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac32:	f7f9 f9ef 	bl	8004014 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d302      	bcc.n	800ac48 <UART_WaitOnFlagUntilTimeout+0x32>
 800ac42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d140      	bne.n	800acca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ac74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e6      	bne.n	800ac48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3308      	adds	r3, #8
 800ac80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac84:	e853 3f00 	ldrex	r3, [r3]
 800ac88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8c:	f023 0301 	bic.w	r3, r3, #1
 800ac90:	663b      	str	r3, [r7, #96]	; 0x60
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3308      	adds	r3, #8
 800ac98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac9a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aca2:	e841 2300 	strex	r3, r2, [r1]
 800aca6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1e5      	bne.n	800ac7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2220      	movs	r2, #32
 800acb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2220      	movs	r2, #32
 800acba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e069      	b.n	800ad9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d051      	beq.n	800ad7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ace2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ace6:	d149      	bne.n	800ad7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	e853 3f00 	ldrex	r3, [r3]
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad10:	637b      	str	r3, [r7, #52]	; 0x34
 800ad12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad18:	e841 2300 	strex	r3, r2, [r1]
 800ad1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1e6      	bne.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	613b      	str	r3, [r7, #16]
   return(result);
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f023 0301 	bic.w	r3, r3, #1
 800ad3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3308      	adds	r3, #8
 800ad42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad44:	623a      	str	r2, [r7, #32]
 800ad46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	69f9      	ldr	r1, [r7, #28]
 800ad4a:	6a3a      	ldr	r2, [r7, #32]
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e5      	bne.n	800ad24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2220      	movs	r2, #32
 800ad64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e010      	b.n	800ad9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69da      	ldr	r2, [r3, #28]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	4013      	ands	r3, r2
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	bf0c      	ite	eq
 800ad8c:	2301      	moveq	r3, #1
 800ad8e:	2300      	movne	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	461a      	mov	r2, r3
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	f43f af46 	beq.w	800ac28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3770      	adds	r7, #112	; 0x70
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_UARTEx_DisableFifoMode+0x16>
 800adb8:	2302      	movs	r3, #2
 800adba:	e027      	b.n	800ae0c <HAL_UARTEx_DisableFifoMode+0x66>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2224      	movs	r2, #36	; 0x24
 800adc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0201 	bic.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800adea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e02d      	b.n	800ae8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2224      	movs	r2, #36	; 0x24
 800ae3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f84f 	bl	800af10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e02d      	b.n	800af08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2224      	movs	r2, #36	; 0x24
 800aeb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f811 	bl	800af10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d108      	bne.n	800af32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af30:	e031      	b.n	800af96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af32:	2308      	movs	r3, #8
 800af34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af36:	2308      	movs	r3, #8
 800af38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	0e5b      	lsrs	r3, r3, #25
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	0f5b      	lsrs	r3, r3, #29
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	7b3a      	ldrb	r2, [r7, #12]
 800af5e:	4911      	ldr	r1, [pc, #68]	; (800afa4 <UARTEx_SetNbDataToProcess+0x94>)
 800af60:	5c8a      	ldrb	r2, [r1, r2]
 800af62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af66:	7b3a      	ldrb	r2, [r7, #12]
 800af68:	490f      	ldr	r1, [pc, #60]	; (800afa8 <UARTEx_SetNbDataToProcess+0x98>)
 800af6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af70:	b29a      	uxth	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	7b7a      	ldrb	r2, [r7, #13]
 800af7c:	4909      	ldr	r1, [pc, #36]	; (800afa4 <UARTEx_SetNbDataToProcess+0x94>)
 800af7e:	5c8a      	ldrb	r2, [r1, r2]
 800af80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af84:	7b7a      	ldrb	r2, [r7, #13]
 800af86:	4908      	ldr	r1, [pc, #32]	; (800afa8 <UARTEx_SetNbDataToProcess+0x98>)
 800af88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	0800dcd0 	.word	0x0800dcd0
 800afa8:	0800dcd8 	.word	0x0800dcd8

0800afac <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800afac:	b480      	push	{r7}
 800afae:	b08b      	sub	sp, #44	; 0x2c
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	fa93 f3a3 	rbit	r3, r3
 800afc6:	613b      	str	r3, [r7, #16]
  return result;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800afd2:	2320      	movs	r3, #32
 800afd4:	e003      	b.n	800afde <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	fab3 f383 	clz	r3, r3
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	2103      	movs	r1, #3
 800afe2:	fa01 f303 	lsl.w	r3, r1, r3
 800afe6:	43db      	mvns	r3, r3
 800afe8:	401a      	ands	r2, r3
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	fa93 f3a3 	rbit	r3, r3
 800aff4:	61fb      	str	r3, [r7, #28]
  return result;
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b000:	2320      	movs	r3, #32
 800b002:	e003      	b.n	800b00c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	fab3 f383 	clz	r3, r3
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	fa01 f303 	lsl.w	r3, r1, r3
 800b014:	431a      	orrs	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	601a      	str	r2, [r3, #0]
}
 800b01a:	bf00      	nop
 800b01c:	372c      	adds	r7, #44	; 0x2c
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	43db      	mvns	r3, r3
 800b03a:	401a      	ands	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	fb01 f303 	mul.w	r3, r1, r3
 800b044:	431a      	orrs	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	605a      	str	r2, [r3, #4]
}
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800b056:	b480      	push	{r7}
 800b058:	b08b      	sub	sp, #44	; 0x2c
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	689a      	ldr	r2, [r3, #8]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	fa93 f3a3 	rbit	r3, r3
 800b070:	613b      	str	r3, [r7, #16]
  return result;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b07c:	2320      	movs	r3, #32
 800b07e:	e003      	b.n	800b088 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	fab3 f383 	clz	r3, r3
 800b086:	b2db      	uxtb	r3, r3
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	2103      	movs	r1, #3
 800b08c:	fa01 f303 	lsl.w	r3, r1, r3
 800b090:	43db      	mvns	r3, r3
 800b092:	401a      	ands	r2, r3
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	fa93 f3a3 	rbit	r3, r3
 800b09e:	61fb      	str	r3, [r7, #28]
  return result;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d101      	bne.n	800b0ae <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b0aa:	2320      	movs	r3, #32
 800b0ac:	e003      	b.n	800b0b6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	fab3 f383 	clz	r3, r3
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800b0c4:	bf00      	nop
 800b0c6:	372c      	adds	r7, #44	; 0x2c
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b08b      	sub	sp, #44	; 0x2c
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	fa93 f3a3 	rbit	r3, r3
 800b0ea:	613b      	str	r3, [r7, #16]
  return result;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b0f6:	2320      	movs	r3, #32
 800b0f8:	e003      	b.n	800b102 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	fab3 f383 	clz	r3, r3
 800b100:	b2db      	uxtb	r3, r3
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	2103      	movs	r1, #3
 800b106:	fa01 f303 	lsl.w	r3, r1, r3
 800b10a:	43db      	mvns	r3, r3
 800b10c:	401a      	ands	r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	fa93 f3a3 	rbit	r3, r3
 800b118:	61fb      	str	r3, [r7, #28]
  return result;
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b124:	2320      	movs	r3, #32
 800b126:	e003      	b.n	800b130 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	fab3 f383 	clz	r3, r3
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	fa01 f303 	lsl.w	r3, r1, r3
 800b138:	431a      	orrs	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	60da      	str	r2, [r3, #12]
}
 800b13e:	bf00      	nop
 800b140:	372c      	adds	r7, #44	; 0x2c
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b08b      	sub	sp, #44	; 0x2c
 800b14e:	af00      	add	r7, sp, #0
 800b150:	60f8      	str	r0, [r7, #12]
 800b152:	60b9      	str	r1, [r7, #8]
 800b154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6a1a      	ldr	r2, [r3, #32]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	fa93 f3a3 	rbit	r3, r3
 800b164:	613b      	str	r3, [r7, #16]
  return result;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b170:	2320      	movs	r3, #32
 800b172:	e003      	b.n	800b17c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	fab3 f383 	clz	r3, r3
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	210f      	movs	r1, #15
 800b180:	fa01 f303 	lsl.w	r3, r1, r3
 800b184:	43db      	mvns	r3, r3
 800b186:	401a      	ands	r2, r3
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b18c:	6a3b      	ldr	r3, [r7, #32]
 800b18e:	fa93 f3a3 	rbit	r3, r3
 800b192:	61fb      	str	r3, [r7, #28]
  return result;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b19e:	2320      	movs	r3, #32
 800b1a0:	e003      	b.n	800b1aa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a4:	fab3 f383 	clz	r3, r3
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	6879      	ldr	r1, [r7, #4]
 800b1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800b1b8:	bf00      	nop
 800b1ba:	372c      	adds	r7, #44	; 0x2c
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b08b      	sub	sp, #44	; 0x2c
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	60b9      	str	r1, [r7, #8]
 800b1ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	0a1b      	lsrs	r3, r3, #8
 800b1d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	fa93 f3a3 	rbit	r3, r3
 800b1e0:	613b      	str	r3, [r7, #16]
  return result;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b1ec:	2320      	movs	r3, #32
 800b1ee:	e003      	b.n	800b1f8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	fab3 f383 	clz	r3, r3
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	210f      	movs	r1, #15
 800b1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b200:	43db      	mvns	r3, r3
 800b202:	401a      	ands	r2, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	0a1b      	lsrs	r3, r3, #8
 800b208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	fa93 f3a3 	rbit	r3, r3
 800b210:	61fb      	str	r3, [r7, #28]
  return result;
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b21c:	2320      	movs	r3, #32
 800b21e:	e003      	b.n	800b228 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	fab3 f383 	clz	r3, r3
 800b226:	b2db      	uxtb	r3, r3
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	fa01 f303 	lsl.w	r3, r1, r3
 800b230:	431a      	orrs	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b236:	bf00      	nop
 800b238:	372c      	adds	r7, #44	; 0x2c
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b08a      	sub	sp, #40	; 0x28
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	fa93 f3a3 	rbit	r3, r3
 800b258:	617b      	str	r3, [r7, #20]
  return result;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <LL_GPIO_Init+0x26>
    return 32U;
 800b264:	2320      	movs	r3, #32
 800b266:	e003      	b.n	800b270 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	fab3 f383 	clz	r3, r3
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b272:	e050      	b.n	800b316 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	2101      	movs	r1, #1
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	fa01 f303 	lsl.w	r3, r1, r3
 800b280:	4013      	ands	r3, r2
 800b282:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d042      	beq.n	800b310 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	461a      	mov	r2, r3
 800b290:	6a39      	ldr	r1, [r7, #32]
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff fe8a 	bl	800afac <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d003      	beq.n	800b2a8 <LL_GPIO_Init+0x66>
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d106      	bne.n	800b2b6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	6a39      	ldr	r1, [r7, #32]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff fed0 	bl	800b056 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6a39      	ldr	r1, [r7, #32]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff ff06 	bl	800b0d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d121      	bne.n	800b310 <LL_GPIO_Init+0xce>
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	fa93 f3a3 	rbit	r3, r3
 800b2d6:	60bb      	str	r3, [r7, #8]
  return result;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <LL_GPIO_Init+0xa4>
    return 32U;
 800b2e2:	2320      	movs	r3, #32
 800b2e4:	e003      	b.n	800b2ee <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	fab3 f383 	clz	r3, r3
 800b2ec:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b2ee:	2b07      	cmp	r3, #7
 800b2f0:	d807      	bhi.n	800b302 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	6a39      	ldr	r1, [r7, #32]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ff25 	bl	800b14a <LL_GPIO_SetAFPin_0_7>
 800b300:	e006      	b.n	800b310 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	461a      	mov	r2, r3
 800b308:	6a39      	ldr	r1, [r7, #32]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff ff5a 	bl	800b1c4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	3301      	adds	r3, #1
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	fa22 f303 	lsr.w	r3, r2, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1a7      	bne.n	800b274 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d003      	beq.n	800b334 <LL_GPIO_Init+0xf2>
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d107      	bne.n	800b344 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	6819      	ldr	r1, [r3, #0]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	461a      	mov	r2, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fe71 	bl	800b026 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3728      	adds	r7, #40	; 0x28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b34e:	b084      	sub	sp, #16
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	f107 001c 	add.w	r0, r7, #28
 800b35c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fd8f 	bl	800be90 <USB_CoreReset>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	639a      	str	r2, [r3, #56]	; 0x38
 800b388:	e005      	b.n	800b396 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3a2:	b004      	add	sp, #16
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d165      	bne.n	800b488 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	4a41      	ldr	r2, [pc, #260]	; (800b4c4 <USB_SetTurnaroundTime+0x11c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d906      	bls.n	800b3d2 <USB_SetTurnaroundTime+0x2a>
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	4a40      	ldr	r2, [pc, #256]	; (800b4c8 <USB_SetTurnaroundTime+0x120>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d202      	bcs.n	800b3d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b3cc:	230f      	movs	r3, #15
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	e062      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	4a3c      	ldr	r2, [pc, #240]	; (800b4c8 <USB_SetTurnaroundTime+0x120>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d306      	bcc.n	800b3e8 <USB_SetTurnaroundTime+0x40>
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	4a3b      	ldr	r2, [pc, #236]	; (800b4cc <USB_SetTurnaroundTime+0x124>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d202      	bcs.n	800b3e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b3e2:	230e      	movs	r3, #14
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e057      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	4a38      	ldr	r2, [pc, #224]	; (800b4cc <USB_SetTurnaroundTime+0x124>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d306      	bcc.n	800b3fe <USB_SetTurnaroundTime+0x56>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4a37      	ldr	r2, [pc, #220]	; (800b4d0 <USB_SetTurnaroundTime+0x128>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d202      	bcs.n	800b3fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b3f8:	230d      	movs	r3, #13
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	e04c      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	4a33      	ldr	r2, [pc, #204]	; (800b4d0 <USB_SetTurnaroundTime+0x128>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d306      	bcc.n	800b414 <USB_SetTurnaroundTime+0x6c>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	4a32      	ldr	r2, [pc, #200]	; (800b4d4 <USB_SetTurnaroundTime+0x12c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d802      	bhi.n	800b414 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b40e:	230c      	movs	r3, #12
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	e041      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4a2f      	ldr	r2, [pc, #188]	; (800b4d4 <USB_SetTurnaroundTime+0x12c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d906      	bls.n	800b42a <USB_SetTurnaroundTime+0x82>
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	4a2e      	ldr	r2, [pc, #184]	; (800b4d8 <USB_SetTurnaroundTime+0x130>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d802      	bhi.n	800b42a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b424:	230b      	movs	r3, #11
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	e036      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	4a2a      	ldr	r2, [pc, #168]	; (800b4d8 <USB_SetTurnaroundTime+0x130>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d906      	bls.n	800b440 <USB_SetTurnaroundTime+0x98>
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	4a29      	ldr	r2, [pc, #164]	; (800b4dc <USB_SetTurnaroundTime+0x134>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d802      	bhi.n	800b440 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b43a:	230a      	movs	r3, #10
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e02b      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	4a26      	ldr	r2, [pc, #152]	; (800b4dc <USB_SetTurnaroundTime+0x134>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d906      	bls.n	800b456 <USB_SetTurnaroundTime+0xae>
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4a25      	ldr	r2, [pc, #148]	; (800b4e0 <USB_SetTurnaroundTime+0x138>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d202      	bcs.n	800b456 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b450:	2309      	movs	r3, #9
 800b452:	617b      	str	r3, [r7, #20]
 800b454:	e020      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	4a21      	ldr	r2, [pc, #132]	; (800b4e0 <USB_SetTurnaroundTime+0x138>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d306      	bcc.n	800b46c <USB_SetTurnaroundTime+0xc4>
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4a20      	ldr	r2, [pc, #128]	; (800b4e4 <USB_SetTurnaroundTime+0x13c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d802      	bhi.n	800b46c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b466:	2308      	movs	r3, #8
 800b468:	617b      	str	r3, [r7, #20]
 800b46a:	e015      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <USB_SetTurnaroundTime+0x13c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d906      	bls.n	800b482 <USB_SetTurnaroundTime+0xda>
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	4a1c      	ldr	r2, [pc, #112]	; (800b4e8 <USB_SetTurnaroundTime+0x140>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d202      	bcs.n	800b482 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b47c:	2307      	movs	r3, #7
 800b47e:	617b      	str	r3, [r7, #20]
 800b480:	e00a      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b482:	2306      	movs	r3, #6
 800b484:	617b      	str	r3, [r7, #20]
 800b486:	e007      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b48e:	2309      	movs	r3, #9
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e001      	b.n	800b498 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b494:	2309      	movs	r3, #9
 800b496:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	029b      	lsls	r3, r3, #10
 800b4ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	371c      	adds	r7, #28
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	00d8acbf 	.word	0x00d8acbf
 800b4c8:	00e4e1c0 	.word	0x00e4e1c0
 800b4cc:	00f42400 	.word	0x00f42400
 800b4d0:	01067380 	.word	0x01067380
 800b4d4:	011a499f 	.word	0x011a499f
 800b4d8:	01312cff 	.word	0x01312cff
 800b4dc:	014ca43f 	.word	0x014ca43f
 800b4e0:	016e3600 	.word	0x016e3600
 800b4e4:	01a6ab1f 	.word	0x01a6ab1f
 800b4e8:	01e84800 	.word	0x01e84800

0800b4ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f023 0201 	bic.w	r2, r3, #1
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d115      	bne.n	800b55c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b53c:	2001      	movs	r0, #1
 800b53e:	f7f8 fd75 	bl	800402c <HAL_Delay>
      ms++;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3301      	adds	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fc11 	bl	800bd70 <USB_GetMode>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b01      	cmp	r3, #1
 800b552:	d01e      	beq.n	800b592 <USB_SetCurrentMode+0x84>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b31      	cmp	r3, #49	; 0x31
 800b558:	d9f0      	bls.n	800b53c <USB_SetCurrentMode+0x2e>
 800b55a:	e01a      	b.n	800b592 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b55c:	78fb      	ldrb	r3, [r7, #3]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d115      	bne.n	800b58e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b56e:	2001      	movs	r0, #1
 800b570:	f7f8 fd5c 	bl	800402c <HAL_Delay>
      ms++;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3301      	adds	r3, #1
 800b578:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fbf8 	bl	800bd70 <USB_GetMode>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d005      	beq.n	800b592 <USB_SetCurrentMode+0x84>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b31      	cmp	r3, #49	; 0x31
 800b58a:	d9f0      	bls.n	800b56e <USB_SetCurrentMode+0x60>
 800b58c:	e001      	b.n	800b592 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e005      	b.n	800b59e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b32      	cmp	r3, #50	; 0x32
 800b596:	d101      	bne.n	800b59c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e000      	b.n	800b59e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b086      	sub	sp, #24
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b5b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	e009      	b.n	800b5dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	3340      	adds	r3, #64	; 0x40
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	613b      	str	r3, [r7, #16]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2b0e      	cmp	r3, #14
 800b5e0:	d9f2      	bls.n	800b5c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d11c      	bne.n	800b622 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5f6:	f043 0302 	orr.w	r3, r3, #2
 800b5fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b600:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	e005      	b.n	800b62e <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b626:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b634:	461a      	mov	r2, r3
 800b636:	2300      	movs	r3, #0
 800b638:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b640:	4619      	mov	r1, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b648:	461a      	mov	r2, r3
 800b64a:	680b      	ldr	r3, [r1, #0]
 800b64c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b64e:	2103      	movs	r1, #3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f95b 	bl	800b90c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b656:	2110      	movs	r1, #16
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f8f3 	bl	800b844 <USB_FlushTxFifo>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f91f 	bl	800b8ac <USB_FlushRxFifo>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b67e:	461a      	mov	r2, r3
 800b680:	2300      	movs	r3, #0
 800b682:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b68a:	461a      	mov	r2, r3
 800b68c:	2300      	movs	r3, #0
 800b68e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b696:	461a      	mov	r2, r3
 800b698:	2300      	movs	r3, #0
 800b69a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b69c:	2300      	movs	r3, #0
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	e043      	b.n	800b72a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6b8:	d118      	bne.n	800b6ec <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10a      	bne.n	800b6d6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	e013      	b.n	800b6fe <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6e8:	6013      	str	r3, [r2, #0]
 800b6ea:	e008      	b.n	800b6fe <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70a:	461a      	mov	r2, r3
 800b70c:	2300      	movs	r3, #0
 800b70e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71c:	461a      	mov	r2, r3
 800b71e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b722:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	3301      	adds	r3, #1
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d3b7      	bcc.n	800b6a2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b732:	2300      	movs	r3, #0
 800b734:	613b      	str	r3, [r7, #16]
 800b736:	e043      	b.n	800b7c0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b74a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b74e:	d118      	bne.n	800b782 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b762:	461a      	mov	r2, r3
 800b764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	e013      	b.n	800b794 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b778:	461a      	mov	r2, r3
 800b77a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	e008      	b.n	800b794 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78e:	461a      	mov	r2, r3
 800b790:	2300      	movs	r3, #0
 800b792:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d3b7      	bcc.n	800b738 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	f043 0210 	orr.w	r2, r3, #16
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	699a      	ldr	r2, [r3, #24]
 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <USB_DevInit+0x298>)
 800b802:	4313      	orrs	r3, r2
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d005      	beq.n	800b81a <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	f043 0208 	orr.w	r2, r3, #8
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d107      	bne.n	800b830 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b828:	f043 0304 	orr.w	r3, r3, #4
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b830:	7dfb      	ldrb	r3, [r7, #23]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3718      	adds	r7, #24
 800b836:	46bd      	mov	sp, r7
 800b838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b83c:	b004      	add	sp, #16
 800b83e:	4770      	bx	lr
 800b840:	803c3800 	.word	0x803c3800

0800b844 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3301      	adds	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4a13      	ldr	r2, [pc, #76]	; (800b8a8 <USB_FlushTxFifo+0x64>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d901      	bls.n	800b864 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e01b      	b.n	800b89c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	daf2      	bge.n	800b852 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	019b      	lsls	r3, r3, #6
 800b874:	f043 0220 	orr.w	r2, r3, #32
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	3301      	adds	r3, #1
 800b880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	4a08      	ldr	r2, [pc, #32]	; (800b8a8 <USB_FlushTxFifo+0x64>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d901      	bls.n	800b88e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e006      	b.n	800b89c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	f003 0320 	and.w	r3, r3, #32
 800b896:	2b20      	cmp	r3, #32
 800b898:	d0f0      	beq.n	800b87c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	00030d40 	.word	0x00030d40

0800b8ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4a11      	ldr	r2, [pc, #68]	; (800b908 <USB_FlushRxFifo+0x5c>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d901      	bls.n	800b8ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	e018      	b.n	800b8fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	daf2      	bge.n	800b8b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2210      	movs	r2, #16
 800b8da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	4a08      	ldr	r2, [pc, #32]	; (800b908 <USB_FlushRxFifo+0x5c>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d901      	bls.n	800b8ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e006      	b.n	800b8fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b10      	cmp	r3, #16
 800b8f8:	d0f0      	beq.n	800b8dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	00030d40 	.word	0x00030d40

0800b90c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b92c:	4313      	orrs	r3, r2
 800b92e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b93e:	b480      	push	{r7}
 800b940:	b087      	sub	sp, #28
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 0306 	and.w	r3, r3, #6
 800b956:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d102      	bne.n	800b964 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b95e:	2300      	movs	r3, #0
 800b960:	75fb      	strb	r3, [r7, #23]
 800b962:	e00a      	b.n	800b97a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2b02      	cmp	r3, #2
 800b968:	d002      	beq.n	800b970 <USB_GetDevSpeed+0x32>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b06      	cmp	r3, #6
 800b96e:	d102      	bne.n	800b976 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b970:	2302      	movs	r3, #2
 800b972:	75fb      	strb	r3, [r7, #23]
 800b974:	e001      	b.n	800b97a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b976:	230f      	movs	r3, #15
 800b978:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	371c      	adds	r7, #28
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b988:	b480      	push	{r7}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d14a      	bne.n	800ba3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9be:	f040 8086 	bne.w	800bace <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	7812      	ldrb	r2, [r2, #0]
 800b9d6:	0151      	lsls	r1, r2, #5
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	440a      	add	r2, r1
 800b9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b9e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	0151      	lsls	r1, r2, #5
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	440a      	add	r2, r1
 800ba00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f242 7210 	movw	r2, #10000	; 0x2710
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d902      	bls.n	800ba20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ba1e:	e056      	b.n	800bace <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	015a      	lsls	r2, r3, #5
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba38:	d0e7      	beq.n	800ba0a <USB_EPStopXfer+0x82>
 800ba3a:	e048      	b.n	800bace <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba54:	d13b      	bne.n	800bace <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	0151      	lsls	r1, r2, #5
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	440a      	add	r2, r1
 800ba70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	7812      	ldrb	r2, [r2, #0]
 800ba8e:	0151      	lsls	r1, r2, #5
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	440a      	add	r2, r1
 800ba94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3301      	adds	r3, #1
 800baa2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f242 7210 	movw	r2, #10000	; 0x2710
 800baaa:	4293      	cmp	r3, r2
 800baac:	d902      	bls.n	800bab4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	75fb      	strb	r3, [r7, #23]
          break;
 800bab2:	e00c      	b.n	800bace <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bacc:	d0e7      	beq.n	800ba9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bace:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	371c      	adds	r7, #28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800badc:	b480      	push	{r7}
 800bade:	b089      	sub	sp, #36	; 0x24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	4611      	mov	r1, r2
 800bae8:	461a      	mov	r2, r3
 800baea:	460b      	mov	r3, r1
 800baec:	71fb      	strb	r3, [r7, #7]
 800baee:	4613      	mov	r3, r2
 800baf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bafa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d123      	bne.n	800bb4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb02:	88bb      	ldrh	r3, [r7, #4]
 800bb04:	3303      	adds	r3, #3
 800bb06:	089b      	lsrs	r3, r3, #2
 800bb08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61bb      	str	r3, [r7, #24]
 800bb0e:	e018      	b.n	800bb42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	031a      	lsls	r2, r3, #12
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	3301      	adds	r3, #1
 800bb28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	3301      	adds	r3, #1
 800bb34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	61bb      	str	r3, [r7, #24]
 800bb42:	69ba      	ldr	r2, [r7, #24]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d3e2      	bcc.n	800bb10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3724      	adds	r7, #36	; 0x24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b08b      	sub	sp, #44	; 0x2c
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	4613      	mov	r3, r2
 800bb64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bb6e:	88fb      	ldrh	r3, [r7, #6]
 800bb70:	089b      	lsrs	r3, r3, #2
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bb76:	88fb      	ldrh	r3, [r7, #6]
 800bb78:	f003 0303 	and.w	r3, r3, #3
 800bb7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bb7e:	2300      	movs	r3, #0
 800bb80:	623b      	str	r3, [r7, #32]
 800bb82:	e014      	b.n	800bbae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	3301      	adds	r3, #1
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	3301      	adds	r3, #1
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	3301      	adds	r3, #1
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	3301      	adds	r3, #1
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	623b      	str	r3, [r7, #32]
 800bbae:	6a3a      	ldr	r2, [r7, #32]
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d3e6      	bcc.n	800bb84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bbb6:	8bfb      	ldrh	r3, [r7, #30]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d01e      	beq.n	800bbfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f107 0310 	add.w	r3, r7, #16
 800bbcc:	6812      	ldr	r2, [r2, #0]
 800bbce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	701a      	strb	r2, [r3, #0]
      i++;
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	623b      	str	r3, [r7, #32]
      pDest++;
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbea:	3301      	adds	r3, #1
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bbee:	8bfb      	ldrh	r3, [r7, #30]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bbf4:	8bfb      	ldrh	r3, [r7, #30]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1ea      	bne.n	800bbd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	372c      	adds	r7, #44	; 0x2c
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc22:	f023 0303 	bic.w	r3, r3, #3
 800bc26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc36:	f043 0302 	orr.w	r3, r3, #2
 800bc3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b085      	sub	sp, #20
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4013      	ands	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc62:	68fb      	ldr	r3, [r7, #12]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	4013      	ands	r3, r2
 800bc92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	0c1b      	lsrs	r3, r3, #16
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc0:	69db      	ldr	r3, [r3, #28]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	b29b      	uxth	r3, r3
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bce8:	78fb      	ldrb	r3, [r7, #3]
 800bcea:	015a      	lsls	r2, r3, #5
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	4013      	ands	r3, r2
 800bd04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd06:	68bb      	ldr	r3, [r7, #8]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b087      	sub	sp, #28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd36:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd38:	78fb      	ldrb	r3, [r7, #3]
 800bd3a:	f003 030f 	and.w	r3, r3, #15
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	fa22 f303 	lsr.w	r3, r2, r3
 800bd44:	01db      	lsls	r3, r3, #7
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bd4e:	78fb      	ldrb	r3, [r7, #3]
 800bd50:	015a      	lsls	r2, r3, #5
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	4013      	ands	r3, r2
 800bd60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd62:	68bb      	ldr	r3, [r7, #8]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	371c      	adds	r7, #28
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	695b      	ldr	r3, [r3, #20]
 800bd7c:	f003 0301 	and.w	r3, r3, #1
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bda6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bdaa:	f023 0307 	bic.w	r3, r3, #7
 800bdae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3714      	adds	r7, #20
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	460b      	mov	r3, r1
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	333c      	adds	r3, #60	; 0x3c
 800bdea:	3304      	adds	r3, #4
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	4a26      	ldr	r2, [pc, #152]	; (800be8c <USB_EP0_OutStart+0xb8>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d90a      	bls.n	800be0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be08:	d101      	bne.n	800be0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	e037      	b.n	800be7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be14:	461a      	mov	r2, r3
 800be16:	2300      	movs	r3, #0
 800be18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be3c:	f043 0318 	orr.w	r3, r3, #24
 800be40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800be54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800be56:	7afb      	ldrb	r3, [r7, #11]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d10f      	bne.n	800be7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be62:	461a      	mov	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	371c      	adds	r7, #28
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	4f54300a 	.word	0x4f54300a

0800be90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3301      	adds	r3, #1
 800bea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	4a13      	ldr	r2, [pc, #76]	; (800bef4 <USB_CoreReset+0x64>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d901      	bls.n	800beae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e01b      	b.n	800bee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	daf2      	bge.n	800be9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	f043 0201 	orr.w	r2, r3, #1
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3301      	adds	r3, #1
 800beca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4a09      	ldr	r2, [pc, #36]	; (800bef4 <USB_CoreReset+0x64>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d901      	bls.n	800bed8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e006      	b.n	800bee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d0f0      	beq.n	800bec6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	00030d40 	.word	0x00030d40

0800bef8 <__libc_init_array>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	4d0d      	ldr	r5, [pc, #52]	; (800bf30 <__libc_init_array+0x38>)
 800befc:	2600      	movs	r6, #0
 800befe:	4c0d      	ldr	r4, [pc, #52]	; (800bf34 <__libc_init_array+0x3c>)
 800bf00:	1b64      	subs	r4, r4, r5
 800bf02:	10a4      	asrs	r4, r4, #2
 800bf04:	42a6      	cmp	r6, r4
 800bf06:	d109      	bne.n	800bf1c <__libc_init_array+0x24>
 800bf08:	4d0b      	ldr	r5, [pc, #44]	; (800bf38 <__libc_init_array+0x40>)
 800bf0a:	2600      	movs	r6, #0
 800bf0c:	4c0b      	ldr	r4, [pc, #44]	; (800bf3c <__libc_init_array+0x44>)
 800bf0e:	f000 f81f 	bl	800bf50 <_init>
 800bf12:	1b64      	subs	r4, r4, r5
 800bf14:	10a4      	asrs	r4, r4, #2
 800bf16:	42a6      	cmp	r6, r4
 800bf18:	d105      	bne.n	800bf26 <__libc_init_array+0x2e>
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf20:	3601      	adds	r6, #1
 800bf22:	4798      	blx	r3
 800bf24:	e7ee      	b.n	800bf04 <__libc_init_array+0xc>
 800bf26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2a:	3601      	adds	r6, #1
 800bf2c:	4798      	blx	r3
 800bf2e:	e7f2      	b.n	800bf16 <__libc_init_array+0x1e>
 800bf30:	0800dce8 	.word	0x0800dce8
 800bf34:	0800dce8 	.word	0x0800dce8
 800bf38:	0800dce8 	.word	0x0800dce8
 800bf3c:	0800dcec 	.word	0x0800dcec

0800bf40 <memset>:
 800bf40:	4402      	add	r2, r0
 800bf42:	4603      	mov	r3, r0
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d100      	bne.n	800bf4a <memset+0xa>
 800bf48:	4770      	bx	lr
 800bf4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf4e:	e7f9      	b.n	800bf44 <memset+0x4>

0800bf50 <_init>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	bf00      	nop
 800bf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf56:	bc08      	pop	{r3}
 800bf58:	469e      	mov	lr, r3
 800bf5a:	4770      	bx	lr

0800bf5c <_fini>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	bf00      	nop
 800bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf62:	bc08      	pop	{r3}
 800bf64:	469e      	mov	lr, r3
 800bf66:	4770      	bx	lr
